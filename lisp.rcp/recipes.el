(setq el-get-sources '((:name 123-menu :description "Simple menuing system, reminiscent of Lotus 123 in DOS" :type emacsmirror :pkgname "123-menu" :required ((("cl" cl)))) (:name 37emacs :description "Emacs interface to 37signals' Backpack" :type emacsmirror :pkgname "37emacs" :required ((("cl" cl) ("emacs-core" pp) ("eudc" eudc) ("url" url) ("xml" xml)))) (:name a-menu :description "Create a menu from a specified directory" :type emacsmirror :pkgname "a-menu" :required nil) (:name abbrev-complete :description "Abbrev mode completion function" :type emacsmirror :pkgname "abbrev-complete" :required ((("dabbrev" dabbrev) ("hippie-exp" hippie-exp)))) (:name abc-mode :description "Major mode for editing abc music files" :type emacsmirror :pkgname "abc-mode" :required ((("custom" cus-face) ("easymenu" easymenu)))) (:name ac-anything :description "Auto Complete with Anything" :type emacsmirror :pkgname "ac-anything" :required ((("anything" anything) ("auto-complete" auto-complete)) (("anything" anything-match-plugin anything-show-completion))) :depends (auto-complete anything)) (:name ac-lilypond :description "Set up the use of LilyPond with auto-complete" :type emacsmirror :pkgname "ac-lilypond" :required ((("auto-complete" auto-complete))) :depends (auto-complete)) (:name ac-octave :description "An auto-complete source for Octave" :type emacsmirror :pkgname "ac-octave" :required ((("auto-complete" auto-complete) ("cl" cl) ("octave-inf" octave-inf))) :depends (auto-complete)) (:name ac-r :description "Autocompletion routines for R" :type emacsmirror :pkgname "ac-r" :required ((("ess" ess-help))) :depends (ess)) (:name ac-slime :description "An auto-complete source using slime completions" :type emacsmirror :pkgname "ac-slime" :required ((("cl" cl)))) (:name ac-source-ispell :description "Ispell words source for auto-complete-mode" :type emacsmirror :pkgname "ac-source-ispell" :required ((("auto-complete" auto-complete) ("ispell" ispell))) :depends (auto-complete)) (:name accelerate-keyboard :description "Accelerate effective command input time" :type emacsmirror :pkgname "accelerate-keyboard" :required nil) (:name ace-jump-mode :description "A quick cursor location minor mode for emacs" :type emacsmirror :pkgname "ace-jump-mode" :required ((("cl" cl)))) (:name ack-and-a-half :description "Yet another front-end for ack" :type emacsmirror :pkgname "ack-and-a-half" :required ((("cl" cl) ("compile" compile) ("grep" grep) ("iswitchb" iswitchb)))) (:name acldoc :description nil :type emacsmirror :pkgname "acldoc" :required ((("url" url)))) (:name acme-mouse :description "Mouse-button chording" :type emacsmirror :pkgname "acme-mouse" :required ((("cl" cl)))) (:name acme-search :description "Right-click searching" :type emacsmirror :pkgname "acme-search" :required ((("cl" cl)))) (:name activator :description nil :type emacsmirror :pkgname "activator" :required nil) (:name active-region :description nil :type emacsmirror :pkgname "active-region" :required ((("cl" cl)))) (:name actr-mode :description "ACT-R-mode/support for Emacs" :type emacsmirror :pkgname "actr-mode" :required nil) (:name ada-gpr :description "Major-mode for editing GNAT project files" :type emacsmirror :pkgname "ada-gpr" :required ((("ada-mode" ada-mode)))) (:name add-lispdir :description nil :type emacsmirror :pkgname "add-lispdir" :required ((("info" info)))) (:name addressbook :description "A simple addressbook" :type emacsmirror :pkgname "addressbook" :required ((("cl" cl) ("gnus" mm-decode) ("url" url) ("vcard" vcard))) :depends (vcard gnus)) (:name adv-random-sig :description "Advanced random signature inserter" :type emacsmirror :pkgname "adv-random-sig" :required nil) (:name advmarks :description nil :type emacsmirror :pkgname "advmarks" :required nil) (:name after-save-commands :description "Run a shell command after saving a file" :type emacsmirror :pkgname "after-save-commands" :required ((("cl" cl)))) (:name agchat :description "Comint-based emacs interface for chatting on AgChat" :type emacsmirror :pkgname "agchat" :required ((("comint" comint)))) (:name ahg :description "Alberto's Emacs interface for Mercurial (Hg)" :type emacsmirror :pkgname "ahg" :required ((("cl" cl) ("diff-mode" diff-mode) ("easymenu" easymenu) ("ewoc" ewoc) ("grep" grep) ("log-edit" log-edit)))) (:name ahk-mode :description "Major mode for editing AutoHotKey scripts for X/GNU Emacs" :type emacsmirror :pkgname "ahk-mode" :required ((("cl" cl) ("emacs-core" font-lock) ("w3" w3))) :depends (w3)) (:name ajc-java-complete :description "Auto Java Completion for GNU Emacs" :type emacsmirror :pkgname "ajc-java-complete" :required ((("auto-complete" auto-complete) ("yasnippet" yasnippet))) :depends (yasnippet auto-complete)) (:name alert :description nil :type emacsmirror :pkgname "alert" :required ((("cl" cl) ("timerfunctions" timerfunctions))) :depends (timerfunctions)) (:name algorithms :description "Implementations of algorithms for CS381" :type emacsmirror :pkgname "algorithms" :required nil) (:name alien-search :description "Search and replace by regexp which is alien to Emacs" :type emacsmirror :pkgname "alien-search" :required ((("align" align) ("cl" cl) ("emacs-core" menu-bar) ("re-builder" re-builder)))) (:name align-by-current-symbol :description "Align lines containing a symbol according to that symbol" :type emacsmirror :pkgname "align-by-current-symbol" :required nil) (:name align-cljlet :description "Align clojure let functions" :type emacsmirror :pkgname "align-cljlet" :required nil) (:name align-regexp :description nil :type emacsmirror :pkgname "align-regexp" :required nil) (:name all :description "Edit all lines matching a given regexp" :type emacsmirror :pkgname "all" :required nil) (:name alore-mode :description "A major mode for editing alore programs" :type emacsmirror :pkgname "alore-mode" :required nil) (:name alt-dired-view :description "Alternative 'view' command for dired" :type emacsmirror :pkgname "alt-dired-view" :required ((("dired" dired)))) (:name alternative-files :description "Go to alternative file" :type emacsmirror :pkgname "alternative-files" :required ((("cl" cl)))) (:name amigo :description "Interface with friendfeed.com" :type emacsmirror :pkgname "amigo" :required ((("url" url url-http)))) (:name analog :description "Monitor lists of files or command output" :type emacsmirror :pkgname "analog" :required ((("dired" dired) ("emacs-core" pp)))) (:name anaya :description "Emacs interface to the Anaya Online Spanish Dictionaries" :type emacsmirror :pkgname "anaya" :required ((("cl" cl) ("url" url) ("w3" w3 w3-forms))) :depends (w3)) (:name anchored-transpose :description "Transposes a phrase around an anchor phrase" :type emacsmirror :pkgname "anchored-transpose" :required nil) (:name android-mode :description "Minor mode for Android application development" :type emacsmirror :pkgname "android-mode" :required ((("cl" cl)))) (:name ani-fcsh :description "Lets compile work without restarting fcsh and recognize flex errors" :type emacsmirror :pkgname "ani-fcsh" :required nil) (:name annot :description "A global annotator/highlighter for GNU Emacs" :type emacsmirror :pkgname "annot" :required nil) (:name annotate :description "Simple file annotation system" :type emacsmirror :pkgname "annotate" :required nil) (:name ansi :description "Turn string into ansi strings" :type emacsmirror :pkgname "ansi" :required ((("cl" cl)))) (:name ansys-mod :description "Editing Ansys log files under Emacs" :type emacsmirror :pkgname "ansys-mod" :required ((("easymenu" easymenu) ("emacs-core" backquote) ("paren" paren) ("reporter" reporter)))) (:name ansys-mode :description "Editor support for working with Ansys FEA" :type emacsmirror :pkgname "ansys-mode" :required ((("align" align) ("comint" comint) ("custom" custom) ("easymenu" easymenu) ("reporter" reporter)))) (:name antlr-runtime :description "Antlr runtime" :type emacsmirror :pkgname "antlr-runtime" :required ((("cl" cl)))) (:name anything :description "Open anything / QuickSilver-like candidate-selection framework" :type emacsmirror :pkgname "anything" :required ((("advice" advice) ("bookmark" bookmark) ("bookmark-extensions" bookmark-extensions) ("browse-url" browse-url) ("cl" cl) ("compile" compile) ("dired" dired) ("dired-aux" dired-aux) ("dired-x" dired-x) ("ffap" ffap) ("find-func" find-func) ("grep" grep) ("imenu" imenu) ("info" info) ("jabber" jabber) ("org-mode" org) ("recentf" recentf) ("shell" shell) ("shell-history" shell-history) ("simple-call-tree" simple-call-tree) ("thingatpt" thingatpt) ("tramp" tramp) ("url" url) ("woman" woman) ("xml" xml)) (("anything-kyr" anything-kyr-config) ("auto-document" auto-document) ("background" background) ("bm" bm) ("cedet" semantic) ("filecache" filecache) ("gtags" gtags) ("ipa" ipa) ("migemo" migemo) ("shell-command" shell-command) ("w3m" w3m-bookmark) ("yasnippet" yasnippet))) :depends (tramp shell-history org-mode jabber bookmark-extensions)) (:name anything-adaptive :description nil :type emacsmirror :pkgname "anything-adaptive" :required nil) (:name anything-books :description "Anything command for PDF books" :type emacsmirror :pkgname "anything-books" :required ((("cl" cl) ("deferred" concurrent))) :depends (deferred)) (:name anything-c-aspell-interactively :description "Interactive aspell with `anything'" :type emacsmirror :pkgname "anything-c-aspell-interactively" :required ((("anything" anything))) :depends (anything)) (:name anything-c-javadoc :description "Anything-sources for opening javadocs" :type emacsmirror :pkgname "anything-c-javadoc" :required ((("anything" anything) ("emacs-core" simple) ("url" url))) :depends (anything)) (:name anything-c-shell-command :description nil :type emacsmirror :pkgname "anything-c-shell-command" :required ((("anything" anything))) :depends (anything)) (:name anything-dabbrev-expand :description "Dabbrev-expand / dabbrev-completion / partial-dabbrev using anything.el" :type emacsmirror :pkgname "anything-dabbrev-expand" :required ((("anything" anything) ("dabbrev" dabbrev)) (("anything" anything-show-completion))) :depends (anything)) (:name anything-delicious :description nil :type emacsmirror :pkgname "anything-delicious" :required ((("xml" xml)))) (:name anything-dired-history :description nil :type emacsmirror :pkgname "anything-dired-history" :required ((("anything" anything) ("dired" dired))) :depends (anything)) (:name anything-el-swank-fuzzy :description "Anything-sources for el-swank-fuzzy.el" :type emacsmirror :pkgname "anything-el-swank-fuzzy" :required ((("anything" anything anything-complete) ("cl" cl) ("el-swank-fuzzy" el-swank-fuzzy) ("eldoc" eldoc) ("term" term)) (("anything" anything-show-completion))) :depends (el-swank-fuzzy anything)) (:name anything-eproject :description "Anything integration for eproject" :type emacsmirror :pkgname "anything-eproject" :required nil) (:name anything-etags+ :description nil :type emacsmirror :pkgname "anything-etags+" :required ((("anything" anything) ("custom" custom) ("etags" etags)) (("anything" anything-config anything-match-plugin))) :depends (anything)) (:name anything-exuberant-ctags :description "Exuberant ctags anything.el interface" :type emacsmirror :pkgname "anything-exuberant-ctags" :required ((("anything" anything))) :depends (anything)) (:name anything-fpr :description "Finding any resource of a project" :type emacsmirror :pkgname "anything-fpr" :required ((("cl" cl)))) (:name anything-gist :description "Anything-sources and some utilities for gist" :type emacsmirror :pkgname "anything-gist" :required ((("anything" anything) ("cl" cl) ("gist" gist))) :depends (gist anything)) (:name anything-hatena-bookmark :description "Hatena::Bookmark anything.el interface" :type emacsmirror :pkgname "anything-hatena-bookmark" :required ((("anything" anything) ("cl" cl) ("gnus" sha1) ("url" url) ("xml" xml))) :depends (gnus anything)) (:name anything-howm :description nil :type emacsmirror :pkgname "anything-howm" :required ((("anything" anything anything-match-plugin anything-migemo) ("cl" cl) ("howm" howm howm-menu))) :depends (howm anything)) (:name anything-include :description nil :type emacsmirror :pkgname "anything-include" :required nil) (:name anything-ipython :description nil :type emacsmirror :pkgname "anything-ipython" :required ((("cl" cl) (nil ipython)))) (:name anything-jde :description nil :type emacsmirror :pkgname "anything-jde" :required ((("anything" anything) ("jdee" jde))) :depends (jdee anything)) (:name anything-kyr :description "Show context-aware commands" :type emacsmirror :pkgname "anything-kyr" :required ((("anything" anything))) :depends (anything)) (:name anything-make :description "Add targets of nearest makefile to anything sources" :type emacsmirror :pkgname "anything-make" :required nil) (:name anything-mercurial :description nil :type emacsmirror :pkgname "anything-mercurial" :required nil) (:name anything-netscape-bookmark :description "Anything interface for netscape format bookmark file" :type emacsmirror :pkgname "anything-netscape-bookmark" :required ((("anything" anything) ("cl" cl))) :depends (anything)) (:name anything-php-funcref-in-perl :description "Docs-php-funcref-in-perl anything.el interface" :type emacsmirror :pkgname "anything-php-funcref-in-perl" :required ((("anything" anything) ("cl" cl))) :depends (anything)) (:name anything-project :description "Finding any resource of a project" :type emacsmirror :pkgname "anything-project" :required ((("anything" anything)) (("anything" anything-grep))) :depends (anything)) (:name anything-r :description "Anything-sources and some utilities for GNU R" :type emacsmirror :pkgname "anything-r" :required ((("anything" anything) ("ess" ess-site))) :depends (ess anything)) (:name anything-rcodetools :description "Accurate Ruby method completion with anything" :type emacsmirror :pkgname "anything-rcodetools" :required ((("anything" anything) (nil rcodetools)) (("anything" anything-show-completion))) :depends (anything)) (:name anything-replace-string :description "`replace-string' and `query-replace' `anything.el' interface" :type emacsmirror :pkgname "anything-replace-string" :required ((("anything" anything) ("cl" cl))) :depends (anything)) (:name anything-rurima :description "Look up Japanese Ruby Reference Manual with anything.el" :type emacsmirror :pkgname "anything-rurima" :required ((("anything" anything-config anything-match-plugin) ("cl" cl))) :depends (anything)) (:name anything-show-ticket :description nil :type emacsmirror :pkgname "anything-show-ticket" :required ((("cl" cl)))) (:name anything-slime :description "Anything-sources and some utilities for SLIME" :type emacsmirror :pkgname "anything-slime" :required ((("anything" anything anything-complete) ("slime" slime slime-c-p-c slime-fuzzy slime-repl)) (("anything" anything-show-completion))) :depends (slime anything)) (:name anything-w3m :description nil :type emacsmirror :pkgname "anything-w3m" :required ((("dired" dired) ("w3m-type-ahead" w3m-type-ahead))) :depends (w3m-type-ahead)) (:name anything-with-everything :description "Framework to enable you to write anything functions in any language" :type emacsmirror :pkgname "anything-with-everything" :required nil) (:name aok :description "Various useful ways to do `multi-occur'" :type emacsmirror :pkgname "aok" :required ((("cl" cl)))) (:name apache-mode :description "Major mode for editing Apache configuration files" :type emacsmirror :pkgname "apache-mode" :required ((("regexp-opt" regexp-opt)))) (:name apel :description "Declare APEL version" :type emacsmirror :pkgname "apel" :required ((("advice" advice) ("custom" custom) ("emacs-core" ccl cyrillic) ("enriched" enriched) ("widget" wid-edit)))) (:name apple-cyrillic :description "Quail package for inputting Cyrillic characters" :type emacsmirror :pkgname "apple-cyrillic" :required nil) (:name apples-mode :description "Major mode for editing and executing AppleScript code" :type emacsmirror :pkgname "apples-mode" :required ((("cl" cl) ("easymenu" easymenu) ("newcomment" newcomment)))) (:name applescript-mode :description "Major mode for editing AppleScript source" :type emacsmirror :pkgname "applescript-mode" :required ((("easymenu" easymenu)))) (:name application :description "Start application for files matching entries from application-caller-list" :type emacsmirror :pkgname "application" :required nil) (:name apt-mode :description nil :type emacsmirror :pkgname "apt-mode" :required nil) (:name apt-utils :description "Emacs interface to APT (Debian package management)" :type emacsmirror :pkgname "apt-utils" :required ((("browse-url" browse-url) ("dired" dired) ("emacs-core" jka-compr) ("trace" trace)))) (:name archie :description "Query archie servers and parse the results" :type emacsmirror :pkgname "archie" :required ((("cl" cl) ("custom" custom)))) (:name archive-region :description "Move region to archive file instead of killing" :type emacsmirror :pkgname "archive-region" :required ((("cl" cl) ("newcomment" newcomment)))) (:name arduino-mode :description "Major mode for the Arduino language" :type emacsmirror :pkgname "arduino-mode" :required ((("cc-mode" cc-fonts cc-langs cc-menus cc-mode))) :depends (cc-mode)) (:name arrange-buffers :description "Display all buffers which name and mode match a regexp " :type emacsmirror :pkgname "arrange-buffers" :required nil) (:name arscanner :description nil :type emacsmirror :pkgname "arscanner" :required ((("outline" outline)))) (:name arxiv-reader :description "An interface for reading and sorting arXiv abstracts" :type emacsmirror :pkgname "arxiv-reader" :required nil) (:name as3-mode :description "A simple mode for editing Actionscript 3 files" :type emacsmirror :pkgname "as3-mode" :required ((("cl" cl) ("emacs-core" font-lock) ("gud" gud) ("ido" ido) ("yasnippet" yasnippet) (nil flyparse-mode))) :depends (yasnippet)) (:name as3-simple-mode :description "Major mode for editing ActionScript 3 code" :type emacsmirror :pkgname "as3-simple-mode" :required ((("js" js)))) (:name ascii-display :description "Highlight special ASCII characters in another buffer" :type emacsmirror :pkgname "ascii-display" :required nil) (:name ascii-table :description "Print an ASCII Table" :type emacsmirror :pkgname "ascii-table" :required ((("cl" cl)))) (:name asciidoc :description "Asciidoc text file development support" :type emacsmirror :pkgname "asciidoc" :required ((("apropos" apropos) ("cl" cl) ("easymenu" easymenu)))) (:name asp-mode :description "Major mode for editing ASP files" :type emacsmirror :pkgname "asp-mode" :required nil) (:name aspectj :description "AspectJ extensions to Java mode" :type emacsmirror :pkgname "aspectj" :required ((("browse-url" browse-url) ("cc-mode" cc-mode) ("cl" cl) ("custom" custom) ("easy-mmode" easy-mmode) ("easymenu" easymenu) ("emacs-core" font-lock overlay) ("imenu" imenu) ("jdee" jde))) :depends (jdee cc-mode)) (:name async-eval :description "Execute Emacs lisp in a separate process" :type emacsmirror :pkgname "async-eval" :required nil) (:name atim-unscroll :description "Minor mode for restoring buffer look as it was before scrolling" :type emacsmirror :pkgname "atim-unscroll" :required ((("cl" cl)))) (:name atoctx :description nil :type emacsmirror :pkgname "atoctx" :required nil) (:name atom :description "Create an Atom feed" :type emacsmirror :pkgname "atom" :required ((("cl" cl) ("url" url-parse) ("xml" xml)))) (:name atom-blogger :description "Utilities for Atom Blogger API" :type emacsmirror :pkgname "atom-blogger" :required ((("cl" cl) ("emacs-core" derived)))) (:name atom-syndication :description "Elisp implementation of the atom syndication format" :type emacsmirror :pkgname "atom-syndication" :required ((("cl" cl)))) (:name atomo-mode :description "Major mode for editing Atomo files in Emacs" :type emacsmirror :pkgname "atomo-mode" :required ((("emacs-core" font-lock) ("newcomment" newcomment)))) (:name atompub :description "Implementation of draft atom-api" :type emacsmirror :pkgname "atompub" :required ((("muse" muse muse-html) ("url" url url-auth url-cache) ("xml" xml)))) (:name attic :description "Maintain backups with a time stamp" :type emacsmirror :pkgname "attic" :required ((("ediff" ediff) ("tellib" tellib))) :depends (tellib)) (:name auctex :description nil :type emacsmirror :pkgname "auctex" :required ((("cl" cl) ("comint" comint) ("crm" crm) ("custom" custom) ("desktop" desktop) ("easymenu" easymenu) ("emacs-core" font-lock overlay) ("etags" etags) ("etexshow" etexshow) ("info" info) ("outline" outline) ("reftex" reftex) ("reporter" reporter) ("texinfo" texinfo) (nil tex-site))) :depends (reftex etexshow)) (:name augment :description "Display metadata about code" :type emacsmirror :pkgname "augment" :required ((("cl" cl) ("json" json)))) (:name aumix-mode :description "Run the aumix program in a buffer" :type emacsmirror :pkgname "aumix-mode" :required ((("cl" cl) ("term" term)))) (:name aurquery :description "Interface to the Arch User Repository" :type emacsmirror :pkgname "aurquery" :required ((("json" json)))) (:name auto-async-byte-compile :description "Automatically byte-compile when saved" :type emacsmirror :pkgname "auto-async-byte-compile" :required ((("cl" cl)))) (:name auto-capitalize :description "Automatically capitalize (or upcase) words" :type emacsmirror :pkgname "auto-capitalize" :required ((("cl" cl)))) (:name auto-complete :description "Auto Completion for GNU Emacs" :type emacsmirror :pkgname "auto-complete" :required ((("cl" cl) ("emacs-core" pp) ("help-mode" help-mode) ("popup" popup) ("regexp-opt" regexp-opt) ("thingatpt" thingatpt) (nil rcodetools)) (("cedet" semantic-ia) (nil semantic/ia))) :depends (popup)) (:name auto-complete+ :description "Auto complete plus" :type emacsmirror :pkgname "auto-complete+" :required ((("auto-complete" auto-complete))) :depends (auto-complete)) (:name auto-complete-acr :description "Auto-complete-mode extension for GNU R" :type emacsmirror :pkgname "auto-complete-acr" :required ((("auto-complete" auto-complete))) :depends (auto-complete)) (:name auto-complete-actionscript :description nil :type emacsmirror :pkgname "auto-complete-actionscript" :required nil) (:name auto-complete-clang :description "Auto Completion source for clang for GNU Emacs" :type emacsmirror :pkgname "auto-complete-clang" :required ((("auto-complete" auto-complete))) :depends (auto-complete)) (:name auto-complete-ctags :description nil :type emacsmirror :pkgname "auto-complete-ctags" :required ((("auto-complete" auto-complete) ("button" button) ("cl" cl))) :depends (auto-complete)) (:name auto-complete-etags :description nil :type emacsmirror :pkgname "auto-complete-etags" :required ((("auto-complete" auto-complete) ("cl" cl))) :depends (auto-complete)) (:name auto-complete-exuberant-ctags :description "Exuberant ctags auto-complete.el source" :type emacsmirror :pkgname "auto-complete-exuberant-ctags" :required ((("auto-complete" auto-complete))) :depends (auto-complete)) (:name auto-complete-latex-light :description "An abbreviated version of the auto-complete-latex" :type emacsmirror :pkgname "auto-complete-latex-light" :required ((("auto-complete" auto-complete) ("cl" cl))) :depends (auto-complete)) (:name auto-complete-octave :description nil :type emacsmirror :pkgname "auto-complete-octave" :required ((("auto-complete" auto-complete) ("cl" cl))) :depends (auto-complete)) (:name auto-complete-verilog :description nil :type emacsmirror :pkgname "auto-complete-verilog" :required ((("auto-complete" auto-complete) ("cl" cl))) :depends (auto-complete)) (:name auto-complete-ya-gtags :description "A source for auto-complete" :type emacsmirror :pkgname "auto-complete-ya-gtags" :required ((("auto-complete" auto-complete) ("cl" cl))) :depends (auto-complete)) (:name auto-dictionary :description "Automatic dictionary switcher for flyspell" :type emacsmirror :pkgname "auto-dictionary" :required ((("cl" cl) ("flyspell" flyspell) ("ispell" ispell)))) (:name auto-diff :description "Automatically generate diff's for directory contents" :type emacsmirror :pkgname "auto-diff" :required nil) (:name auto-document :description "Automatic document generator of Emacs Lisp" :type emacsmirror :pkgname "auto-document" :required ((("cl" cl)))) (:name auto-highlight-symbol :description "Automatic highlighting current symbol minor mode" :type emacsmirror :pkgname "auto-highlight-symbol" :required ((("cl" cl) ("easy-mmode" easy-mmode)))) (:name auto-indent-mode :description "Auto indent Minor mode" :type emacsmirror :pkgname "auto-indent-mode" :required ((("cl" cl)))) (:name auto-install :description "Auto install elisp file" :type emacsmirror :pkgname "auto-install" :required ((("cl" cl) ("dired" dired) ("emacs-core" bytecomp) ("ffap" ffap) ("find-func" find-func) ("thingatpt" thingatpt) ("url" url)) (("anything-auto-install" anything-auto-install)))) (:name auto-lang :description "Guess language of current buffer" :type emacsmirror :pkgname "auto-lang" :required ((("emacs-core" overlay) ("flyspell" flyspell) ("ispell" ispell) ("trace" trace)))) (:name auto-mark :description "Mark automatically" :type emacsmirror :pkgname "auto-mark" :required ((("cl" cl) ("easy-mmode" easy-mmode)))) (:name auto-overlays :description nil :type emacsmirror :pkgname "auto-overlays" :required ((("cl" cl)))) (:name auto-pair+ :description "Autopair handler to extend Autopair behavior" :type emacsmirror :pkgname "auto-pair+" :required nil) (:name auto-show-doc :description "Show documentation as point moves" :type emacsmirror :pkgname "auto-show-doc" :required nil) (:name autocap :description "Auto-capitalize beginning of sentences" :type emacsmirror :pkgname "autocap" :required nil) (:name autocompletion-php-functions :description "Auto complete php functions" :type emacsmirror :pkgname "autocompletion-php-functions" :required ((("auto-complete" auto-complete))) :depends (auto-complete)) (:name autocue :description nil :type emacsmirror :pkgname "autocue" :required nil) (:name autoinfo :description "Show automatic information for the current selection" :type emacsmirror :pkgname "autoinfo" :required nil) (:name autolisp :description "Major mode to edit AutoLISP in emacs" :type emacsmirror :pkgname "autolisp" :required ((("cl" cl) ("easymenu" easymenu) ("emacs-core" font-lock) ("folding" folding) ("imenu" imenu) ("lisp-mode" lisp-mode) ("outline" outline)))) (:name autoload-make :description nil :type emacsmirror :pkgname "autoload-make" :required ((("emacs-core" autoload)))) (:name autopair :description "Automagically pair braces and quotes like TextMate" :type emacsmirror :pkgname "autopair" :required ((("cl" cl)))) (:name autosmiley :description "Convert smileys into their graphical representation" :type emacsmirror :pkgname "autosmiley" :required ((("gnus" smiley))) :depends (gnus)) (:name autotest :description nil :type emacsmirror :pkgname "autotest" :required ((("shell" shell)) (("unit-test" unit-test)))) (:name avenue-mode :description "Major mode for editing ESRI avenue scrips" :type emacsmirror :pkgname "avenue-mode" :required nil) (:name avmmf :description "AVM Microformat tools for emacs" :type emacsmirror :pkgname "avmmf" :required nil) (:name aws :description "Major mode for managing AWS" :type emacsmirror :pkgname "aws" :required nil) (:name axcess :description "Axcess and Netlinx editing support" :type emacsmirror :pkgname "axcess" :required nil) (:name babel :description "Interface to web translation services such as Babelfish" :type emacsmirror :pkgname "babel" :required ((("cl" cl) ("easymenu" easymenu) ("gnus" mm-url) ("json" json) ("url" url-handlers))) :depends (gnus)) (:name background :description nil :type emacsmirror :pkgname "background" :required ((("shell" shell)))) (:name backup :description nil :type emacsmirror :pkgname "backup" :required ((("diff" diff) ("dired" dired)))) (:name backup-walker :description "Quickly traverse all backups of a file" :type emacsmirror :pkgname "backup-walker" :required ((("cl" cl) ("diff" diff)))) (:name backups-mode :description "Major mode for autosaving files and listing, viewing, and reverting Emacs generated backups" :type emacsmirror :pkgname "backups-mode" :required ((("cl" cl) ("diff" diff)))) (:name balance :description "Editing balance sheets" :type emacsmirror :pkgname "balance" :required nil) (:name balance-mode :description nil :type emacsmirror :pkgname "balance-mode" :required nil) (:name balanced :description nil :type emacsmirror :pkgname "balanced" :required nil) (:name bang :description "Replace ?! and !? with the interrobang character" :type emacsmirror :pkgname "bang" :required nil) (:name banner :description "Make banners from strings" :type emacsmirror :pkgname "banner" :required nil) (:name bar-cursor :description "Package used to switch block cursor to a bar" :type emacsmirror :pkgname "bar-cursor" :required nil) (:name bash-completion :description "BASH completion for the shell buffer" :type emacsmirror :pkgname "bash-completion" :required ((("comint" comint)))) (:name batch-mode :description "Major mode for editing ESRI batch scrips" :type emacsmirror :pkgname "batch-mode" :required nil) (:name battery-freebsd :description nil :type emacsmirror :pkgname "battery-freebsd" :required nil) (:name bavard :description "Emacs interface to the Google Translate" :type emacsmirror :pkgname "bavard" :required ((("cl" cl) ("popup" popup) ("url" url))) :depends (popup)) (:name bbc-news :description nil :type emacsmirror :pkgname "bbc-news" :required nil) (:name bbcode-mode :description "Major mode to edit bbcode files in Emacs" :type emacsmirror :pkgname "bbcode-mode" :required nil) (:name bbdb :description nil :type emacsmirror :pkgname "bbdb" :required ((("advice" advice) ("ange-ftp" ange-ftp) ("browse-url" browse-url) ("calendar" calendar diary-lib) ("cl" cl) ("custom" custom) ("efs" efs) ("electric" electric) ("emacs-core" faces overlay) ("flim" mel) ("gnus" gnus gnus-art gnus-sum gnus-win mail-parse message) ("gnuserv" gnuserv gnuserv-compat) ("info" info) ("itimer" itimer) ("mail-extr" mail-extr) ("mail-utils" mail-utils) ("mailcrypt" mailcrypt) ("mailheader" mailheader) ("mh-e" mh-comp mh-e) ("reporter" reporter) ("reportmail" reportmail) ("rfc822" rfc822) ("rmail" rmail) ("supercite" supercite) ("timezone" timezone) ("url" url) ("vm" vm vm-folder vm-macro vm-message vm-mime vm-misc vm-motion vm-summary vm-undo vm-vars vm-version) (nil dates))) :depends (vm reportmail mailcrypt itimer gnus flim efs)) (:name bbdb-expire :description "Expiry and expire-proof entries for the BBDB" :type emacsmirror :pkgname "bbdb-expire" :required ((("bbdb" bbdb bbdb-com bbdb-hooks) ("bbdb-hidden-update" bbdb-hidden-update) ("gnus" time-date))) :depends (gnus bbdb-hidden-update bbdb)) (:name bbdb-gnokii :description "Export phone entries from BBDB to gnokii contacts file" :type emacsmirror :pkgname "bbdb-gnokii" :required ((("bbdb" bbdb))) :depends (bbdb)) (:name bbdb-hidden-update :description "Update BBDB records very quietly and automatically" :type emacsmirror :pkgname "bbdb-hidden-update" :required ((("advice" advice) ("bbdb" bbdb))) :depends (bbdb)) (:name bbdb-mew :description "BBDB interface to Mew" :type emacsmirror :pkgname "bbdb-mew" :required ((("bbdb" bbdb) ("mew" mew))) :depends (mew bbdb)) (:name bbdb-pilot-jwz :description "Bbdb to palmos address book conduit" :type emacsmirror :pkgname "bbdb-pilot-jwz" :required ((("bbdb" bbdb) ("cl" cl))) :depends (bbdb)) (:name bbdb-rf :description "Some of my own addons to BBDB not in its bits" :type emacsmirror :pkgname "bbdb-rf" :required ((("bbdb" bbdb bbdb-autoloads bbdb-print bbdb-snarf bbdb-vm) ("gnus" message) ("vm" vm))) :depends (vm gnus bbdb)) (:name bbdb-vcard-export :description "Export BBDB as vCard files" :type emacsmirror :pkgname "bbdb-vcard-export" :required ((("bbdb" bbdb) ("easy-mmode" easy-mmode))) :depends (bbdb)) (:name bbdb2tbird :description "Export Emacs BBDB to Thunderbird Address Book via LDIF" :type emacsmirror :pkgname "bbdb2tbird" :required ((("bbdb" bbdb) ("cl" cl))) :depends (bbdb)) (:name bc-mode :description "BC code editing commands for Emacs" :type emacsmirror :pkgname "bc-mode" :required ((("cc-mode" cc-mode))) :depends (cc-mode)) (:name beatnik :description "Tries to implement a beatnik interpreter" :type emacsmirror :pkgname "beatnik" :required nil) (:name beginner :description "Simplify Emacs" :type emacsmirror :pkgname "beginner" :required ((("saveplace" saveplace)))) (:name bencode :description "Serialize integers, strings, lists, and hash-tables" :type emacsmirror :pkgname "bencode" :required nil) (:name better-registers :description "Facilities for more powerful registers" :type emacsmirror :pkgname "better-registers" :required nil) (:name bf :description "BrainFuck compiler written in Emacs-Lisp" :type emacsmirror :pkgname "bf" :required nil) (:name bg-rlogin-setup :description "Rlogin setup" :type emacsmirror :pkgname "bg-rlogin-setup" :required nil) (:name bhl :description "From (P)lain text to (H)tml and (L)aTeX" :type emacsmirror :pkgname "bhl" :required ((("footnote" footnote) ("texnfo-upd" texnfo-upd)) (("reporter" reporter)))) (:name bibl-mode :description "A major mode for maintaining bibliography files" :type emacsmirror :pkgname "bibl-mode" :required ((("easymenu" easymenu) ("reporter" reporter) ("telnet" telnet)))) (:name bibsnarf :description "Get BibTeX format bibliography entries from the net" :type emacsmirror :pkgname "bibsnarf" :required ((("bibtex" bibtex) ("cl" cl) ("gnus" mm-url))) :depends (gnus)) (:name bibtex-utils :description "Utilities for BibTeX" :type emacsmirror :pkgname "bibtex-utils" :required nil) (:name bibus :description nil :type emacsmirror :pkgname "bibus" :required ((("cl" cl) ("mysql" mysql) ("tree-widget" tree-widget)))) (:name bidi :description "Bidi support for Emacs" :type emacsmirror :pkgname "bidi" :required nil) (:name biff :description nil :type emacsmirror :pkgname "biff" :required ((("emacs-core" base64 md5) ("itimer" itimer) ("timer" timer))) :depends (itimer)) (:name bike :description nil :type emacsmirror :pkgname "bike" :required nil) (:name binclock :description "Display the current time using a binary clock" :type emacsmirror :pkgname "binclock" :required ((("cl" cl) ("easymenu" easymenu)))) (:name binmove :description "Minor mode to move cursor up / down like binary search" :type emacsmirror :pkgname "binmove" :required nil) (:name bitlbee :description "Help get Bitlbee (http://www.bitlbee.org) up and running" :type emacsmirror :pkgname "bitlbee" :required nil) (:name bitly :description "Shorten URLs with bit.ly from emacs" :type emacsmirror :pkgname "bitly" :required ((("thingatpt" thingatpt) ("url" url)))) (:name bk :description "Emacs support for BitKeeper configuration management" :type emacsmirror :pkgname "bk" :required ((("advice" advice) ("cl" cl) ("diff-mode" diff-mode) ("easymenu" easymenu) ("man" man) ("timer" timer) ("vc" vc) ("view" view) ("x-migrant" x-migrant) (nil view-less))) :depends (x-migrant)) (:name blink-extras :description nil :type emacsmirror :pkgname "blink-extras" :required (((nil blink-paren)))) (:name blinking-cursor :description nil :type emacsmirror :pkgname "blinking-cursor" :required ((("timer" timer)))) (:name blip :description "Interface with blip.pl" :type emacsmirror :pkgname "blip" :required ((("cl" cl) ("json" json) ("url" url url-http)))) (:name blog :description "A wordpress posting client" :type emacsmirror :pkgname "blog" :required ((("metaweblog" metaweblog) ("muse" muse-html muse-mode))) :depends (metaweblog)) (:name blorg :description "Export a blog from an org file" :type emacsmirror :pkgname "blorg" :required ((("calendar" calendar) ("cl" cl) ("easy-mmode" easy-mmode) ("eshell" em-unix eshell) ("org-mode" org) ("regexp-opt" regexp-opt) ("time-stamp" time-stamp))) :depends (org-mode eshell)) (:name bm :description "Visible bookmarks in buffer" :type emacsmirror :pkgname "bm" :required ((("emacs-core" overlay) ("info" info)))) (:name bm-evernote :description "Bridging between bookmark and evernote-mode" :type emacsmirror :pkgname "bm-evernote" :required (((nil evernote-mode)))) (:name bm-ext :description nil :type emacsmirror :pkgname "bm-ext" :required ((("bm" bm) ("cl" cl))) :depends (bm)) (:name bm-man-cmplt :description "Completion of Unix manual page spec. using apropos(1)" :type emacsmirror :pkgname "bm-man-cmplt" :required nil) (:name bmi :description "Calculate body mass index (BMI)" :type emacsmirror :pkgname "bmi" :required nil) (:name bongo :description "Flexible and usable media player for Emacs" :type emacsmirror :pkgname "bongo" :required ((("cl" cl) ("custom" cus-edit custom) ("electric" electric) ("find-func" find-func) ("gnus" format-spec time-date) ("rx" rx)) (("volume" volume))) :depends (gnus)) (:name bookem :description nil :type emacsmirror :pkgname "bookem" :required nil) (:name bookmark+ :description "Bookmark+: extensions to standard library `bookmark.el'" :type emacsmirror :pkgname "bookmark+" :required ((("bookmark" bookmark) ("browse-url" browse-url) ("cl" cl) ("dired-aux" dired-aux) ("dired-x" dired-x) ("emacs-core" pp) ("ffap" ffap) ("gnus" gnus gnus-sum) ("info" info) ("man" man) ("repeat" repeat) ("w3m" w3m)) (("crosshairs" crosshairs) ("desktop" desktop) ("emacs-core" image) ("fit-frame" fit-frame) ("gnus" mailcap) ("help-mode" help-mode) ("image-dired" image-dired) ("image-mode" image-mode) ("linkd" linkd) ("pp+" pp+))) :depends (w3m gnus)) (:name bookmark-add :description "Creates the buffer for work with bookmarks" :type emacsmirror :pkgname "bookmark-add" :required ((("bookmark" bookmark) ("widget" wid-edit)))) (:name bookmark-extensions :description nil :type emacsmirror :pkgname "bookmark-extensions" :required ((("anything" anything-config) ("bookmark" bookmark) ("cl" cl) ("emacs-core" derived) ("gnus" message) ("org-mode" org) ("url" url) ("w3m" w3m)) (("anything-delicious" anything-delicious) ("w3m" w3m-bookmark))) :depends (w3m org-mode gnus anything)) (:name bookmark-search :description "Provide a search command for emacs bookmarks ala anything. " :type emacsmirror :pkgname "bookmark-search" :required ((("bookmark" bookmark) ("cl" cl)))) (:name boshiamy-cue :description nil :type emacsmirror :pkgname "boshiamy-cue" :required nil) (:name boxquote :description "Quote text with a semi-box" :type emacsmirror :pkgname "boxquote" :required ((("cl" cl) ("rect" rect)))) (:name bpath :description "Small bookmark tool" :type emacsmirror :pkgname "bpath" :required nil) (:name breadcrumb :description "Breadcrumb.  Set breadcrumb bookmarks and jump to them" :type emacsmirror :pkgname "breadcrumb" :required ((("info" info)))) (:name breathe :description "Breathing exercises timer (to control hyperventilation)" :type emacsmirror :pkgname "breathe" :required ((("banner" banner) ("cl" cl))) :depends (banner)) (:name brief :description "Brief-Emulation for Emacs" :type emacsmirror :pkgname "brief" :required ((("bs" bs) ("rect" rect) ("view" view)))) (:name browse-cltl2 :description nil :type emacsmirror :pkgname "browse-cltl2" :required ((("browse-url" browse-url) ("cl" cl) ("url" url)))) (:name browse-help :description nil :type emacsmirror :pkgname "browse-help" :required ((("browse-url" browse-url) ("cl" cl) ("custom" cus-edit)))) (:name browse-kill-ring :description "Interactively insert items from kill-ring" :type emacsmirror :pkgname "browse-kill-ring" :required ((("cl" cl) ("emacs-core" derived overlay)))) (:name browse-urn :description "Functionality for browsing URNs" :type emacsmirror :pkgname "browse-urn" :required nil) (:name btjunkie-search :description "Brutal query engine against btjunkie.org" :type emacsmirror :pkgname "btjunkie-search" :required nil) (:name buffer-charset :description "Show usage of charsets in a buffer" :type emacsmirror :pkgname "buffer-charset" :required nil) (:name buffer-file-sync :description nil :type emacsmirror :pkgname "buffer-file-sync" :required nil) (:name buffer-fns :description "Functions for modifying buffer contents or display" :type emacsmirror :pkgname "buffer-fns" :required ((("emacs-core" pp) ("emacs-variants" emacs-variants) ("list-fns" list-fns))) :depends (list-fns emacs-variants)) (:name buffer-move :description "Swap buffers without typing C-x b on each window" :type emacsmirror :pkgname "buffer-move" :required ((("windmove" windmove)))) (:name buffer-stack :description "Enhanced intelligent switch-to-other-buffer replacement" :type emacsmirror :pkgname "buffer-stack" :required nil) (:name buffer-stack-suppl :description nil :type emacsmirror :pkgname "buffer-stack-suppl" :required ((("buffer-stack" buffer-stack) ("cl" cl))) :depends (buffer-stack)) (:name buffer-thumbnail :description nil :type emacsmirror :pkgname "buffer-thumbnail" :required (((nil xpm-fulmination)))) (:name buffer-time-stamp :description "Display buffer time stamps in the mode line" :type emacsmirror :pkgname "buffer-time-stamp" :required nil) (:name buffer-timer :description nil :type emacsmirror :pkgname "buffer-timer" :required ((("gnus" gnus-spec))) :depends (gnus)) (:name bugzilla :description nil :type emacsmirror :pkgname "bugzilla" :required ((("url" url)))) (:name build-tags :description nil :type emacsmirror :pkgname "build-tags" :required nil) (:name buqis :description "Quick buffers switcher" :type emacsmirror :pkgname "buqis" :required nil) (:name button-lock :description "Clickable text defined by regular expression, controlled by font-lock" :type emacsmirror :pkgname "button-lock" :required ((("cl" cl) ("emacs-core" font-lock)))) (:name byrd-biff :description "Mail notification" :type emacsmirror :pkgname "byrd-biff" :required ((("timer" timer)))) (:name byte-code-cache :description "Compile files as they're used" :type emacsmirror :pkgname "byte-code-cache" :required ((("advice" advice) ("emacs-core" bytecomp)))) (:name bytecomp-fns :description "Bytecode maintenance functions" :type emacsmirror :pkgname "bytecomp-fns" :required ((("emacs-core" backquote byte-compile)))) (:name bzr-ui :description "Utility functions to navigate a working copy of a bazaar repository" :type emacsmirror :pkgname "bzr-ui" :required ((("vc" vc-bzr) (nil cm-path)))) (:name c-boxes :description nil :type emacsmirror :pkgname "c-boxes" :required nil) (:name c-comment-edit :description "Edit C comments" :type emacsmirror :pkgname "c-comment-edit" :required nil) (:name c-eldoc :description "Helpful description of the arguments to C functions" :type emacsmirror :pkgname "c-eldoc" :required ((("cc-mode" cc-defs) ("cl" cl) ("eldoc" eldoc))) :depends (cc-mode)) (:name c-toggle-dot-pointer :description "Functions for toggling a variable in a C function between pointer and non-pointer" :type emacsmirror :pkgname "c-toggle-dot-pointer" :required nil) (:name ca2 :description nil :type emacsmirror :pkgname "ca2" :required ((("cedet" semantic-ia) ("cl" cl) ("thingatpt" thingatpt))) :depends (cedet)) (:name cabecera :description nil :type emacsmirror :pkgname "cabecera" :required nil) (:name cacoo :description "Minor mode for Cacoo (http://cacoo.com)" :type emacsmirror :pkgname "cacoo" :required ((("cl" cl) ("deferred" concurrent) ("easymenu" easymenu) ("json" json) ("url" url-file))) :depends (deferred)) (:name cake :description nil :type emacsmirror :pkgname "cake" :required ((("anything" anything) ("auto-complete" auto-complete) ("cl" cl) ("easy-mmode" easy-mmode) ("historyf" historyf)) (("anything" anything-show-completion) ("imenu" imenu) ("tail" tail))) :depends (historyf auto-complete anything)) (:name cal-catholic :description "Calendar functions for the Roman Catholic liturgical calendar" :type emacsmirror :pkgname "cal-catholic" :required ((("calendar" cal-menu calendar)))) (:name cal-china-plus :description "Extra stuff for cal-china" :type emacsmirror :pkgname "cal-china-plus" :required ((("calendar" cal-china diary-lib)))) (:name cal-desk-calendar :description "Desk calendar style extensions to Emacs' Calendar/Diary" :type emacsmirror :pkgname "cal-desk-calendar" :required ((("calendar" calendar diary-lib lunar solar)))) (:name calc-inline :description "Evaluate calc-expression within ordinary text" :type emacsmirror :pkgname "calc-inline" :required nil) (:name calfw :description "Calendar view framework on Emacs" :type emacsmirror :pkgname "calfw" :required ((("calendar" calendar holidays) ("cl" cl) ("howm" howm) ("icalendar" icalendar) ("org-mode" org org-agenda) ("url" url))) :depends (org-mode howm)) (:name calfw-gcal :description "Some utilities for calfw.el" :type emacsmirror :pkgname "calfw-gcal" :required ((("calfw" calfw))) :depends (calfw)) (:name camelcase-mode :description "Minor mode for editing with camelCase words" :type emacsmirror :pkgname "camelcase-mode" :required nil) (:name caml :description nil :type emacsmirror :pkgname "caml" :required ((("comint" comint) ("compile" compile) ("emacs-core" derived font-lock overlay) ("imenu" imenu) ("info" info) ("shell" shell) ("thingatpt" thingatpt)))) (:name campfire :description "An interface to campfire" :type emacsmirror :pkgname "campfire" :required ((("button" button) ("json" json) ("twittering-mode" ssl) ("url" url url-http))) :depends (twittering-mode)) (:name caps-lock :description "Caps Lock mode" :type emacsmirror :pkgname "caps-lock" :required nil) (:name caselet :description "Cond/case statements with bindings before tests" :type emacsmirror :pkgname "caselet" :required nil) (:name cat-safe :description "Protect your buffers from wandering cats" :type emacsmirror :pkgname "cat-safe" :required nil) (:name catdoc :description "This is a simple wrapper around the catdoc Word to Text converter" :type emacsmirror :pkgname "catdoc" :required nil) (:name cc-mode :description "Major mode for editing C and similar languages" :type emacsmirror :pkgname "cc-mode" :required ((("custom" custom) ("emacs-core" font-lock) ("reporter" reporter) ("widget" widget)))) (:name cc-tempo-electric-support :description "Provides support for insertion of" :type emacsmirror :pkgname "cc-tempo-electric-support" :required ((("cc-mode" cc-mode) ("tempo" tempo))) :depends (cc-mode)) (:name cclookup :description nil :type emacsmirror :pkgname "cclookup" :required ((("browse-url" browse-url) ("cl" cl) ("emacs-core" simple) ("ido" ido)))) (:name ccm :description "Continuus integration" :type emacsmirror :pkgname "ccm" :required ((("easymenu" easymenu)))) (:name cdb-gud :description "Grand Unified Debugger mode for running CDB" :type emacsmirror :pkgname "cdb-gud" :required nil) (:name cddb :description "Cddb interface" :type emacsmirror :pkgname "cddb" :required ((("cl" cl) ("expect" expect) ("gnus" message) (nil captitle))) :depends (gnus expect)) (:name cdi :description "Interface between Emacs and command line CD players" :type emacsmirror :pkgname "cdi" :required nil) (:name cdt :description "Emacs interface to the Clojure Debugging Toolkit" :type emacsmirror :pkgname "cdt" :required nil) (:name ce :description "Copyedit entries for the Stanford Encyclopedia of Philosophy" :type emacsmirror :pkgname "ce" :required ((("cl" cl) ("custom" custom) ("emacs-core" pp)))) (:name cedet :description "Setup CEDET environment" :type emacsmirror :pkgname "cedet" :required ((("advice" advice) ("ange-ftp" ange-ftp) ("assoc" assoc) ("autoconf" autoconf autoconf-mode) ("benchmark" benchmark) ("browse-url" browse-url) ("button" button) ("cc-mode" cc-mode) ("cl" cl) ("compile" compile) ("custom" custom) ("debug" debug) ("dired" dired) ("easymenu" easymenu) ("ebrowse" ebrowse) ("edebug" edebug) ("ediff" ediff) ("efs" efs) ("eldoc" eldoc) ("elp" elp) ("emacs-core" autoload backquote bytecomp font-lock fringe image pp tooltip) ("etags" etags) ("f90" f90) ("find-func" find-func) ("grep" grep) ("help-mode" help-mode) ("hideif" hideif) ("hippie-exp" hippie-exp) ("imenu" imenu) ("info" info) ("ispell" ispell) ("locate" locate) ("make-mode" make-mode) ("malabar-mode" wisent-java-wy) ("newcomment" newcomment) ("nxml-mode" nxml-mode) ("pg" pg) ("picture" picture) ("ps-print" ps-print) ("rect" rect) ("ring" ring) ("rx" rx) ("sgml-mode" sgml-mode) ("shell" shell) ("tempo" tempo) ("texinfo" texinfo) ("thingatpt" thingatpt) ("timer" timer) ("tramp" tramp) ("w3" w3-imenu) ("which-func" which-func) ("widget" wid-edit widget) ("xml" xml) (nil android dbif document document-vars makefile psgml-mode semantic-c-by semantic-erlang-by semantic-f90-by semantic-make-by semantic-scm-by srecode-template-wy thing wisent-c-wy wisent-calc-wy wisent-csharp-wy wisent-dot-wy wisent-java-tags-wy wisent-javascript-jv-wy wisent-php-wy wisent-python-wy)) (("python" python))) :depends (w3 tramp malabar-mode efs cc-mode)) (:name cell :description "Abstract spreadsheet display engine for GNU Emacs" :type emacsmirror :pkgname "cell" :required ((("cl" cl)))) (:name centering :description "Keep the cursor in the centre at all times. " :type emacsmirror :pkgname "centering" :required nil) (:name cfml-helper-mode :description "Major mode for composing cfml files" :type emacsmirror :pkgname "cfml-helper-mode" :required ((("cc-mode" cc-mode) ("cl" cl) ("easymenu" easymenu) ("emacs-core" font-lock) ("jdee" jde) ("tempo" tempo) ("visual-basic-mode" visual-basic-mode) (nil psgml-html))) :depends (visual-basic-mode jdee cc-mode)) (:name cfs :description "A frontend to CFS" :type emacsmirror :pkgname "cfs" :required nil) (:name cg-mode :description "Mode for editing cg programs" :type emacsmirror :pkgname "cg-mode" :required nil) (:name change-html-head-tail :description nil :type emacsmirror :pkgname "change-html-head-tail" :required ((("cl" cl) ("page-structure" page-structure) ("webmaster-macros" webmaster-macros))) :depends (webmaster-macros page-structure)) (:name change-mode :description "Minor mode displaying buffer changes with special face" :type emacsmirror :pkgname "change-mode" :required ((("advice" advice)))) (:name changelog-url :description "Buttonize PRs in ChangeLog" :type emacsmirror :pkgname "changelog-url" :required nil) (:name cheat :description nil :type emacsmirror :pkgname "cheat" :required nil) (:name cheat-fu :description nil :type emacsmirror :pkgname "cheat-fu" :required nil) (:name chef-mode :description "Minor mode for editing an opscode chef repository" :type emacsmirror :pkgname "chef-mode" :required nil) (:name chess :description "Play chess in Emacs" :type emacsmirror :pkgname "chess" :required ((("cl" cl) ("comint" comint) ("emacs-core" autoload sort) ("rx" rx)) (("pcomplete" pcomplete)))) (:name chill-mode :description nil :type emacsmirror :pkgname "chill-mode" :required ((("emacs-core" font-lock) ("etags" etags) (nil func-menu)))) (:name chinese-chess :description "Chinese Chess Game" :type emacsmirror :pkgname "chinese-chess" :required ((("cl" cl) ("custom" cus-edit)))) (:name chinese-chess-pvc :description "A chinese chess computer player" :type emacsmirror :pkgname "chinese-chess-pvc" :required ((("chinese-chess" chinese-chess) ("cl" cl))) :depends (chinese-chess)) (:name chm-view :description "View CHM file" :type emacsmirror :pkgname "chm-view" :required nil) (:name choose :description nil :type emacsmirror :pkgname "choose" :required ((("cl" cl) ("oct" oct) (nil maze utils4)))) (:name chop :description "Interactive binary search for a line within a window" :type emacsmirror :pkgname "chop" :required nil) (:name cif :description "Major mode for editing (mm?)CIF files" :type emacsmirror :pkgname "cif" :required nil) (:name circe :description "Client for IRC in Emacs" :type emacsmirror :pkgname "circe" :required ((("emacs-core" autoload font-lock overlay) ("gnus" time-date) ("lui" lui) ("ring" ring) ("timer" timer))) :depends (lui gnus)) (:name cisco-router-mode :description "Major mode for editing Cisco router configuration files" :type emacsmirror :pkgname "cisco-router-mode" :required nil) (:name cite :description "Citing engine for Gnus" :type emacsmirror :pkgname "cite" :required nil) (:name cl-merge :description "Add a `cl-merge-struct' function" :type emacsmirror :pkgname "cl-merge" :required ((("cl" cl)))) (:name claire-mode :description "For claire, an object oriented language" :type emacsmirror :pkgname "claire-mode" :required nil) (:name class-mode :description nil :type emacsmirror :pkgname "class-mode" :required nil) (:name clay-mode :description "Major mode for editing Clay source files" :type emacsmirror :pkgname "clay-mode" :required nil) (:name cldoc :description "Show Common Lisp operators and variables information in echo area" :type emacsmirror :pkgname "cldoc" :required ((("cl" cl)))) (:name clearcase :description "ClearCase/Emacs integration" :type emacsmirror :pkgname "clearcase" :required ((("cl" cl) ("comint" comint) ("custom" custom) ("dired" dired) ("easymenu" easymenu) ("executable" executable) ("reporter" reporter) ("ring" ring) ("timer" timer) ("tq" tq)))) (:name clhs :description "Access the Common Lisp HyperSpec (CLHS)" :type emacsmirror :pkgname "clhs" :required ((("browse-url" browse-url) ("cl" cl) ("thingatpt" thingatpt) ("url" url)))) (:name clibpc :description "Partial complete functions for c libraries" :type emacsmirror :pkgname "clibpc" :required ((("button" button) ("cl" cl) ("complete" complete)))) (:name climdoc :description nil :type emacsmirror :pkgname "climdoc" :required nil) (:name clojure-mode :description "Major mode for Clojure code" :type emacsmirror :pkgname "clojure-mode" :required ((("cl" cl) ("slime" slime) ("which-func" which-func))) :depends (slime)) (:name cluck :description "Enhanced support for Chicken Scheming" :type emacsmirror :pkgname "cluck" :required ((("advice" advice) ("browse-url" browse-url) ("cmuscheme" cmuscheme) ("compile" compile) ("custom" custom) ("easymenu" easymenu) ("emacs-core" font-lock) ("scheme" scheme) ("thingatpt" thingatpt)))) (:name cn-outline :description "Minor mode for column-number-base line folding" :type emacsmirror :pkgname "cn-outline" :required nil) (:name cobol-mode :description "Handles only what little Cobol I happen to know" :type emacsmirror :pkgname "cobol-mode" :required ((("column-marker" column-marker) ("imenu" imenu) ("which-func" which-func) (nil cobol-indent))) :depends (python-mode)) (:name cocol :description "Count columns and lines minor mode" :type emacsmirror :pkgname "cocol" :required nil) (:name codepad :description "Emacs integration for codepad.org" :type emacsmirror :pkgname "codepad" :required ((("cl" cl) ("url" url-http)))) (:name coffee-mode :description "Major mode to edit CoffeeScript files in Emacs" :type emacsmirror :pkgname "coffee-mode" :required ((("cl" cl) ("comint" comint) ("easymenu" easymenu) ("emacs-core" font-lock) ("newcomment" newcomment)))) (:name collab :description "Peer to peer collaborative editing" :type emacsmirror :pkgname "collab" :required nil) (:name color-dired :description "Make dired color" :type emacsmirror :pkgname "color-dired" :required ((("cl" cl) ("ls-lisp" ls-lisp)))) (:name color-moccur :description "Multi-buffer occur (grep) mode" :type emacsmirror :pkgname "color-moccur" :required ((("cl" cl) ("ee" ee-autoloads) ("emacs-core" overlay) ("migemo" migemo) ("moccur-edit" moccur-edit))) :depends (moccur-edit migemo)) (:name color-mode :description "Minor mode for colorizing lines of a file" :type emacsmirror :pkgname "color-mode" :required nil) (:name color-namazu :description nil :type emacsmirror :pkgname "color-namazu" :required ((("color-occur" color-occur) ("namazu" namazu) ("view" view))) :depends (namazu color-occur)) (:name color-occur :description nil :type emacsmirror :pkgname "color-occur" :required nil) (:name color-theme :description "Install color themes" :type emacsmirror :pkgname "color-theme" :required ((("cl" cl) ("custom" cus-face) ("easymenu" easymenu) ("muse" muse-colors muse-docbook muse-html muse-latex muse-mode muse-project muse-texinfo muse-wiki) ("reporter" reporter) ("sendmail" sendmail) ("widget" wid-edit)))) (:name color-theme-almost-monokai :description nil :type emacsmirror :pkgname "color-theme-almost-monokai" :required ((("color-theme" color-theme))) :depends (zenburn-theme)) (:name color-theme-arjen :description "Arjen Wiersma's preferred color theme" :type emacsmirror :pkgname "color-theme-arjen" :required ((("color-theme" color-theme))) :depends (zenburn-theme)) (:name color-theme-eclipse :description "Eclipse color theme for GNU Emacs" :type emacsmirror :pkgname "color-theme-eclipse" :required ((("color-theme" color-theme))) :depends (zenburn-theme)) (:name color-theme-hober2 :description "Edward O'Connor's second color theme" :type emacsmirror :pkgname "color-theme-hober2" :required ((("color-theme" color-theme))) :depends (zenburn-theme)) (:name color-theme-mac-classic :description "A color theme that resembles the TextMate Mac Classic theme. " :type emacsmirror :pkgname "color-theme-mac-classic" :required nil) (:name color-theme-sanityinc :description "Two pleasant color themes" :type emacsmirror :pkgname "color-theme-sanityinc" :required ((("color-theme" color-theme))) :depends (zenburn-theme)) (:name color-theme-subdued :description "A tango-based color theme for Emacs" :type emacsmirror :pkgname "color-theme-subdued" :required ((("color-theme" color-theme))) :depends (zenburn-theme)) (:name color-theme-x :description "Convert color themes to X11 resource settings" :type emacsmirror :pkgname "color-theme-x" :required ((("cl" cl) ("time-stamp" time-stamp)))) (:name colour-schemes :description "Try other groups of colours" :type emacsmirror :pkgname "colour-schemes" :required nil) (:name columnize :description "Formats a list of items into columns (pillars)" :type emacsmirror :pkgname "columnize" :required nil) (:name come-fly :description "Minor mode for the Sinatra web mini-framework" :type emacsmirror :pkgname "come-fly" :required ((("cl" cl)))) (:name comics :description "Download and read comics from emacs" :type emacsmirror :pkgname "comics" :required ((("calendar" calendar)))) (:name comint-popup :description "Maybe show comint process output windows" :type emacsmirror :pkgname "comint-popup" :required ((("pb-popup" pb-popup))) :depends (pb-popup)) (:name comint-redirect :description "Redirect comint output to multiple buffers" :type emacsmirror :pkgname "comint-redirect" :required ((("comint" comint)))) (:name command-frequency :description nil :type emacsmirror :pkgname "command-frequency" :required nil) (:name commandir :description "Directory Commander" :type emacsmirror :pkgname "commandir" :required nil) (:name comment :description "Comment out regions of buffers" :type emacsmirror :pkgname "comment" :required nil) (:name commit-patch-buffer :description nil :type emacsmirror :pkgname "commit-patch-buffer" :required ((("log-edit" log-edit) ("vc" vc)))) (:name common-directory :description "Special handling of my common directory" :type emacsmirror :pkgname "common-directory" :required nil) (:name company :description "Extensible inline text completion mechanism" :type emacsmirror :pkgname "company" :required ((("abbrev" abbrev) ("cl" cl) ("etags" etags) ("help-mode" help-mode) ("ispell" ispell) ("nxml-mode" nxml-mode rng-nxml) ("pymacs" pymacs) ("tempo" tempo) (nil pysmell semantic/analyze)) (("cedet" semantic-analyze semantic-idle) ("oddmuse" oddmuse) (nil semantic/idle yaooddmuse))) :depends (pymacs)) (:name compare-windows-interactively :description nil :type emacsmirror :pkgname "compare-windows-interactively" :required ((("compare-w" compare-w)))) (:name compile-bookmarks :description "Bookmarks for compilation commands" :type emacsmirror :pkgname "compile-bookmarks" :required ((("compile" compile) ("recentf" recentf)))) (:name completing-help :description "An enhancement to `display-completion-list'" :type emacsmirror :pkgname "completing-help" :required nil) (:name completion-ui :description nil :type emacsmirror :pkgname "completion-ui" :required ((("cedet" semantic-ia) ("cl" cl) ("dabbrev" dabbrev) ("etags" etags) ("flyspell" flyspell) ("ispell" ispell) ("pos-tip" pos-tip)) (("cedet" semantic) (nil nxml))) :depends (pos-tip cedet)) (:name concordance :description "Show concordance table" :type emacsmirror :pkgname "concordance" :required ((("cl" cl) ("info" info) ("tellib" tellib) ("thingatpt" thingatpt) ("timer" timer))) :depends (tellib)) (:name confluence :description "Emacs mode for interacting with confluence wikis" :type emacsmirror :pkgname "confluence" :required ((("browse-url" browse-url) ("ediff" ediff) ("emacs-core" font-lock) ("image-file" image-file) ("thingatpt" thingatpt) ("url" url-http) ("xml-rpc" xml-rpc))) :depends (xml-rpc)) (:name connectivity :description nil :type emacsmirror :pkgname "connectivity" :required ((("cl" cl) ("webmaster-macros" webmaster-macros))) :depends (webmaster-macros)) (:name conspire :description "Collaborative real-time editing" :type emacsmirror :pkgname "conspire" :required nil) (:name constellations :description "Constellation tools" :type emacsmirror :pkgname "constellations" :required nil) (:name constraint :description "A constraint propagation library in elisp" :type emacsmirror :pkgname "constraint" :required ((("cedet" eieio) ("cl" cl))) :depends (cedet)) (:name contentswitch :description "Switch to buffer/file by content" :type emacsmirror :pkgname "contentswitch" :required ((("cl" cl)))) (:name contexts :description nil :type emacsmirror :pkgname "contexts" :required ((("memory-monitor" memory-monitor) ("savebuffer" savebuffer))) :depends (savebuffer memory-monitor)) (:name control-lock :description "Like caps-lock, but for your control key.  Give your pinky a rest!" :type emacsmirror :pkgname "control-lock" :required nil) (:name convert-email :description "Go through my web tree, and convert mailtos into a reference to a contact details page" :type emacsmirror :pkgname "convert-email" :required nil) (:name conway :description nil :type emacsmirror :pkgname "conway" :required nil) (:name cook-mode :description "Major mode for writing cook (a make replacement) files" :type emacsmirror :pkgname "cook-mode" :required ((("custom" custom)))) (:name copy-directory :description "Copy a directory" :type emacsmirror :pkgname "copy-directory" :required nil) (:name copy-from-surrounding-lines :description nil :type emacsmirror :pkgname "copy-from-surrounding-lines" :required ((("emacs-core" misc)))) (:name copyedit :description "Tweak editing commands for handling prose" :type emacsmirror :pkgname "copyedit" :required ((("cc-mode" cc-defs) ("cl" cl) ("thingatpt" thingatpt))) :depends (cc-mode)) (:name corba :description "A Client Side CORBA Implementation for Emacs" :type emacsmirror :pkgname "corba" :required ((("cl" cl)))) (:name couchdb-document-text :description "Couchdb document as text" :type emacsmirror :pkgname "couchdb-document-text" :required ((("couchdb-document" couchdb-document)))) (:name counter :description "Insert series of numbers into text" :type emacsmirror :pkgname "counter" :required ((("cl" cl)))) (:name coverlay :description "Code Coverage Overlay for Emacs" :type emacsmirror :pkgname "coverlay" :required ((("csv-mode" csv-mode))) :depends (csv-mode)) (:name cpan :description nil :type emacsmirror :pkgname "cpan" :required ((("anything" anything) ("browse-url" browse-url) ("cl" cl) ("rx" rx) ("url" url-util) ("woman" woman))) :depends (anything)) (:name cperl-mode :description "Perl code editing commands for Emacs" :type emacsmirror :pkgname "cperl-mode" :required ((("cl" cl) ("custom" custom) ("easymenu" easymenu) ("edebug" edebug) ("emacs-core" font-lock) ("etags" etags) ("gud" gud) ("imenu" imenu) ("info" info) ("man" man) ("mode-compile" mode-compile) ("ps-print" ps-print) ("tmm" tmm)))) (:name cppref :description "A Simple C++ Reference Viewer" :type emacsmirror :pkgname "cppref" :required ((("cl" cl)))) (:name cppsense :description "Simple, heuristic, tag-based C++ coding assistant" :type emacsmirror :pkgname "cppsense" :required ((("cl" cl) ("etags" etags)))) (:name cricket :description "Get live cricket scores and news updates from inside emacs" :type emacsmirror :pkgname "cricket" :required ((("browse-url" browse-url) ("cl" cl) ("custom" custom) ("url" url) ("w3" w3))) :depends (w3)) (:name crontab-mode :description "Mode for editing crontab files" :type emacsmirror :pkgname "crontab-mode" :required nil) (:name cruisecontrol :description "Talking to a cruisecontrol server with emacs" :type emacsmirror :pkgname "cruisecontrol" :required nil) (:name cscope :description "Interface to cscope browser" :type emacsmirror :pkgname "cscope" :required nil) (:name csde :description "Integrated Development Environment for Csharp" :type emacsmirror :pkgname "csde" :required ((("browse-url" browse-url) ("cc-mode" cc-mode) ("cedet" eieio semantic semantic-imenu semantic-sb senator speedbar) ("cl" cl) ("compile" compile) ("custom" cus-edit custom) ("easymenu" easymenu) ("elib" avltree) ("emacs-core" font-lock sort) ("gud" gud) ("imenu" imenu) ("jdee" beanshell) ("reporter" reporter) ("setnu" setnu) ("tempo" tempo) ("widget" wid-edit) (nil csde-wiz semantic-bnf semantic-mode))) :depends (setnu jdee elib cedet cc-mode)) (:name csense :description "Coding assistant front-end" :type emacsmirror :pkgname "csense" :required ((("cl" cl) ("csharp-mode" csharp-mode) ("etags" etags) ("rx" rx)))) (:name csound-x :description nil :type emacsmirror :pkgname "csound-x" :required ((("calc" calc calc-keypd) ("cedet" speedbar) ("cl" cl) ("clojure-mode" clojure-mode) ("comint" comint) ("custom" cus-edit custom) ("easymenu" easymenu) ("emacs-core" font-lock) ("slime" slime) ("tabify" tabify) ("thingatpt" thingatpt) ("widget" widget) (nil embedded-elisp-library query-sheet swank-clojure-autoload)) (("mmm-mode" mmm-auto) ("org-mode" org) ("ses" ses) (nil keykit-interaction keykit-mode))) :depends (slime clojure-mode cedet)) (:name css-palette :description nil :type emacsmirror :pkgname "css-palette" :required ((("cl" cl) ("nxhtml" css-color))) :depends (nxhtml)) (:name cssh :description "Clusterssh implementation for emacs" :type emacsmirror :pkgname "cssh" :required ((("cl" cl) ("dired" dired) ("ibuffer" ibuffer) ("shell" shell) ("term" term) ("tramp" tramp))) :depends (tramp)) (:name csv :description "Functions for reading and parsing CSV files" :type emacsmirror :pkgname "csv" :required nil) (:name csv-mode :description "Major mode for editing comma-separated value files" :type emacsmirror :pkgname "csv-mode" :required ((("emacs-core" sort)))) (:name csv-nav :description "Navigate and edit CSV files" :type emacsmirror :pkgname "csv-nav" :required nil) (:name csv-vocab-mode :description "Switch input modes according to column of spreadsheet" :type emacsmirror :pkgname "csv-vocab-mode" :required ((("csv-mode" csv-mode))) :depends (csv-mode)) (:name csv-writer :description "Write alists into csv files" :type emacsmirror :pkgname "csv-writer" :required ((("cl" cl)))) (:name ctags-update :description "Auto update TAGS in parent directory using exuberant-ctags" :type emacsmirror :pkgname "ctags-update" :required nil) (:name cua-emul :description "CUA style buffer-switching" :type emacsmirror :pkgname "cua-emul" :required ((("cl" cl)))) (:name cua-lite :description "A light-weight, extendable & toggle-able CUA emulator" :type emacsmirror :pkgname "cua-lite" :required nil) (:name cua-lite-bootstrap :description "Bootstrap for cua-lite" :type emacsmirror :pkgname "cua-lite-bootstrap" :required nil) (:name cucumber-i18n :description "Translate i18n keys inside cucumber features" :type emacsmirror :pkgname "cucumber-i18n" :required nil) (:name cups :description "Interface for setting \"default-printer\" from cups list" :type emacsmirror :pkgname "cups" :required nil) (:name cust-stub :description "Defcustom stub for emacs versions without custom.el" :type emacsmirror :pkgname "cust-stub" :required nil) (:name cvs-scramble :description "CVS password-scramble/descramble utilities" :type emacsmirror :pkgname "cvs-scramble" :required nil) (:name cycle-buffer :description "Select buffer by cycling through" :type emacsmirror :pkgname "cycle-buffer" :required ((("cl" cl)))) (:name cycle-log :description nil :type emacsmirror :pkgname "cycle-log" :required nil) (:name cygstart :description "Run Windows application associated with a file" :type emacsmirror :pkgname "cygstart" :required nil) (:name cygwin-mount :description "Teach EMACS about cygwin styles and mount points" :type emacsmirror :pkgname "cygwin-mount" :required ((("ange-ftp" ange-ftp)))) (:name czscm :description "Cheezy scheme interpreter for emacs" :type emacsmirror :pkgname "czscm" :required nil) (:name d-insert-assert :description "Automagical verbose assert insertion for D Programming Language" :type emacsmirror :pkgname "d-insert-assert" :required ((("cc-mode" cc-mode))) :depends (cc-mode)) (:name d-insert-import :description "Insert import statement for D language" :type emacsmirror :pkgname "d-insert-import" :required nil) (:name dabbrev-expand-multiple :description "Dabbrev-expand for multiple" :type emacsmirror :pkgname "dabbrev-expand-multiple" :required ((("dabbrev" dabbrev)))) (:name dabbrev-hover :description "Tooltip-show the next completion, as does openoffice" :type emacsmirror :pkgname "dabbrev-hover" :required ((("avoid" avoid) ("cl" cl) ("dabbrev" dabbrev)) (("emacs-core" tooltip)))) (:name dacode :description "Lecture de news dacode" :type emacsmirror :pkgname "dacode" :required (nil (("easymenu" easymenu)))) (:name dae :description "Digital Audio Extraction" :type emacsmirror :pkgname "dae" :required ((("cddb" cddb) ("cl" cl) ("musicbrainz" musicbrainz) ("scan" scan))) :depends (scan musicbrainz cddb)) (:name dar :description "Disk archiver (DAR) interface for emacs" :type emacsmirror :pkgname "dar" :required nil) (:name darcsum :description "A pcl-cvs like interface for managing darcs patches" :type emacsmirror :pkgname "darcsum" :required ((("add-log" add-log) ("cl" cl) ("diff" diff) ("gnus" gnus-art mm-decode)) ((nil vc-darcs))) :depends (gnus)) (:name darkroom-mode :description nil :type emacsmirror :pkgname "darkroom-mode" :required ((("cl" cl) (nil w32-fullscreen)))) (:name dart-mode :description "Major mode for editing Dart files" :type emacsmirror :pkgname "dart-mode" :required ((("cc-mode" cc-langs cc-mode) ("cl" cl))) :depends (cc-mode)) (:name datr :description "Major mode for editing DATR files" :type emacsmirror :pkgname "datr" :required nil) (:name db-sql :description "Connect to SQL server using tramp syntax" :type emacsmirror :pkgname "db-sql" :required ((("cl" cl) ("sql" sql) ("tramp" tramp))) :depends (tramp)) (:name dbfrobs :description "Useful enhancements for debugging" :type emacsmirror :pkgname "dbfrobs" :required ((("advice" advice)))) (:name dbk :description "Convert docbook to muse" :type emacsmirror :pkgname "dbk" :required ((("xml" xml)))) (:name ddl-mode :description "Handles the Tandem-Compaq-HP DDL language" :type emacsmirror :pkgname "ddl-mode" :required ((("column-marker" column-marker) ("imenu" imenu) ("which-func" which-func))) :depends (python-mode)) (:name dedent :description "Add and remove indentation during copy and paste" :type emacsmirror :pkgname "dedent" :required ((("cl" cl)))) (:name deep-copy :description nil :type emacsmirror :pkgname "deep-copy" :required nil) (:name defaultbanner :description nil :type emacsmirror :pkgname "defaultbanner" :required nil) (:name defaultcontent :description nil :type emacsmirror :pkgname "defaultcontent" :required nil) (:name deferred :description "Simple asynchronous functions for emacs lisp" :type emacsmirror :pkgname "deferred" :required ((("cl" cl) ("emacs-core" pp)))) (:name defshell :description "Define inferior shells" :type emacsmirror :pkgname "defshell" :required ((("comint" comint) ("custom" custom) ("shell" shell)))) (:name deft :description "Quickly browse, filter, and edit plain text notes" :type emacsmirror :pkgname "deft" :required ((("widget" widget)))) (:name delatex :description "Expand and remove LaTeXery from a file" :type emacsmirror :pkgname "delatex" :required nil) (:name deldo :description "Time-stamp: <2009-11-05 17:00:17 qdot>" :type emacsmirror :pkgname "deldo" :required nil) (:name delete-duplicates :description nil :type emacsmirror :pkgname "delete-duplicates" :required nil) (:name delicious :description "Functions to make productive use of the http://del.icio.us API" :type emacsmirror :pkgname "delicious" :required ((("37emacs" rest-api) ("planner" planner) ("thingatpt" thingatpt) ("url" url) ("xml" xml))) :depends (planner 37emacs)) (:name delim-kill :description "Kill text between delimiters" :type emacsmirror :pkgname "delim-kill" :required nil) (:name desire :description "Versatile configuration for emacs lisp packages" :type emacsmirror :pkgname "desire" :required nil) (:name desktop-entry :description "Parse .desktop files for MIME information" :type emacsmirror :pkgname "desktop-entry" :required nil) (:name desktop-recover :description nil :type emacsmirror :pkgname "desktop-recover" :required ((("cl" cl) ("desktop" desktop) ("thingatpt" thingatpt) (nil desktop-recover-autosave)))) (:name desktop2wmaker :description "Make a WindowMaker menu out of Redhat .desktop files" :type emacsmirror :pkgname "desktop2wmaker" :required ((("cl" cl)))) (:name devel-notes :description nil :type emacsmirror :pkgname "devel-notes" :required nil) (:name develock :description "Additional font-lock keywords for the developers" :type emacsmirror :pkgname "develock" :required ((("advice" advice) ("cc-mode" cc-engine) ("emacs-core" font-lock))) :depends (cc-mode)) (:name devkitemacs :description "Helper functions for working with the devkitpro package (NDS and PSP development)" :type emacsmirror :pkgname "devkitemacs" :required nil) (:name df :description "Hack to display in the mode line space left on devices" :type emacsmirror :pkgname "df" :required nil) (:name di :description "Simple directory editor for GNU Emacs" :type emacsmirror :pkgname "di" :required nil) (:name diacriticalize :description "Constructive diacriticism" :type emacsmirror :pkgname "diacriticalize" :required nil) (:name dialog-box :description nil :type emacsmirror :pkgname "dialog-box" :required nil) (:name diameter-avp :description nil :type emacsmirror :pkgname "diameter-avp" :required ((("gnus" hex-util))) :depends (gnus)) (:name diamondsms :description "Send SMS' via GNU/Emacs" :type emacsmirror :pkgname "diamondsms" :required ((("url" url) ("xml" xml)))) (:name diary-mode :description nil :type emacsmirror :pkgname "diary-mode" :required ((("calendar" calendar)))) (:name diary-outlook :description "Snarf MS Outlook appointments into Emacs diary" :type emacsmirror :pkgname "diary-outlook" :required nil) (:name diary-pilot :description "Export Emacs diary to Palm Pilot" :type emacsmirror :pkgname "diary-pilot" :required nil) (:name diary-todo :description "Display `to-do' list in diary" :type emacsmirror :pkgname "diary-todo" :required ((("todo-mode" todo-mode)))) (:name dictem :description nil :type emacsmirror :pkgname "dictem" :required ((("cl" cl)))) (:name dictionary :description "An interface to RFC 2229 dictionary server" :type emacsmirror :pkgname "dictionary" :required ((("cl" cl) ("custom" custom) ("easymenu" easymenu) ("emacs-core" tooltip)))) (:name diff-git :description "Git integration with diff-mode" :type emacsmirror :pkgname "diff-git" :required nil) (:name diffstat :description "A mode for showing the summary of diff" :type emacsmirror :pkgname "diffstat" :required nil) (:name dig-browser :description "A dired-style DNS zone browser" :type emacsmirror :pkgname "dig-browser" :required nil) (:name diminish :description "Diminished modes are minor modes with no modeline display" :type emacsmirror :pkgname "diminish" :required ((("cl" cl)))) (:name dir-locals :description "Local variables for a directory tree" :type emacsmirror :pkgname "dir-locals" :required nil) (:name dir-shell :description "Shifts shell buffers working directory" :type emacsmirror :pkgname "dir-shell" :required ((("shell" shell)))) (:name dired-dd :description "Drag and Drop interface to dired/dired-x package" :type emacsmirror :pkgname "dired-dd" :required ((("browse-url" browse-url) ("cl" cl) ("dired" dired) ("dired-aux" dired-aux) ("dired-x" dired-x) ("mpg123" mpg123) (nil timidity))) :depends (mpg123)) (:name dired-efap :description "Edit Filename At Point in a dired buffer" :type emacsmirror :pkgname "dired-efap" :required ((("dired" dired) ("emacs-core" font-lock)))) (:name dired-filetype-face :description "Set different faces for different filetype in dired buffer" :type emacsmirror :pkgname "dired-filetype-face" :required ((("custom" custom) ("dired" dired)))) (:name dired-lis :description "Letter isearch in dired-mode" :type emacsmirror :pkgname "dired-lis" :required ((("dired-isearch" dired-isearch)))) (:name dired-sequence :description "Handle files that are named in a sequential manner in dired" :type emacsmirror :pkgname "dired-sequence" :required nil) (:name dired-single :description "Reuse the current dired buffer to visit another directory" :type emacsmirror :pkgname "dired-single" :required nil) (:name dired-sort-menu :description "Provide menu/dialogue for dired sort options" :type emacsmirror :pkgname "dired-sort-menu" :required ((("ange-ftp" ange-ftp) ("dired" dired) ("easymenu" easymenu) ("widget" wid-edit)))) (:name dired-sync :description "Sync directories within dired" :type emacsmirror :pkgname "dired-sync" :required nil) (:name diredful :description "Colorful file names in dired buffers" :type emacsmirror :pkgname "diredful" :required ((("custom" cus-edit) ("dired" dired) ("dired-x" dired-x) ("widget" widget)))) (:name dirnav :description "Navigate folders and files with TAB" :type emacsmirror :pkgname "dirnav" :required ((("windmove" windmove)))) (:name dirtree :description "Functions for building directory-tree lists" :type emacsmirror :pkgname "dirtree" :required nil) (:name discord :description nil :type emacsmirror :pkgname "discord" :required nil) (:name disk :description "Disk mounter module for STUN" :type emacsmirror :pkgname "disk" :required ((("cl" cl) ("rx" rx)))) (:name dismal :description nil :type emacsmirror :pkgname "dismal" :required ((("cl" cl) ("info" info)))) (:name display-buffer-for-wide-screen :description "Set `display-buffer-function' for wide-screen display" :type emacsmirror :pkgname "display-buffer-for-wide-screen" :required ((("cl" cl)))) (:name display-hatebu :description "\343\201\257\343\201\246\343\201\252\343\203\226\343\203\203\343\202\257\343\203\236\343\203\274\343\202\257\343\201\247\343\203\226\343\203\203\343\202\257\343\203\236\343\203\274\343\202\257\343\201\225\343\202\214\343\201\237\346\225\260\343\202\222\343\203\242\343\203\274\343\203\211\343\203\251\343\202\244\343\203\263\343\201\253\350\241\250\347\244\272\343\201\231\343\202\213" :type emacsmirror :pkgname "display-hatebu" :required ((("cl" cl)))) (:name disptime :description "Display time, load average, etc. in mode line" :type emacsmirror :pkgname "disptime" :required ((("itimer" itimer) ("timer" timer))) :depends (itimer)) (:name distel :description "Top-level of distel package, loads all subparts" :type emacsmirror :pkgname "distel" :required ((("cl" cl) ("easy-mmode" easy-mmode) ("emacs-core" font-lock md5 overlay) ("erlang" erlang) ("ewoc" ewoc)) (("w3m" w3m))) :depends (erlang)) (:name ditz :description "Emacs interface to Ditz issue tracking system " :type emacsmirror :pkgname "ditz" :required nil) (:name ditz-mode :description "Emacs interface to Ditz issue tracking system" :type emacsmirror :pkgname "ditz-mode" :required nil) (:name dizzee :description "Utilities for managing subprocesses in Emacs" :type emacsmirror :pkgname "dizzee" :required ((("assoc" assoc) ("cl" cl)))) (:name django-mode :description "Major mode for Django web framework" :type emacsmirror :pkgname "django-mode" :required ((("nxml-mode" nxml-mode) ("python" python) ("python-mode" python-mode))) :depends (python-mode)) (:name dna-debug :description nil :type emacsmirror :pkgname "dna-debug" :required ((("json" json)))) (:name dna-mode :description "A major mode for editing dna sequences" :type emacsmirror :pkgname "dna-mode" :required nil) (:name do-not-edit :description "Read-only buffer for generated files" :type emacsmirror :pkgname "do-not-edit" :required nil) (:name doc-mode :description "Convenient editing of in-code documentation" :type emacsmirror :pkgname "doc-mode" :required ((("cc-mode" cc-mode) ("cedet" semantic) ("cl" cl) ("newcomment" newcomment))) :depends (cedet cc-mode)) (:name docbook-xml-mode :description nil :type emacsmirror :pkgname "docbook-xml-mode" :required nil) (:name docbookide :description "DocBook Integrated Development Environment" :type emacsmirror :pkgname "docbookide" :required ((("cl" cl) ("compile" compile) ("emacs-core" font-lock) ("etags" etags)))) (:name docmap :description "Display document map window" :type emacsmirror :pkgname "docmap" :required ((("outline" outline)))) (:name doh :description nil :type emacsmirror :pkgname "doh" :required ((("advice" advice)))) (:name doit-mode :description "A major mode for organizing tasks" :type emacsmirror :pkgname "doit-mode" :required nil) (:name dope :description "DOtemacs ProfilEr.. A per-sexp-evaltime profiler" :type emacsmirror :pkgname "dope" :required ((("cl" cl) ("custom" custom) ("emacs-core" pp) ("thingatpt" thingatpt) ("widget" wid-edit widget)))) (:name dos-indent :description "Adds indentation to Dos-mode" :type emacsmirror :pkgname "dos-indent" :required nil) (:name dot-emacs-helper :description "Some helper functions for .emacs" :type emacsmirror :pkgname "dot-emacs-helper" :required ((("button" button) ("cl" cl)))) (:name dot-mode :description "Minor mode to repeat typing or commands" :type emacsmirror :pkgname "dot-mode" :required nil) (:name double-type :description "Keyboard operation method corresponding to double click on a mouse" :type emacsmirror :pkgname "double-type" :required ((("cl" cl)))) (:name doxymacs :description nil :type emacsmirror :pkgname "doxymacs" :required ((("custom" custom) ("tempo" tempo) ("url" url) ("xml-parse" xml-parse)))) (:name dpaste :description "Emacs integration for dpaste.com" :type emacsmirror :pkgname "dpaste" :required nil) (:name dpastede :description "Emacs integration for dpaste.de" :type emacsmirror :pkgname "dpastede" :required nil) (:name dracula-mode :description "Major mode providing a DRACULA rules mode hook for fontification" :type emacsmirror :pkgname "dracula-mode" :required ((("emacs-core" font-lock generic)))) (:name dragbox :description "Draw a bounding box interactively" :type emacsmirror :pkgname "dragbox" :required ((("image-mode" image-mode) ("xml" xml)))) (:name drela-mode :description "Mode for editing files used in Drela's aerodynamic codes" :type emacsmirror :pkgname "drela-mode" :required nil) (:name dtrt-indent :description "Adapt to foreign indentation offsets" :type emacsmirror :pkgname "dtrt-indent" :required nil) (:name dubious-paragraphs :description nil :type emacsmirror :pkgname "dubious-paragraphs" :required nil) (:name duplicate-line :description "Easily dublicate a line" :type emacsmirror :pkgname "duplicate-line" :required nil) (:name durendal :description "A bucket of tricks for Clojure and Slime" :type emacsmirror :pkgname "durendal" :required ((("clojure-mode" clojure-mode) ("paredit" paredit) ("slime" slime slime-repl))) :depends (slime paredit clojure-mode)) (:name dvc :description "Core functions for distributed version control" :type emacsmirror :pkgname "dvc" :required ((("add-log" add-log) ("cl" cl) ("custom" cus-edit) ("diff" diff) ("diff-mode" diff-mode) ("dired" dired) ("dired-x" dired-x) ("easymenu" easymenu) ("ediff" ediff) ("elp" elp) ("elunit" elunit) ("emacs-core" derived font-lock overlay pp) ("ewoc" ewoc) ("ffap" ffap) ("gnus" gnus gnus-art gnus-sum message mml parse-time time-date) ("highline" highline) ("hl-line" hl-line) ("rect" rect) ("reporter" reporter) ("sendmail" sendmail) ("smerge-mode" smerge-mode) ("term" term) ("tree-widget" tree-widget) ("uniquify" uniquify) ("vc" vc) ("widget" wid-edit) (nil dvc-autoloads dvc-version))) :depends (gnus)) (:name dvi-view :description "View a DVI file in an Emacs buffer" :type emacsmirror :pkgname "dvi-view" :required nil) (:name dwim-find :description "Find something about the thing at point" :type emacsmirror :pkgname "dwim-find" :required nil) (:name dylan-mode :description "Major mode for editing Dylan programs" :type emacsmirror :pkgname "dylan-mode" :required ((("emacs-core" font-lock) ("tree-widget" tree-widget)))) (:name e-blog :description "A GNU Emacs interface to Blogger" :type emacsmirror :pkgname "e-blog" :required nil) (:name e-max :description nil :type emacsmirror :pkgname "e-max" :required nil) (:name e-sink :description "Pipe output of any command to Emacs buffer" :type emacsmirror :pkgname "e-sink" :required ((("cl" cl)))) (:name e2wm :description "Simple window manager for emacs" :type emacsmirror :pkgname "e2wm" :required ((("cl" cl) ("easymenu" easymenu) ("imenu" imenu) ("magit" magit) ("windmove" windmove) ("window-layout" window-layout) (nil dsvn))) :depends (window-layout magit)) (:name e2wm-bookmark :description "Bookmark plugin for e2wm.el" :type emacsmirror :pkgname "e2wm-bookmark" :required ((("bookmark" bookmark) ("e2wm" e2wm))) :depends (e2wm)) (:name easy-imenu-index-generator :description "Easy implement imenu-create-index-function" :type emacsmirror :pkgname "easy-imenu-index-generator" :required nil) (:name ebackup :description nil :type emacsmirror :pkgname "ebackup" :required nil) (:name ebay-template-mode :description nil :type emacsmirror :pkgname "ebay-template-mode" :required ((("cl" cl) ("html-lite" html-lite) ("xmlgen" xmlgen) (nil ebay-template-html-utils smith-poster-utils xml-gen))) :depends (xmlgen html-lite)) (:name ebib :description nil :type emacsmirror :pkgname "ebib" :required ((("bibtex" bibtex) ("cl" cl) ("easymenu" easymenu)))) (:name ebm :description nil :type emacsmirror :pkgname "ebm" :required ((("cl" cl) ("gnus" parse-time) ("url" url))) :depends (gnus)) (:name ebnf-mode :description "Highlight mode for Extended Backus-Naur Form" :type emacsmirror :pkgname "ebnf-mode" :required nil) (:name ebs :description "Easy buffer switch (ebs)" :type emacsmirror :pkgname "ebs" :required nil) (:name ebv :description "Emacs ebook viewer" :type emacsmirror :pkgname "ebv" :required ((("cl" cl) ("gnus" parse-time) ("url" url url-http) ("w3m" w3m) ("xml" xml))) :depends (w3m gnus)) (:name ec :description nil :type emacsmirror :pkgname "ec" :required nil) (:name ecasound-ewf :description "Ecasound .ewf major mode" :type emacsmirror :pkgname "ecasound-ewf" :required ((("ecasound" ecasound)))) (:name ecaspace :description "Music creation tool built on Ecasound" :type emacsmirror :pkgname "ecaspace" :required ((("cell" cell) ("ecasound" ecasound) ("emms" jack))) :depends (emms cell)) (:name ecb :description "A code browser for Emacs" :type emacsmirror :pkgname "ecb" :required ((("assoc" assoc) ("browse-url" browse-url) ("cedet" eieio semantic semantic-analyze semantic-ctxt) ("cl" cl) ("compile" compile) ("custom" cus-edit) ("easymenu" easymenu) ("emacs-core" autoload) ("escreen" escreen) ("hideshow" hideshow) ("imenu" imenu) ("jdee" efc) ("reporter" reporter) ("ring" ring) ("thingatpt" thingatpt) ("vc" vc vc-bzr vc-cvs vc-git vc-hg vc-mtn vc-rcs vc-sccs vc-svn) ("widget" wid-edit) ("winring" winring) (nil thing))) :depends (winring jdee escreen cedet)) (:name echo-pick :description "Filter for echo area status messages" :type emacsmirror :pkgname "echo-pick" :required ((("cl" cl) ("eldoc" eldoc)))) (:name echoline-mode :description nil :type emacsmirror :pkgname "echoline-mode" :required nil) (:name ecmascript-mode :description "Major mode for editing ECMAScript code" :type emacsmirror :pkgname "ecmascript-mode" :required ((("cc-mode" cc-mode) ("emacs-core" font-lock) ("regexp-opt" regexp-opt))) :depends (cc-mode)) (:name ectags-select :description "Select from multiple tags" :type emacsmirror :pkgname "ectags-select" :required ((("cl" cl) ("custom" custom) ("easymenu" easymenu)))) (:name ecukes :description "Create an Ecukes file structure skeleton" :type emacsmirror :pkgname "ecukes" :required nil) (:name ediprolog :description "Emacs Does Interactive Prolog" :type emacsmirror :pkgname "ediprolog" :required nil) (:name edit-server :description nil :type emacsmirror :pkgname "edit-server" :required nil) (:name edit-tree :description "Apply editing commands to all files in a tree" :type emacsmirror :pkgname "edit-tree" :required nil) (:name edje-mode :description "Major mode for editing Edje files" :type emacsmirror :pkgname "edje-mode" :required nil) (:name eev :description "Add support for e-scripts in Emacs" :type emacsmirror :pkgname "eev" :required ((("add-log" add-log) ("dired" dired) ("emacs-core" jit-lock) ("htmlize" htmlize) ("outline" outline) ("ps-mode" ps-mode)))) (:name efine :description nil :type emacsmirror :pkgname "efine" :required nil) (:name eform :description nil :type emacsmirror :pkgname "eform" :required nil) (:name efs :description nil :type emacsmirror :pkgname "efs" :required ((("advice" advice) ("comint" comint) ("custom" custom) ("dired" dired) ("emacs-core" backquote) ("view" view)))) (:name egg :description "Emacs Got Git" :type emacsmirror :pkgname "egg" :required ((("cl" cl) ("ediff" ediff) ("electric" electric) ("emacs-core" derived) ("ffap" ffap) ("ring" ring)))) (:name egit :description "Emacs git commit history interface ala gitk and qgit" :type emacsmirror :pkgname "egit" :required ((("cl" cl) ("ewoc" ewoc) (nil git)))) (:name egocentric :description "Highlight your name inside emacs buffers" :type emacsmirror :pkgname "egocentric" :required nil) (:name eiffel :description "Major mode for editing Eiffel files" :type emacsmirror :pkgname "eiffel" :required ((("compile" compile) ("easymenu" easymenu) ("emacs-core" font-lock) ("imenu" imenu)))) (:name eight-puzzle :description "A simple little puzzle game" :type emacsmirror :pkgname "eight-puzzle" :required ((("cl" cl)))) (:name eijiro :description "\350\213\261\350\276\236\351\203\216\343\202\222anything.el\343\202\222\344\275\277\343\201\243\343\201\246\346\244\234\347\264\242\343\201\231\343\202\213" :type emacsmirror :pkgname "eijiro" :required ((("anything" anything anything-match-plugin) ("cl" cl) ("thingatpt" thingatpt))) :depends (anything)) (:name eim :description "Emacs input method" :type emacsmirror :pkgname "eim" :required ((("cl" cl)))) (:name eimp :description "Emacs Image Manipulation Package" :type emacsmirror :pkgname "eimp" :required ((("image-mode" image-mode) ("trace" trace)))) (:name eiv :description "Emacs image viewer" :type emacsmirror :pkgname "eiv" :required ((("cl" cl) ("traverselisp" iterator traverselisp))) :depends (traverselisp)) (:name ejab :description "Jabber client for Emacs" :type emacsmirror :pkgname "ejab" :required ((("cl" cl) ("gnus" sha1))) :depends (gnus)) (:name ejacs :description "Shell interface to javascript interpreter" :type emacsmirror :pkgname "ejacs" :required ((("cl" cl) ("gnus" parse-time) ("help" help-fns))) :depends (gnus)) (:name el-expectations :description "Minimalist unit testing framework" :type emacsmirror :pkgname "el-expectations" :required ((("cl" cl)) (("el-mock" el-mock)))) (:name el-fast-filelist :description "Fast file access for given folder" :type emacsmirror :pkgname "el-fast-filelist" :required (nil (("el-index" el-index/el-index) (nil el-kit/directory el-kit/file el-kit/key el-kit/list)))) (:name el-get :description "Manage the external elisp bits and pieces you depend upon" :type emacsmirror :pkgname "el-get" :required ((("cl" cl) ("dired" dired) ("emacs-core" autoload bytecomp simple) ("help-mode" help-mode) ("info" info) ("notify" notify)) ((nil notifications package)))) (:name el-index :description "Generic index mode for Emacs" :type emacsmirror :pkgname "el-index" :required nil) (:name el-markup :description "Emacs Lisp to Markup" :type emacsmirror :pkgname "el-markup" :required nil) (:name el-mock :description "Tiny Mock and Stub framework in Emacs Lisp" :type emacsmirror :pkgname "el-mock" :required ((("advice" advice) ("cl" cl)))) (:name el-swank-fuzzy :description "Fuzzy symbol completion" :type emacsmirror :pkgname "el-swank-fuzzy" :required ((("cl" cl)))) (:name el-test-more :description "Simple unit test framework for emacs lisp" :type emacsmirror :pkgname "el-test-more" :required ((("cl" cl)))) (:name el4r :description nil :type emacsmirror :pkgname "el4r" :required nil) (:name eldav :description "Yet Another WebDAV interface for Emacsen" :type emacsmirror :pkgname "eldav" :required ((("apel" poe poem) ("cl" cl) ("timezone" timezone))) :depends (apel)) (:name electric-space :description "Electric handling of inserting spaces -- particularly for use with voice input" :type emacsmirror :pkgname "electric-space" :required ((("cl" cl) (nil speak-parens)))) (:name elein :description "Running leiningen commands from emacs" :type emacsmirror :pkgname "elein" :required ((("cl" cl)))) (:name elgyach :description "Emacs interface to gyach" :type emacsmirror :pkgname "elgyach" :required ((("cl" cl) ("comint" comint) ("gnus" time-date) ("hippie-exp" hippie-exp) ("mpg123" mpg123))) :depends (mpg123 gnus)) (:name elhome :description "A framework for a \"home\" Emacs configuration" :type emacsmirror :pkgname "elhome" :required nil) (:name elib :description nil :type emacsmirror :pkgname "elib" :required nil) (:name elim :description nil :type emacsmirror :pkgname "elim" :required ((("assoc" assoc) ("browse-url" browse-url) ("dbus" dbus) ("tree-widget" tree-widget) ("xml" xml)) (("lui" lui)))) (:name elinstall :description nil :type emacsmirror :pkgname "elinstall" :required ((("custom" cus-edit) ("emacs-core" autoload pp)) (("emacs-core" byte-compile)))) (:name elip :description nil :type emacsmirror :pkgname "elip" :required ((("calendar" calendar) ("cl" cl) ("edb" database edb-t-timedate1)))) (:name elite :description nil :type emacsmirror :pkgname "elite" :required ((("cl" cl)))) (:name elk-test :description "Emacs Lisp testing framework" :type emacsmirror :pkgname "elk-test" :required ((("button" button) ("cl" cl) ("compile" compile) ("eldoc" eldoc) ("newcomment" newcomment)) (("fringe-helper" fringe-helper)))) (:name elm :description "Maintain the Emacsmirror" :type emacsmirror :pkgname "elm" :required ((("arc-mode" arc-mode) ("cl" cl) ("epkg" epkg) ("gh" gh-repos) ("magit" magit) ("map-progress" map-progress) ("save-sexp" save-sexp) ("vcomp" vcomp) ("xpkg" xpkg) (nil elm-next epkg-next minmacs))) :depends (save-sexp magit gh epkg)) (:name elnode :description "A simple emacs async HTTP server" :type emacsmirror :pkgname "elnode" :required ((("cl" cl) ("gnus" mailcap mm-encode) ("url" url-util) (nil ert))) :depends (rvm gnus)) (:name elpoint :description "Elpoint -- Yet Another Presentation Tool for Emacsen" :type emacsmirror :pkgname "elpoint" :required ((("apel" product) ("cl" cl) ("emacs-core" derived) ("outline" outline) ("w3m" w3m))) :depends (w3m apel)) (:name elpp :description nil :type emacsmirror :pkgname "elpp" :required nil) (:name elscreen :description nil :type emacsmirror :pkgname "elscreen" :required ((("apel" static) ("dired" dired) (nil alist))) :depends (apel)) (:name elscreen-edit-server :description "Work together chrome and elscreen" :type emacsmirror :pkgname "elscreen-edit-server" :required nil) (:name elscreen-mew :description nil :type emacsmirror :pkgname "elscreen-mew" :required ((("elscreen" elscreen))) :depends (elscreen)) (:name elserv :description "Yet another HTTP server on Emacsen" :type emacsmirror :pkgname "elserv" :required ((("apel" mcharset pces poem product static) ("calendar" calendar) ("cl" cl) ("custom" cus-edit custom) ("emacs-wiki-mode" emacs-wiki) ("flim" std11) ("mhc" mhc mhc-face) ("semi" mime-view) ("w3m" w3m) ("xml-rpc" xml-rpc))) :depends (xml-rpc w3m semi mhc flim emacs-wiki-mode apel)) (:name elwikidoc :description "Use elisp doc strings to make other documentation" :type emacsmirror :pkgname "elwikidoc" :required nil) (:name elx :description "Extract information from Emacs Lisp libraries" :type emacsmirror :pkgname "elx" :required ((("cl" cl) ("dconv" dconv) ("lisp-mnt" lisp-mnt) ("vcomp" vcomp)))) (:name em-joc :description nil :type emacsmirror :pkgname "em-joc" :required nil) (:name emacro :description nil :type emacsmirror :pkgname "emacro" :required ((("advice" advice) ("any-ini-mode" any-ini-mode) ("appt" appt) ("browse-url" browse-url) ("cc-mode" cc-cmds cc-mode) ("cedet" cedet semantic-ia semantic-load) ("cl" cl) ("color-theme" color-theme) ("cua" cua-base) ("custom" cus-edit) ("dabbrev-hover" dabbrev-hover) ("delsel" delsel) ("dired" dired) ("ebackup" ebackup) ("efs" efs-auto) ("emacs-core" bytecomp env font-lock jka-compr mouse-sel mule overlay pp server) ("emacs-obsolete" iso-insert) ("emhacks" tabbar) ("ffap" ffap) ("filladapt" filladapt) ("flyspell" flyspell) ("gnus" gnus-sum gnus-topic) ("gnuserv" gnuserv) ("gud" gud) ("help-macro" help-macro) ("helpex" helpex) ("hippie-exp" hippie-exp) ("htmlize" htmlize) ("icomplete" icomplete) ("imenu" imenu) ("ireplace" ireplace) ("iso-sgml" iso-sgml) ("lpr" lpr) ("mic-paren" mic-paren) ("mmm-mode" mmm-rpm mmm-sample) ("msb" msb) ("paren" paren) ("pc-select" pc-select) ("perldoc" perldoc) ("ps-print" ps-print) ("psgml" psgml) ("recent-files" recent-files) ("recentf" recentf) ("rect" rect) ("rect-mark" rect-mark) ("redo" redo) ("scroll-all" scroll-all) ("tempo" tempo) ("time" time) ("time-stamp" time-stamp) ("tiny-tools" tiny-setup tinyload tinyperl) ("tramp" tramp) ("url" url) ("vc" vc) ("viper" viper) ("w3" w3) ("w3m" w3m) ("which" which) (nil big-menubar cua cua-mode enotes func-menu mac pcl-cvs-defs rsz-minibuf scrat tex-site w3-auto))) :depends (w3m w3 tramp tiny-tools redo recent-files psgml perldoc mmm-mode iso-sgml gnus filladapt emhacks efs ebackup dabbrev-hover zenburn-theme cedet cc-mode)) (:name emacs-android :description "Android Development with GNU/Emacs" :type emacsmirror :pkgname "emacs-android" :required nil) (:name emacs-easy-budget :description "Some date utilities used in easy-emacs-budget" :type emacsmirror :pkgname "emacs-easy-budget" :required ((("timezone" timezone)))) (:name emacs-eclim :description "An interface to the Eclipse IDE" :type emacsmirror :pkgname "emacs-eclim" :required ((("cl" cl) ("company" company) ("compile" compile) ("json" json))) :depends (company)) (:name emacs-ide :description "Emacs-IDE" :type emacsmirror :pkgname "emacs-ide" :required ((("desktop" desktop) ("dired" dired) ("ediff" ediff) ("emacs-core" font-lock mwheel) ("etags" etags) ("gdb-ui" gdb-ui) ("hideshow" hideshow) ("imenu" imenu) ("xcscope" xcscope))) :depends (xcscope)) (:name emacs-imap :description nil :type emacsmirror :pkgname "emacs-imap" :required ((("gnus" imap message qp) ("timezone" timezone))) :depends (gnus)) (:name emacs-init-check :description "Automatic init file checker" :type emacsmirror :pkgname "emacs-init-check" :required ((("cl" cl)))) (:name emacs-lock+ :description "Extensions to standard library `emacs-lock.el'" :type emacsmirror :pkgname "emacs-lock+" :required ((("emacs-lock" emacs-lock)))) (:name emacs-name :description "Emacs acronym expansions" :type emacsmirror :pkgname "emacs-name" :required nil) (:name emacs-pilot :description "Package for synchronization of various Emacs subsystems with Palm Pilot" :type emacsmirror :pkgname "emacs-pilot" :required ((("bbdb" bbdb bbdb-com) ("calendar" calendar diary-lib) ("cl" cl) ("easymenu" easymenu))) :depends (bbdb)) (:name emacs-rails :description "Minor mode for editing RubyOnRails code" :type emacsmirror :pkgname "emacs-rails" :required ((("align" align) ("ansi-color" ansi-color) ("cedet" speedbar) ("etags" etags) ("flyspell" flyspell) ("hideshow" hideshow) ("nxhtml" find-recursive) ("rinari" inf-ruby) ("ruby-electric" ruby-electric) ("ruby-mode" ruby-mode) ("snippet" snippet) ("sql" sql) (nil inflections)) (("completion-ui" completion-ui) ("flymake" flymake) ("predictive" predictive))) :depends (ruby-electric rinari nxhtml cedet)) (:name emacs-ringing :description "Part of John's elisp change-ringing system" :type emacsmirror :pkgname "emacs-ringing" :required ((("cl" cl) ("custom" custom) ("easymenu" easymenu) ("emacs-core" backquote) ("reporter" reporter)))) (:name emacs-size-watch :description nil :type emacsmirror :pkgname "emacs-size-watch" :required nil) (:name emacs-variants :description "Identify emacs versions, variants, and platforms" :type emacsmirror :pkgname "emacs-variants" :required nil) (:name emacs-vers :description nil :type emacsmirror :pkgname "emacs-vers" :required nil) (:name emacs-wiki-boxes :description "Boxing system for emacs-wiki.el" :type emacsmirror :pkgname "emacs-wiki-boxes" :required nil) (:name emacs-wiki-mode :description "Maintain a local Wiki using Emacs-friendly markup" :type emacsmirror :pkgname "emacs-wiki-mode" :required ((("cgi" cgi) ("cl" cl) ("compile" compile) ("dired" dired) ("emacs-core" derived font-lock pp) ("gnus" pgg pgg-gpg) ("htmlize" htmlize) ("httpd" httpd) ("info" info) ("table" table) ("vc" vc vc-hooks) ("xml-parse" xml-parse))) :depends (gnus)) (:name emacs-xcode :description "An interface to the XCode IDE" :type emacsmirror :pkgname "emacs-xcode" :required nil) (:name emacspeak :description "Emacspeak -- The Complete Audio Desktop" :type emacsmirror :pkgname "emacspeak" :required ((("advice" advice) ("ansi-color" ansi-color) ("arc-mode" arc-mode) ("browse-url" browse-url) ("bs" bs) ("calendar" calendar) ("cc-mode" cc-bytecomp cc-langs cc-mode) ("cl" cl) ("comint" comint) ("custom" cus-edit custom) ("dbus" dbus) ("descr-text" descr-text) ("desktop" desktop) ("dired" dired) ("dired-aux" dired-aux) ("dired-x" dired-x) ("easymenu" easymenu) ("eldoc" eldoc) ("elib" stack-f) ("emacs-core" autoload backquote derived) ("eshell" esh-arg) ("find-dired" find-dired) ("find-lisp" find-lisp) ("finder" finder) ("foldout" foldout) ("forms" forms) ("gnus" gnus gnus-art gnus-sum mm-decode mm-view) ("html-helper-mode" html-helper-mode) ("imenu" imenu) ("info" info) ("json" json) ("lisp-mnt" lisp-mnt) ("man" man) ("org-mode" org org-exp) ("outline" outline) ("pianobar" pianobar) ("psvn" psvn) ("regexp-opt" regexp-opt) ("reporter" reporter) ("ring" ring) ("rmail" rmailsort) ("shell" shell) ("table" table) ("tar-mode" tar-mode) ("term" term) ("tetris" tetris) ("texinfo" texinfo) ("thingatpt" thingatpt) ("timer" timer) ("url" url url-parse) ("vm" tapestry) ("w3" w3 w3-imenu w3-speak) ("w3m" w3m w3m-form w3m-util) ("which-func" which-func) ("widget" wid-edit widget) ("woman" woman) ("xml" xml) ("xml-parse" xml-parse) ("yatex" yahtml yatexlib) (nil bmk-mgr dtk-voices emacspeak-personality emacspeak-speak)) (("cedet" speedbar))) :depends (yatex w3m w3 vm psvn pianobar org-mode html-helper-mode gnus eshell elib cc-mode)) (:name emacsserver :description nil :type emacsmirror :pkgname "emacsserver" :required nil) (:name emacsvfaq :description nil :type emacsmirror :pkgname "emacsvfaq" :required nil) (:name emathica :description nil :type emacsmirror :pkgname "emathica" :required nil) (:name emdroid :description "Android Wrappers for Emacs" :type emacsmirror :pkgname "emdroid" :required nil) (:name emeteo :description "An Emacs Interface To Meteorological Data" :type emacsmirror :pkgname "emeteo" :required ((("cl" cl) ("timer" timer)))) (:name emh :description "MIME extender for mh-e" :type emacsmirror :pkgname "emh" :required ((("apel" emu) ("mh-e" mh-comp mh-e) ("semi" mime-bbdb mime-edit mime-view semi-setup))) :depends (semi apel)) (:name emhacks :description "Quick switch between Emacs buffers" :type emacsmirror :pkgname "emhacks" :required ((("cl" cl) ("compile" compile) ("easymenu" easymenu) ("emacs-core" mwheel) ("igrep" igrep) ("jdee" jde) ("tempo" tempo) ("timer" timer) ("tree-widget" tree-widget) ("vc" vc) ("widget" wid-edit))) :depends (jdee)) (:name emmental :description "Take snapshots with Emacs" :type emacsmirror :pkgname "emmental" :required nil) (:name emms :description "The Emacs Multimedia System" :type emacsmirror :pkgname "emms" :required ((("cl" cl) ("dired" dired) ("emacs-core" md5 overlay sort) ("gnus" format-spec parse-time time-date) ("hl-line" hl-line) ("later-do" later-do) ("locate" locate) ("tq" tq) ("url" url) ("w3m" w3m) ("xml" xml))) :depends (w3m later-do gnus)) (:name emms-get-lyrics :description "Get the lyrics of the song emms is currently playing" :type emacsmirror :pkgname "emms-get-lyrics" :required nil) (:name emms-player-streaming-fix :description "Mplayer url fix" :type emacsmirror :pkgname "emms-player-streaming-fix" :required nil) (:name emms-seek-minor-mode :description "Like emacs-volume-minor-mode except +/- seek" :type emacsmirror :pkgname "emms-seek-minor-mode" :required nil) (:name emoji :description nil :type emacsmirror :pkgname "emoji" :required ((("anything" anything) ("cl" cl))) :depends (anything)) (:name emoji-display :description nil :type emacsmirror :pkgname "emoji-display" :required nil) (:name emotion :description "Quick way to jump to specific characters" :type emacsmirror :pkgname "emotion" :required ((("cl" cl)))) (:name emsane :description "Emacs SANE frontend" :type emacsmirror :pkgname "emsane" :required ((("cedet" eieio))) :depends (cedet)) (:name emtest :description nil :type emacsmirror :pkgname "emtest" :required ((("cl" cl) ("custom" custom) ("emacs-core" pp) ("ewoc" ewoc) ("org-mode" org-id) ("outline" outline) ("predictive" heap) ("rtest" rtest-tools) ("tq" tq) (nil emtest/testhelp/mocks/filebuf emtest/testhelp/mocks/libversion fileset-whole pcmpl-elisp rtest-define rtest-util tinydb/persist)) (("button" button) ("elib" dll) ("outline-magic" outline-magic))) :depends (rtest predictive org-mode)) (:name emuds :description nil :type emacsmirror :pkgname "emuds" :required ((("cl" cl)))) (:name encap :description "Code to convert sexps to independent functions etc" :type emacsmirror :pkgname "encap" :required ((("arrange" arrange) ("cl" cl) ("emacs-core" pp) ("tehom-cl" tehom-cl) (nil local-vars))) :depends (tehom-cl)) (:name encrypt :description "Encrypt and decrypt using coding system" :type emacsmirror :pkgname "encrypt" :required ((("cl" cl) ("ffap" ffap) ("prand" prand))) :depends (prand)) (:name enform-mode :description "Handles the Tandem/NSK/Guardian ENFORM report language" :type emacsmirror :pkgname "enform-mode" :required ((("imenu" imenu) ("which-func" which-func) (nil enform-indent)))) (:name enscript :description "Joel's Custom printing functions" :type emacsmirror :pkgname "enscript" :required nil) (:name ensime :description "ENhanced Scala Interaction Mode for Emacs" :type emacsmirror :pkgname "ensime" :required ((("apropos" apropos) ("auto-complete" auto-complete) ("cl" cl) ("comint" comint) ("compile" compile) ("easymenu" easymenu) ("emacs-core" font-lock pp tooltip) ("etags" etags) ("hideshow" hideshow) ("thingatpt" thingatpt) ("timer" timer))) :depends (auto-complete)) (:name eon :description "Micro minimal object system for GNU Emacs Lisp" :type emacsmirror :pkgname "eon" :required ((("cl" cl)))) (:name eoops :description "An Object Oriented Programming System in Elisp" :type emacsmirror :pkgname "eoops" :required nil) (:name epackage :description "Distributed Emacs Lisp Package System (DELPS)" :type emacsmirror :pkgname "epackage" :required ((("finder" finder) ("whitespace" whitespace)))) (:name eperiodic :description "Periodic table for Emacs" :type emacsmirror :pkgname "eperiodic" :required ((("cl" cl) ("dired" dired)))) (:name epg :description "The EasyPG Library" :type emacsmirror :pkgname "epg" :required ((("dired" dired) ("emacs-core" derived font-lock) ("gnus" pgg) ("mail-utils" mail-utils) ("widget" wid-edit widget))) :depends (gnus)) (:name ephotodb :description "Provides ephotodb, the Emacs Photo Database:" :type emacsmirror :pkgname "ephotodb" :required ((("image-file" image-file)))) (:name epkg :description "The stupid package tracker for Emacs" :type emacsmirror :pkgname "epkg" :required ((("cl" cl) ("magit" magit) ("vcomp" vcomp))) :depends (magit)) (:name epm-mode :description "Emacs project mamagement tool" :type emacsmirror :pkgname "epm-mode" :required ((("cl" cl) ("gnuplot" gnuplot) ("muse" muse muse-mode) ("org-mode" org))) :depends (org-mode)) (:name epo :description nil :type emacsmirror :pkgname "epo" :required ((("yatex" yahtml))) :depends (yatex)) (:name epom :description "Pomodoro time management in emacs" :type emacsmirror :pkgname "epom" :required nil) (:name epresent :description "Simple presentation mode for Emacs" :type emacsmirror :pkgname "epresent" :required nil) (:name eproject :description "Assign files to projects, programatically" :type emacsmirror :pkgname "eproject" :required ((("cl" cl) ("eshell" eshell) ("ibuffer" ibuf-ext ibuffer) ("iswitchb" iswitchb))) :depends (eshell)) (:name eproject-peepopen :description "Graphical file chooser for Emacs on Mac OS X" :type emacsmirror :pkgname "eproject-peepopen" :required nil) (:name epydoc :description "Pydoc interface for emacs" :type emacsmirror :pkgname "epydoc" :required ((("cl" cl)))) (:name equinox :description nil :type emacsmirror :pkgname "equinox" :required nil) (:name erbot :description "Another robot for ERC" :type emacsmirror :pkgname "erbot" :required ((("bbdb" bbdb bbdb-com bbdb-hooks) ("calc" calc) ("cl" cl) ("doctor" doctor) ("dunnet" dunnet) ("emacs-core" iso-transl pp quail) ("erc" erc erc-stamp) ("faith" faith) ("find-func" find-func) ("flame" flame) ("geek" geek) ("gnus" gnus gnus-group message) ("google" google) ("h4x0r" h4x0r) ("idledo" idledo) ("lines" lines) ("mkback" mkback) ("oct" oct) ("rot13" rot13) ("thingatpt" thingatpt) ("translate" translate) ("units" units) ("url" url) ("wtf" wtf) (nil bash-quotes lispy)) (("erc" erc-services) (nil erc-nickserv))) :depends (translate mkback lines idledo h4x0r google gnus geek flame faith erc bbdb)) (:name erc :description "An Emacs Internet Relay Chat client" :type emacsmirror :pkgname "erc" :required ((("apel" poe) ("bbdb" bbdb bbdb-com bbdb-gui bbdb-hooks) ("cedet" dframe speedbar) ("chess" chess chess-display chess-network) ("cl" cl) ("comint" comint) ("easymenu" easymenu) ("emacs-core" font-lock overlay pp sort) ("emacspeak" emacspeak) ("flyspell" flyspell) ("gnus" format-spec time-date tls) ("hippie-exp" hippie-exp) ("ibuffer" ibuf-ext ibuffer) ("imenu" imenu) ("iswitchb" iswitchb) ("mail-extr" mail-extr) ("pcomplete" pcomplete) ("ring" ring) ("thingatpt" thingatpt) ("twittering-mode" ssl) ("viper" viper) ("widget" wid-edit) (nil window))) :depends (twittering-mode gnus emacspeak chess cedet bbdb apel)) (:name erc-babel :description "Communicate in different languages with ERC, using automatic translation" :type emacsmirror :pkgname "erc-babel" :required ((("babel" babel) ("erc" erc))) :depends (erc babel)) (:name erc-extra-commands :description nil :type emacsmirror :pkgname "erc-extra-commands" :required ((("erc" erc))) :depends (erc)) (:name erc-highlight-nicknames :description "Highlights nicknames" :type emacsmirror :pkgname "erc-highlight-nicknames" :required ((("erc" erc erc-button))) :depends (erc)) (:name erc-robot :description "A robot for ERC" :type emacsmirror :pkgname "erc-robot" :required ((("erc" erc erc-stamp))) :depends (erc)) (:name erc-tex :description "LaTeX mathematical expressions rendering for ERC" :type emacsmirror :pkgname "erc-tex" :required ((("cl" cl) ("erc" erc))) :depends (erc)) (:name erc-track-score :description "Add score support to tracked channel buffers" :type emacsmirror :pkgname "erc-track-score" :required ((("cl" cl) ("erc" erc erc-match erc-track) ("timer" timer))) :depends (erc)) (:name erc-view-log :description "Major mode for viewing ERC logs" :type emacsmirror :pkgname "erc-view-log" :required ((("erc" erc))) :depends (erc)) (:name erec :description "Minor mode to record and play back audio" :type emacsmirror :pkgname "erec" :required nil) (:name eredis :description nil :type emacsmirror :pkgname "eredis" :required ((("cl" cl) ("org-mode" org-table))) :depends (org-mode)) (:name erefactor :description "Emacs-Lisp tools" :type emacsmirror :pkgname "erefactor" :required ((("advice" advice) ("cl" cl)))) (:name ergo-movement-mode :description nil :type emacsmirror :pkgname "ergo-movement-mode" :required nil) (:name ergoemacs :description nil :type emacsmirror :pkgname "ergoemacs" :required nil) (:name erlang :description "Major modes for editing and running Erlang" :type emacsmirror :pkgname "erlang" :required ((("advice" advice) ("cl" cl) ("comint" comint) ("compile" compile) ("emacs-core" font-lock) ("etags" etags) ("flymake" flymake) ("hyperbole" tags) ("man" man) ("tempo" tempo))) :depends (hyperbole)) (:name erp :description "ERP(Enterprise Ressource Planning) in plain text. " :type emacsmirror :pkgname "erp" :required ((("easymenu" easymenu) (nil erp-exp erp-mobile)))) (:name ert-extras :description "Some extensions to ert" :type emacsmirror :pkgname "ert-extras" :required nil) (:name escreen :description "Emacs window session manager" :type emacsmirror :pkgname "escreen" :required nil) (:name esense :description nil :type emacsmirror :pkgname "esense" :required ((("cl" cl) ("distel" distel) ("emacs-core" tooltip) ("erlang" erlang) ("etags" etags))) :depends (erlang distel)) (:name esheet :description nil :type emacsmirror :pkgname "esheet" :required nil) (:name eshell :description "The Emacs command shell" :type emacsmirror :pkgname "eshell" :required ((("ansi-color" ansi-color) ("cl" cl) ("compile" compile) ("eldoc" eldoc) ("emacs-core" autoload env) ("etags" etags) ("info" info) ("pcomplete" pcmpl-unix pcomplete) ("ring" ring) ("term" term)) (("ange-ftp" ange-ftp)))) (:name eslide :description nil :type emacsmirror :pkgname "eslide" :required nil) (:name esms :description "Send SMS messages directly from XEmacs" :type emacsmirror :pkgname "esms" :required nil) (:name esmtpmail :description "Simple SMTP protocol (RFC 821) for sending mail" :type emacsmirror :pkgname "esmtpmail" :required ((("mail-utils" mail-utils) ("sendmail" sendmail) ("time-stamp" time-stamp) ("vm" vm-misc vm-pop))) :depends (vm)) (:name espect :description "Aspect-oriented buffer settings" :type emacsmirror :pkgname "espect" :required nil) (:name espuds :description "Ecukes step definitions" :type emacsmirror :pkgname "espuds" :required ((("cl" cl) ("edmacro" edmacro)))) (:name ess :description "Emacs Speaks Statistics: statistical programming within Emacs" :type emacsmirror :pkgname "ess" :required ((("assoc" assoc) ("browse-url" browse-url) ("cc-mode" cc-vars) ("cedet" speedbar) ("comint" comint) ("compile" compile) ("custom" custom) ("easymenu" easymenu) ("emacs-core" font-lock tooltip) ("executable" executable) ("hideshow" hideshow) ("imenu" imenu) ("info" info) ("lisp-mode" lisp-mode) ("paren" paren) ("reporter" reporter) ("shell" shell) ("thingatpt" thingatpt))) :depends (cedet cc-mode)) (:name ess-edit :description "Convenient editing of R code" :type emacsmirror :pkgname "ess-edit" :required ((("emacs-core" overlay)))) (:name esv :description nil :type emacsmirror :pkgname "esv" :required ((("calendar" calendar) ("url" url) ("xml" xml)))) (:name etach :description nil :type emacsmirror :pkgname "etach" :required ((("emacs-core" font-lock)))) (:name etest :description "Run tests and get back a hierarchical set of results" :type emacsmirror :pkgname "etest" :required ((("cl" cl) ("outline" outline) ("xmlgen" xmlgen))) :depends (xmlgen)) (:name etexshow :description "Browser for ConTeXt commands" :type emacsmirror :pkgname "etexshow" :required ((("emacs-core" overlay) ("thingatpt" thingatpt)))) (:name ethan-wspace :description "Whitespace customizations for emacs" :type emacsmirror :pkgname "ethan-wspace" :required ((("assoc" assoc)))) (:name etom :description "Emacs to Maya communication" :type emacsmirror :pkgname "etom" :required ((("comint" comint)))) (:name etop :description "Run \"top\" to display information about processes" :type emacsmirror :pkgname "etop" :required nil) (:name etrack :description "Expense tracking user interface" :type emacsmirror :pkgname "etrack" :required ((("cl" cl) ("comint" comint)))) (:name eukleides :description "Major mode to edit eukleides files" :type emacsmirror :pkgname "eukleides" :required ((("cl" cl) ("compile" compile) ("easymenu" easymenu) ("emacs-core" derived) ("imenu" imenu) ("info-look" info-look) ("mode-compile" mode-compile) (nil completer)))) (:name eval-expr :description "Enhanced eval-expression command" :type emacsmirror :pkgname "eval-expr" :required nil) (:name eval-sexp-fu :description "Tiny functionality enhancements for evaluating sexps" :type emacsmirror :pkgname "eval-sexp-fu" :required ((("cl" cl) ("highlight" highlight) ("rx" rx)))) (:name evil :description "Extensible vi layer" :type emacsmirror :pkgname "evil" :required ((("elp" elp) ("ffap" ffap) ("goto-chg" goto-chg) ("imenu" imenu) ("rect" rect) ("undo-tree" undo-tree) ("windmove" windmove) (nil ert))) :depends (rvm undo-tree goto-chg)) (:name evil-leader :description "Let there be <leader>" :type emacsmirror :pkgname "evil-leader" :required ((("evil" evil))) :depends (evil)) (:name evil-numbers :description "Increment/decrement numbers like in vim" :type emacsmirror :pkgname "evil-numbers" :required nil) (:name evimodeline :description nil :type emacsmirror :pkgname "evimodeline" :required nil) (:name ewb :description "Emacs Web Browser" :type emacsmirror :pkgname "ewb" :required nil) (:name excerpt :description "Extraxt text & report to main file" :type emacsmirror :pkgname "excerpt" :required ((("emacs-core" overlay) ("file-properties" file-properties) ("tellib" tellib))) :depends (tellib file-properties)) (:name excite-translate :description "Translate english using excite's service" :type emacsmirror :pkgname "excite-translate" :required (((nil kael-http)))) (:name exec-abbrev-cmd :description "Execute commands by giving an abbreviation" :type emacsmirror :pkgname "exec-abbrev-cmd" :required ((("cl" cl)))) (:name expect :description "Support for external process communication" :type emacsmirror :pkgname "expect" :required ((("cl" cl) ("timer" timer)))) (:name external-abook :description "Enable the use of external address books from within Emacs" :type emacsmirror :pkgname "external-abook" :required nil) (:name extract-ical :description "Import iCalendar events from buffers to OS X iCal" :type emacsmirror :pkgname "extract-ical" :required ((("gnus" gnus))) :depends (gnus)) (:name extview :description "Open files with external viewer" :type emacsmirror :pkgname "extview" :required ((("cl" cl) ("gnus" mailcap))) :depends (gnus)) (:name ezbl :description "Emacs interface for Uzbl (uzbl.org)" :type emacsmirror :pkgname "ezbl" :required ((("cl" cl) ("url" url-cookie)) ((nil xwidget)))) (:name f90-interface-browser :description "Parse and browse f90 interfaces" :type emacsmirror :pkgname "f90-interface-browser" :required ((("cl" cl) ("etags" etags) ("f90" f90) ("thingatpt" thingatpt)))) (:name fa-extras :description nil :type emacsmirror :pkgname "fa-extras" :required ((("filladapt" filladapt))) :depends (filladapt)) (:name fab :description "Fabric integration for Emacs" :type emacsmirror :pkgname "fab" :required nil) (:name face-fns :description "Face manipulation functions" :type emacsmirror :pkgname "face-fns" :required nil) (:name facebook :description "Access the Facebook API from emacs" :type emacsmirror :pkgname "facebook" :required ((("json" json)))) (:name factor-mode :description "Mode for editing Factor source" :type emacsmirror :pkgname "factor-mode" :required ((("advice" advice) ("button" button) ("cl" cl) ("comint" comint) ("emacs-core" font-lock) ("etags" etags) ("ring" ring) ("thingatpt" thingatpt)))) (:name faith :description "Helps spreading the true faith" :type emacsmirror :pkgname "faith" :required nil) (:name fakespace :description "Fake Emacs lisp namespaces" :type emacsmirror :pkgname "fakespace" :required ((("cl" cl)))) (:name faq-mode :description nil :type emacsmirror :pkgname "faq-mode" :required nil) (:name fastfuzz :description "Compensate fast for floating-point roundoff error" :type emacsmirror :pkgname "fastfuzz" :required nil) (:name fastnav :description "Fast navigation and editing routines" :type emacsmirror :pkgname "fastnav" :required nil) (:name fc :description "A flashcard wrapper to make it more friendly" :type emacsmirror :pkgname "fc" :required ((("flashcard" flashcard) ("flashcard-sm5" flashcard-sm5) ("gnus" time-date)) ((nil kakasi))) :depends (gnus flashcard-sm5 flashcard)) (:name fcsh-mode :description "Adobe Flex Compiler Shell helper" :type emacsmirror :pkgname "fcsh-mode" :required ((("comint" comint)))) (:name fdlcap :description "Cycle through case and capitalization of words" :type emacsmirror :pkgname "fdlcap" :required nil) (:name fenc :description "Detect CJK coding system by counting most frequence charaters" :type emacsmirror :pkgname "fenc" :required ((("cl" cl)))) (:name festival :description nil :type emacsmirror :pkgname "festival" :required ((("comint" comint)))) (:name fetch :description "Never type the long remote file name again." :type emacsmirror :pkgname "fetch" :required ((("cl" cl)))) (:name ff-paths :description "Searches certain paths to find files" :type emacsmirror :pkgname "ff-paths" :required ((("ffap" ffap)))) (:name fff :description "Fast file finder" :type emacsmirror :pkgname "fff" :required nil) (:name fff-elisp :description "Find emacs lisp libaries and function definitions" :type emacsmirror :pkgname "fff-elisp" :required ((("fff" fff))) :depends (fff)) (:name fff-rfc :description "Locate IETF RFC (Request For Comments) texts quickly" :type emacsmirror :pkgname "fff-rfc" :required ((("fff" fff))) :depends (fff)) (:name fic-ext-mode :description "Show FIXME/TODO/BUG(...) in special face only in comments and strings" :type emacsmirror :pkgname "fic-ext-mode" :required nil) (:name fic-mode :description "Show FIXME/TODO/BUG/KLUDGE in special face only in comments and strings" :type emacsmirror :pkgname "fic-mode" :required nil) (:name file-ext :description "Tools for seeking text in files and edit this files" :type emacsmirror :pkgname "file-ext" :required nil) (:name file-fns :description "Functions for querying about or acting on files" :type emacsmirror :pkgname "file-fns" :required nil) (:name file-journal :description "Revisit files by date" :type emacsmirror :pkgname "file-journal" :required ((("cl" cl)))) (:name file-log :description "Manage a log file per file for version control" :type emacsmirror :pkgname "file-log" :required ((("add-log" add-log)))) (:name file-name-insertions :description nil :type emacsmirror :pkgname "file-name-insertions" :required nil) (:name file-properties :description "Non-intrusive file local variables" :type emacsmirror :pkgname "file-properties" :required ((("tellib" tellib))) :depends (tellib)) (:name filename-cases :description "Fix up filename cases" :type emacsmirror :pkgname "filename-cases" :required nil) (:name filenames-in-buffers :description nil :type emacsmirror :pkgname "filenames-in-buffers" :required nil) (:name filenames-in-env :description "Put environment variables into filenames where possible" :type emacsmirror :pkgname "filenames-in-env" :required nil) (:name filenames-under-tags :description nil :type emacsmirror :pkgname "filenames-under-tags" :required nil) (:name fill-column-indicator :description "Graphically indicate the fill column" :type emacsmirror :pkgname "fill-column-indicator" :required nil) (:name filladapt :description nil :type emacsmirror :pkgname "filladapt" :required ((("custom" custom)))) (:name filladapt-pat :description "Add or remove some filladapt patterns" :type emacsmirror :pkgname "filladapt-pat" :required nil) (:name fillcode :description "Fillcode minor mode" :type emacsmirror :pkgname "fillcode" :required ((("cc-mode" cc-bytecomp cc-engine) ("cl" cl))) :depends (cc-mode)) (:name find-commands :description "Find functions matching a pattern, that have interactive definitions" :type emacsmirror :pkgname "find-commands" :required nil) (:name find-dired-lisp :description "\"find-dired\" by lisp" :type emacsmirror :pkgname "find-dired-lisp" :required ((("dired" dired) ("findr" findr)))) (:name find-empty-el-files :description "Find elisp files that don't have any elisp in them" :type emacsmirror :pkgname "find-empty-el-files" :required ((("edit-tree" edit-tree))) :depends (edit-tree)) (:name find-file-in-project :description "Find files in a project quickly" :type emacsmirror :pkgname "find-file-in-project" :required nil) (:name find-file-in-tags :description nil :type emacsmirror :pkgname "find-file-in-tags" :required ((("etags" etags)))) (:name find-file-suggest :description "Adaptive filename suggestions based on" :type emacsmirror :pkgname "find-file-suggest" :required nil) (:name find-files :description "Handle globing or regexp patterns for find-file" :type emacsmirror :pkgname "find-files" :required nil) (:name find-git :description "Git working tree browser" :type emacsmirror :pkgname "find-git" :required ((("cl" cl)))) (:name find-lib :description "Find files in Emacs' `load-path' with completion" :type emacsmirror :pkgname "find-lib" :required nil) (:name find-page-file :description nil :type emacsmirror :pkgname "find-page-file" :required ((("browse-url" browse-url)))) (:name find-select :description "Find file utilities" :type emacsmirror :pkgname "find-select" :required ((("cl" cl) ("emacs-core" find-cmd)))) (:name find-tag-hack :description nil :type emacsmirror :pkgname "find-tag-hack" :required nil) (:name fip :description "Interface to the FIP radio" :type emacsmirror :pkgname "fip" :required ((("url" url)))) (:name fix-buffers-list :description "New M status and colors in buffers list" :type emacsmirror :pkgname "fix-buffers-list" :required nil) (:name fixme-mode :description "Makes FIXME, TODO, etc. appear in big, angry letters" :type emacsmirror :pkgname "fixme-mode" :required ((("cl" cl)))) (:name flame :description "Automatic generation of flamage, as if we needed more" :type emacsmirror :pkgname "flame" :required nil) (:name flarc :description "Non-destructive, transcoding, annotating audio archiver" :type emacsmirror :pkgname "flarc" :required ((("radio" radio) (nil usb))) :depends (radio)) (:name flash-paren :description "Flash matching parens a la Zmacs" :type emacsmirror :pkgname "flash-paren" :required ((("custom" custom) ("timer" timer)))) (:name flashcard :description "An extensible fact-learning program" :type emacsmirror :pkgname "flashcard" :required nil) (:name flashcard-sm5 :description "SuperMemo algorithm for Emacs flashcard" :type emacsmirror :pkgname "flashcard-sm5" :required ((("flashcard" flashcard))) :depends (flashcard)) (:name flatten-saved-pages :description "Flatten pages saved by browsers" :type emacsmirror :pkgname "flatten-saved-pages" :required nil) (:name flex-isearch :description "Flex matching (like ido) in isearch" :type emacsmirror :pkgname "flex-isearch" :required ((("cl" cl) ("regexp-opt" regexp-opt)))) (:name flim :description "A MIME encoding/decoding library" :type emacsmirror :pkgname "flim" :required ((("apel" mcharset path-util pccl pcustom poe poem) ("cl" cl) ("custom" custom) ("emacs-core" ccl) ("mail-utils" mail-utils) ("riece" luna))) :depends (apel)) (:name floatbg :description "Slowly modify background color" :type emacsmirror :pkgname "floatbg" :required nil) (:name flowtimer :description "Let yourself work in sprints" :type emacsmirror :pkgname "flowtimer" :required nil) (:name fluiddb :description "Code to work with FluidDB" :type emacsmirror :pkgname "fluiddb" :required ((("cl" cl) ("json" json) ("url" url)))) (:name flydoc :description nil :type emacsmirror :pkgname "flydoc" :required ((("cl" cl) ("easy-mmode" easy-mmode) ("thingatpt" thingatpt)))) (:name flymake-cursor :description "Displays flymake error msg in minibuffer after delay" :type emacsmirror :pkgname "flymake-cursor" :required ((("cl" cl)))) (:name flymake-for-csharp :description "C# mode derived mode" :type emacsmirror :pkgname "flymake-for-csharp" :required ((("flymake" flymake)))) (:name flymake-shell :description "A flymake syntax-checker for shell scripts" :type emacsmirror :pkgname "flymake-shell" :required ((("flymake" flymake)))) (:name flyspell-guess :description "Flyspell dictionary guesser" :type emacsmirror :pkgname "flyspell-guess" :required ((("flyspell" flyspell)))) (:name flyspell-timer :description "Check Spelling in the idle cycle" :type emacsmirror :pkgname "flyspell-timer" :required nil) (:name fmailutils :description "Random mail frobnication utilities" :type emacsmirror :pkgname "fmailutils" :required ((("sendmail" sendmail)))) (:name fold :description "Folding" :type emacsmirror :pkgname "fold" :required nil) (:name foldingo :description nil :type emacsmirror :pkgname "foldingo" :required ((("emacs-core" menu-bar)))) (:name folio :description "GNOME-integrated notetaking system built on Org" :type emacsmirror :pkgname "folio" :required ((("cl" cl) ("color-theme" color-theme) ("iimage" iimage) ("org-mode" org) ("uuidgen" uuidgen))) :depends (uuidgen org-mode zenburn-theme)) (:name follow-mouse :description "Automatically select the window under the mouse" :type emacsmirror :pkgname "follow-mouse" :required ((("custom" custom)))) (:name foursquare :description "Foursquare client for Emacs" :type emacsmirror :pkgname "foursquare" :required ((("37emacs" rest-api) ("geocode" geocode) ("json" json) ("url" url))) :depends (geocode 37emacs)) (:name fp :description "Miscellaneous functions" :type emacsmirror :pkgname "fp" :required nil) (:name fracc :description nil :type emacsmirror :pkgname "fracc" :required nil) (:name frame-bufs :description "A minor mode for frame-relative buffer lists" :type emacsmirror :pkgname "frame-bufs" :required nil) (:name framemove :description "Directional frame selection routines" :type emacsmirror :pkgname "framemove" :required nil) (:name framov :description "Minor mode and any commands for Emacsen on X-Window System" :type emacsmirror :pkgname "framov" :required ((("cl" cl) ("easy-mmode" easy-mmode)))) (:name frb :description "Emacs client for faraday's book" :type emacsmirror :pkgname "frb" :required ((("cl" cl) ("emacs-core" md5) ("highline" highline) ("json" json) ("mcomplete" mcomplete) ("url" url))) :depends (mcomplete)) (:name free-tagging :description "A global Status bar for emacs" :type emacsmirror :pkgname "free-tagging" :required ((("cl" cl)))) (:name freex :description "Base info used in emacs freex" :type emacsmirror :pkgname "freex" :required ((("emacs-core" font-lock)))) (:name fscroll :description nil :type emacsmirror :pkgname "fscroll" :required nil) (:name fsdired :description "Sort files to go to different places in dired" :type emacsmirror :pkgname "fsdired" :required (nil (("hide-lines" hide-lines)))) (:name fsharp-mode :description nil :type emacsmirror :pkgname "fsharp-mode" :required ((("cl" cl) ("comint" comint) ("compile" compile) ("custom" custom) ("emacs-core" font-lock) ("info-look" info-look)))) (:name fshell :description "Enhancements to shell.el" :type emacsmirror :pkgname "fshell" :required ((("shell" shell)))) (:name fsvn :description "Another frontend of subversion" :type emacsmirror :pkgname "fsvn" :required ((("cedet" chart) ("diff" diff) ("diff-mode" diff-mode) ("dired" dired) ("dired-aux" dired-aux) ("easymenu" easymenu) ("emacs-core" bytecomp menu-bar) ("ls-lisp" ls-lisp) ("xml" xml) (nil mw32script)) (("electric" electric))) :depends (cedet)) (:name ftcp :description "Wrapper for open-network-stream to use external process" :type emacsmirror :pkgname "ftcp" :required ((("advice" advice)))) (:name ftelnet :description "Remote login interface" :type emacsmirror :pkgname "ftelnet" :required ((("comint" comint) ("shell" shell)))) (:name ftnchek :description "Ftnchek support for fortran mode" :type emacsmirror :pkgname "ftnchek" :required ((("compile" compile) ("fortran" fortran)))) (:name full-ack :description nil :type emacsmirror :pkgname "full-ack" :required ((("cl" cl) ("compile" compile) ("iswitchb" iswitchb)))) (:name func-doc :description nil :type emacsmirror :pkgname "func-doc" :required ((("cc-mode" cc-mode) ("info" info) ("oo-browser" c-mode))) :depends (oo-browser cc-mode)) (:name fuzz :description "Compensate for floating-point roundoff error" :type emacsmirror :pkgname "fuzz" :required nil) (:name fuzzy-find-in-project :description nil :type emacsmirror :pkgname "fuzzy-find-in-project" :required nil) (:name fuzzyjump :description "Jump to where you (almost) want" :type emacsmirror :pkgname "fuzzyjump" :required nil) (:name fvwm-mode :description nil :type emacsmirror :pkgname "fvwm-mode" :required ((("emacs-core" font-lock)))) (:name fx-misc :description "Miscellaneous small functions/settings" :type emacsmirror :pkgname "fx-misc" :required ((("add-log" add-log) ("imenu" imenu) ("man" man) ("spook" spook) ("vc" vc)))) (:name gallery :description nil :type emacsmirror :pkgname "gallery" :required nil) (:name gap-mode :description nil :type emacsmirror :pkgname "gap-mode" :required ((("comint" comint)))) (:name garble :description "Emacs interface to garble" :type emacsmirror :pkgname "garble" :required ((("cl" cl) ("gnus" parse-time))) :depends (gnus)) (:name gas-mode :description "Mode for editing assembler code" :type emacsmirror :pkgname "gas-mode" :required nil) (:name gather :description "Gather string in buffer" :type emacsmirror :pkgname "gather" :required nil) (:name gb4e :description "Style hook for the gb4e package" :type emacsmirror :pkgname "gb4e" :required nil) (:name gccsense :description "GCCSense client for GNU Emacs" :type emacsmirror :pkgname "gccsense" :required ((("flymake" flymake) (nil ctagsfind)))) (:name gdb-bp-session :description "Save and Restore breakpoints for Emacs gdb" :type emacsmirror :pkgname "gdb-bp-session" :required ((("gud" gud)))) (:name gdb-keymap :description "Make the life easier with debugging" :type emacsmirror :pkgname "gdb-keymap" :required ((("cl" cl)))) (:name gdl :description nil :type emacsmirror :pkgname "gdl" :required nil) (:name geek :description "Annoy lusers who think the geek code is wAY ko0l RADIKuL D00D!1" :type emacsmirror :pkgname "geek" :required nil) (:name geiser :description "Main geiser file" :type emacsmirror :pkgname "geiser" :required ((("button" button) ("cl" cl) ("comint" comint) ("compile" compile) ("eldoc" eldoc) ("emacs-core" font-lock minibuffer) ("etags" etags) ("help" help-fns) ("info-look" info-look) ("lisp-mode" lisp-mode) ("scheme" scheme) ("tq" tq) ("view" view)))) (:name genconv :description nil :type emacsmirror :pkgname "genconv" :required nil) (:name generic-range-opt :description "Generate range operations" :type emacsmirror :pkgname "generic-range-opt" :required ((("cl" cl) ("thing-opt" thing-opt))) :depends (thing-opt)) (:name generic-text :description "Generic things that get passed to TeX, LaTeX, html, troff, texinfo etc" :type emacsmirror :pkgname "generic-text" :required ((("gentext-bindings" gentext-bindings) ("gentext-html" gentext-html) ("gentext-models" gentext-models) ("gentext-plaintext" gentext-plaintext) ("gentext-roff" gentext-roff) ("gentext-tex" gentext-tex) ("gentext-texinfo" gentext-texinfo) ("versor" modal-functions) (nil gentext-muse text-sentences))) :depends (versor gentext-texinfo gentext-tex gentext-roff gentext-plaintext gentext-models gentext-html gentext-bindings)) (:name gentext-bindings :description "Key binding manipulations for generic text commands" :type emacsmirror :pkgname "gentext-bindings" :required ((("keymap-hacks" keymap-hacks))) :depends (keymap-hacks)) (:name gentext-html :description nil :type emacsmirror :pkgname "gentext-html" :required ((("gentext-models" gentext-models) ("html-helper-mode" html-helper-mode) (nil text-sentences))) :depends (html-helper-mode gentext-models)) (:name gentext-models :description "Model functions for generic text" :type emacsmirror :pkgname "gentext-models" :required nil) (:name gentext-plaintext :description nil :type emacsmirror :pkgname "gentext-plaintext" :required ((("gentext-models" gentext-models))) :depends (gentext-models)) (:name gentext-roff :description nil :type emacsmirror :pkgname "gentext-roff" :required ((("gentext-models" gentext-models))) :depends (gentext-models)) (:name gentext-tex :description nil :type emacsmirror :pkgname "gentext-tex" :required ((("gentext-models" gentext-models) ("reftex" reftex-cite) ("tex-mode" tex-mode))) :depends (reftex gentext-models)) (:name gentext-texinfo :description nil :type emacsmirror :pkgname "gentext-texinfo" :required ((("gentext-models" gentext-models) ("texinfo" texinfo))) :depends (gentext-models)) (:name gentoo-syntax :description "Modes for editing Gentoo specific files" :type emacsmirror :pkgname "gentoo-syntax" :required ((("easymenu" easymenu) ("emacs-core" font-lock) ("sh-script" sh-script) ("skeleton" skeleton)))) (:name geocode :description "Geocoder.us API client for Emacs" :type emacsmirror :pkgname "geocode" :required ((("csv" csv) ("url" url))) :depends (csv)) (:name geos-vote :description "An easy way to respond to GEOS ballots" :type emacsmirror :pkgname "geos-vote" :required nil) (:name gestures :description "Configuration for strokes-mode with a touchscreen" :type emacsmirror :pkgname "gestures" :required ((("strokes" strokes)))) (:name get-rfc :description "Getting and viewing RFCs" :type emacsmirror :pkgname "get-rfc" :required nil) (:name get-url-content :description nil :type emacsmirror :pkgname "get-url-content" :required nil) (:name ggo-mode :description "Gengetopt major mode" :type emacsmirror :pkgname "ggo-mode" :required nil) (:name gh :description "Main entry point for gh.el library" :type emacsmirror :pkgname "gh" :required ((("cedet" eieio) ("cl" cl) ("json" json))) :depends (cedet)) (:name ghc-mod :description nil :type emacsmirror :pkgname "ghc-mod" :required ((("dabbrev" dabbrev) ("flymake" flymake)))) (:name gimme :description "GIMME Interesting Music on My Emacs" :type emacsmirror :pkgname "gimme" :required ((("hexrgb" hexrgb) ("htmlr" htmlr) ("timer" timer)))) (:name gimp-mode :description nil :type emacsmirror :pkgname "gimp-mode" :required ((("cl" cl) ("cmuscheme" cmuscheme) ("eldoc" eldoc) ("outline" outline) ("ring" ring) ("scheme-complete" scheme-complete) ("snippet" snippet) ("thingatpt" thingatpt))) :depends (scheme-complete)) (:name gimps-report :description nil :type emacsmirror :pkgname "gimps-report" :required nil) (:name gist :description "Emacs integration for gist.github.com" :type emacsmirror :pkgname "gist" :required ((("cl" cl) ("xml" xml)))) (:name git-commit :description "Major mode for editing git commit messages" :type emacsmirror :pkgname "git-commit" :required nil) (:name git-dwim :description "Context-aware git commands such as branch handling" :type emacsmirror :pkgname "git-dwim" :required ((("cl" cl)))) (:name git-emacs :description nil :type emacsmirror :pkgname "git-emacs" :required ((("cl" cl) ("easymenu" easymenu) ("ediff" ediff) ("ewoc" ewoc) ("grep" grep) ("ido" ido) ("log-view" log-view) ("time-stamp" time-stamp) ("vc" vc vc-git)) (("hl-line" hl-line)))) (:name git-wip :description nil :type emacsmirror :pkgname "git-wip" :required nil) (:name github :description "Interact with Github Issues through Emacs" :type emacsmirror :pkgname "github" :required nil) (:name gitsum :description "Basic darcsum feelalike for Git" :type emacsmirror :pkgname "gitsum" :required ((("cl" cl)))) (:name glade-mode :description "A mode to view glade interface using tree-widget" :type emacsmirror :pkgname "glade-mode" :required ((("cl" cl) ("tree-mode" tree-mode) ("xml" xml))) :depends (tree-mode)) (:name gle-mode :description "Major mode for editing .gle files" :type emacsmirror :pkgname "gle-mode" :required ((("emacs-obsolete" lmenu)))) (:name glimpse :description "Interface to glimpse " :type emacsmirror :pkgname "glimpse" :required ((("compile" compile) ("dired" dired)))) (:name global-modes :description "Enables activating minor modes globally" :type emacsmirror :pkgname "global-modes" :required nil) (:name globalff :description "Global find file" :type emacsmirror :pkgname "globalff" :required ((("cl" cl) ("emacs-core" overlay)))) (:name globalizer :description "Add your lovely globalize .t with style" :type emacsmirror :pkgname "globalizer" :required nil) (:name globrep :description "Search for and replace strings in multiple files" :type emacsmirror :pkgname "globrep" :required ((("cl" cl) ("compile" compile) ("query" query) ("vc" vc))) :depends (query)) (:name gm-webbot :description "An implementation of Webbots known from MS Frontpage" :type emacsmirror :pkgname "gm-webbot" :required nil) (:name gneve :description nil :type emacsmirror :pkgname "gneve" :required nil) (:name gnugo :description nil :type emacsmirror :pkgname "gnugo" :required ((("cl" cl) ("gnus" time-date) (nil gnugo-xpms))) :depends (gnus)) (:name gnus :description "A newsreader for GNU Emacs" :type emacsmirror :pkgname "gnus" :required ((("apel" mcharset) ("assoc" assoc) ("babel" babel) ("bbdb" bbdb bbdb-com) ("browse-url" browse-url) ("cedet" eieio eieio-base) ("cl" cl) ("dired" dired) ("easy-mmode" easy-mmode) ("easymenu" easymenu) ("edmacro" edmacro) ("emacs-core" base64 bytecomp font-lock image jka-compr md5 mouse sort) ("epg" epg epg-config) ("help" help-fns) ("idna" idna) ("iswitchb" iswitchb) ("itimer" itimer) ("ldap" ldap) ("lpr" lpr) ("mail-extr" mail-extr) ("mail-utils" mail-utils) ("mailabbrev" mailabbrev) ("mailheader" mailheader) ("mh-e" mh-comp mh-e) ("org-mode" org-entities) ("rfc822" rfc822) ("ring" ring) ("rmail" rmail) ("sendmail" sendmail) ("term" term) ("time" time) ("timer" timer) ("trace" trace) ("url" url url-cache url-handlers url-parse url-vars) ("w3" w3 w3-vars) ("w3m" w3m) ("widget" wid-edit widget) ("xml" xml) ("xml-rpc" xml-rpc) (nil ert)) ((nil secrets))) :depends (rvm xml-rpc w3m w3 org-mode itimer idna epg cedet bbdb babel apel)) (:name gnus-alias :description "An alternative to gnus-posting-styles" :type emacsmirror :pkgname "gnus-alias" :required ((("gnus" message))) :depends (gnus)) (:name gnus-autocheck :description nil :type emacsmirror :pkgname "gnus-autocheck" :required ((("gnus" gnus))) :depends (gnus)) (:name gnus-checker :description "Mode line mail indicator for gnus" :type emacsmirror :pkgname "gnus-checker" :required nil) (:name gnus-desktop-notify :description nil :type emacsmirror :pkgname "gnus-desktop-notify" :required ((("assoc" assoc) ("gnus" format-spec gnus-group))) :depends (gnus)) (:name gnus-est :description "Search mail with HyperEstraier" :type emacsmirror :pkgname "gnus-est" :required ((("cl" cl) ("gnus" gnus-sum nnheader nnmail nnoo))) :depends (gnus)) (:name gnus-hardsort :description "Permanently sort group by date" :type emacsmirror :pkgname "gnus-hardsort" :required nil) (:name gnus-harvest :description "Harvest e-mail address from read/written articles" :type emacsmirror :pkgname "gnus-harvest" :required ((("gnus" gnus message) ("mailalias" mailalias) ("sendmail" sendmail)) (("bbdb" bbdb bbdb-com))) :depends (gnus)) (:name gnus-highlight :description "Easy highlighting of summary and article headers" :type emacsmirror :pkgname "gnus-highlight" :required ((("gnus" gnus-art))) :depends (gnus)) (:name gnus-identities :description "Change identity when composing a message" :type emacsmirror :pkgname "gnus-identities" :required ((("gnus" message))) :depends (gnus)) (:name gnus-notify :description nil :type emacsmirror :pkgname "gnus-notify" :required nil) (:name gnus-propfont :description "Adding faces to *Article* buffer in Gnus " :type emacsmirror :pkgname "gnus-propfont" :required ((("cl" cl)))) (:name go-mode :description "Mode for playing, browsing, and editing go games" :type emacsmirror :pkgname "go-mode" :required ((("cl" cl) ("comint" comint) (nil sgf-board sgf-gnugo sgf-gtp sgf-rw sgf-sgf)))) (:name gob :description "A code generator for GObject" :type emacsmirror :pkgname "gob" :required ((("cl" cl)))) (:name gobject-class :description "Functions to easy GObject-based class developers" :type emacsmirror :pkgname "gobject-class" :required nil) (:name golbarg :description nil :type emacsmirror :pkgname "golbarg" :required ((("markdown-mode" markdown-mode) ("org-mode" org) ("yaml-mode" yaml-mode))) :depends (org-mode markdown-mode)) (:name golisp :description "Navigate lisp source code with hyperlinks" :type emacsmirror :pkgname "golisp" :required ((("cl" cl)))) (:name gonzui-emacs :description nil :type emacsmirror :pkgname "gonzui-emacs" :required nil) (:name goofey :description "Send Goofey messages from Emacs !" :type emacsmirror :pkgname "goofey" :required nil) (:name google :description "Emacs interface to the Google API" :type emacsmirror :pkgname "google" :required ((("json" json) ("url" url)))) (:name google-c-style :description "Google's C/C++ style for c-mode" :type emacsmirror :pkgname "google-c-style" :required ((("cc-mode" cc-defs))) :depends (cc-mode)) (:name google-define :description nil :type emacsmirror :pkgname "google-define" :required ((("emacs-core" font-lock)))) (:name google-define-redux :description "Extends google-define.el " :type emacsmirror :pkgname "google-define-redux" :required ((("cl" cl) ("emacs-core" font-lock)))) (:name google-maps :description "Access Google Maps from Emacs" :type emacsmirror :pkgname "google-maps" :required ((("calendar" solar) ("cl" cl) ("easymenu" easymenu) ("json" json) ("org-mode" org org-agenda) ("url" url-util))) :depends (org-mode)) (:name google-translator :description "Translate text using Google Translate API" :type emacsmirror :pkgname "google-translator" :required ((("json" json) ("url" url)))) (:name google-weather :description "Fetch Google Weather forecasts" :type emacsmirror :pkgname "google-weather" :required ((("calendar" solar) ("cl" cl) ("emacs-core" image) ("gnus" format-spec time-date) ("url" url url-cache) ("xml" xml))) :depends (gnus)) (:name gosh :description "An interface to Gauche" :type emacsmirror :pkgname "gosh" :required ((("pcomplete" pcomplete)))) (:name gosh-mode :description "Programming language gauche editing tools" :type emacsmirror :pkgname "gosh-mode" :required ((("cl" cl) ("cmuscheme" cmuscheme) ("el-expectations" el-expectations) ("el-mock" el-mock) ("erefactor" erefactor) ("flymake" flymake) ("info-look" info-look) ("scheme" scheme)) (("auto-complete" auto-complete-config) ("eldoc" eldoc))) :depends (erefactor el-mock el-expectations)) (:name goto-char-other-window :description "Jump to a specified place in the other window" :type emacsmirror :pkgname "goto-char-other-window" :required nil) (:name goto-chg :description "Goto last change" :type emacsmirror :pkgname "goto-chg" :required nil) (:name goto-last-change :description "Move point through buffer-undo-list positions" :type emacsmirror :pkgname "goto-last-change" :required ((("cl" cl)))) (:name goto-pattern :description "An easy way to navigate to a predefined pattern" :type emacsmirror :pkgname "goto-pattern" :required nil) (:name gpicker :description "Gpicker integration for Emacs" :type emacsmirror :pkgname "gpicker" :required ((("ffap" ffap) ("imenu" imenu)))) (:name grab-and-drag :description "Scroll a window by mouse dragging" :type emacsmirror :pkgname "grab-and-drag" :required nil) (:name grade :description "Program for keeping track of grades" :type emacsmirror :pkgname "grade" :required ((("calc" calc) ("easymenu" easymenu)))) (:name grail :description nil :type emacsmirror :pkgname "grail" :required ((("cl" cl) ("find-func" find-func)))) (:name graphviz-dot-mode :description "Mode for the dot-language used by graphviz (att)" :type emacsmirror :pkgname "graphviz-dot-mode" :required nil) (:name grc :description "Google Reader Mode for Emacs" :type emacsmirror :pkgname "grc" :required ((("cl" cl) ("gnus" html2text) ("json" json))) :depends (gnus)) (:name grep-a-lot :description "Manages multiple search results buffers for grep.el" :type emacsmirror :pkgname "grep-a-lot" :required ((("advice" advice) ("grep" grep)))) (:name grep-edit :description "Edit grep buffer and apply the changes to files" :type emacsmirror :pkgname "grep-edit" :required nil) (:name grep-o-matic :description "Auto grep word under cursor" :type emacsmirror :pkgname "grep-o-matic" :required ((("grep" grep)))) (:name gresreg :description "Query-replace in all buffer" :type emacsmirror :pkgname "gresreg" :required nil) (:name gri-mode :description nil :type emacsmirror :pkgname "gri-mode" :required ((("cl" cl) ("imenu" imenu) ("info" info)))) (:name groovy-mode :description "Groovy mode derived mode" :type emacsmirror :pkgname "groovy-mode" :required ((("cc-mode" cc-mode) ("comint" comint) ("compile" compile) ("emacs-core" find-cmd))) :depends (cc-mode)) (:name gse-create-dated-file :description nil :type emacsmirror :pkgname "gse-create-dated-file" :required nil) (:name gse-iter :description nil :type emacsmirror :pkgname "gse-iter" :required nil) (:name gse-locate :description nil :type emacsmirror :pkgname "gse-locate" :required nil) (:name gse-number-rect :description "Inserts incremental numbers in a rectangle" :type emacsmirror :pkgname "gse-number-rect" :required ((("rect" rect)))) (:name gse-rename :description nil :type emacsmirror :pkgname "gse-rename" :required nil) (:name gse-start-bash-here :description nil :type emacsmirror :pkgname "gse-start-bash-here" :required nil) (:name gse-underline-previous-line :description nil :type emacsmirror :pkgname "gse-underline-previous-line" :required nil) (:name gst-inspect :description "Wrapper for gst-inspect" :type emacsmirror :pkgname "gst-inspect" :required nil) (:name gtags :description nil :type emacsmirror :pkgname "gtags" :required ((("cl" cl) ("etags" etags) ("tree-widget" tree-widget) ("widget" wid-browse)))) (:name gtk-perl :description "A minor mode to help write gtk-perl code" :type emacsmirror :pkgname "gtk-perl" :required ((("cl" cl) ("complete" complete) ("cperl-mode" cperl-mode))) :depends (cperl-mode)) (:name gtk2hs :description "This is tools package for gtk2hs" :type emacsmirror :pkgname "gtk2hs" :required nil) (:name gtklookup :description nil :type emacsmirror :pkgname "gtklookup" :required ((("anything" anything) ("browse-url" browse-url) ("cl" cl) ("emacs-core" simple) ("ido" ido))) :depends (anything)) (:name guess-lang :description "Automagically guess what is the language of a buffer" :type emacsmirror :pkgname "guess-lang" :required nil) (:name guess-style :description "Automatic setting of code style variables" :type emacsmirror :pkgname "guess-style" :required ((("cl" cl)))) (:name guido-mode :description "Mode for editing Guido Music Notation files" :type emacsmirror :pkgname "guido-mode" :required nil) (:name gwt-mumamo :description "Multi major modes for Google Web Toolkit code" :type emacsmirror :pkgname "gwt-mumamo" :required nil) (:name h2o :description "Orgmode-formatted READMEs for your ELisp" :type emacsmirror :pkgname "h2o" :required nil) (:name h4x0r :description nil :type emacsmirror :pkgname "h4x0r" :required ((("cl" cl)))) (:name hack-locals :description nil :type emacsmirror :pkgname "hack-locals" :required nil) (:name haddoc :description "Browse Python HTML documentation from Emacs" :type emacsmirror :pkgname "haddoc" :required ((("browse-url" browse-url)))) (:name hamapo :description nil :type emacsmirror :pkgname "hamapo" :required ((("cl" cl)))) (:name haml-mode :description "Major mode for editing Haml files" :type emacsmirror :pkgname "haml-mode" :required ((("cl" cl) ("ruby-mode" ruby-mode)) (("css-mode" css-mode) ("javascript-mode" javascript-mode) ("js" js) ("markdown-mode" markdown-mode) ("textile-mode" textile-mode)))) (:name hamster-mode :description "Hamster scripts editing for Emacs" :type emacsmirror :pkgname "hamster-mode" :required ((("emacs-core" font-lock)))) (:name handhold :description "GUI for constructing tests" :type emacsmirror :pkgname "handhold" :required ((("cl" cl) ("emacs-core" pp) ("widget" wid-edit widget)))) (:name haskell :description "Major mode for editing Haskell" :type emacsmirror :pkgname "haskell" :required nil) (:name haskell-latex :description "Editing literate Haskell with LaTeX convention" :type emacsmirror :pkgname "haskell-latex" :required ((("multi-mode" multi-mode))) :depends (multi-mode)) (:name haskell-mode :description "A Haskell editing mode" :type emacsmirror :pkgname "haskell-mode" :required ((("cl" cl) ("comint" comint) ("compile" compile) ("emacs-core" font-lock) ("etags" etags) ("imenu" imenu) ("shell" shell) (nil func-menu)) (("emacs-core" latin1-disp syntax) (nil syntax-ppss)))) (:name haskell-style :description nil :type emacsmirror :pkgname "haskell-style" :required nil) (:name haskell-tweet-errors :description nil :type emacsmirror :pkgname "haskell-tweet-errors" :required nil) (:name haskell-unicode-input-method :description nil :type emacsmirror :pkgname "haskell-unicode-input-method" :required ((("emacs-core" quail)))) (:name hatena-tools :description nil :type emacsmirror :pkgname "hatena-tools" :required ((("cl" cl) ("emacs-core" derived font-lock) ("html-helper-mode" html-helper-mode))) :depends (html-helper-mode)) (:name header-action :description nil :type emacsmirror :pkgname "header-action" :required nil) (:name header-button :description "Clickable buttons in header lines" :type emacsmirror :pkgname "header-button" :required ((("button" button)))) (:name header-file :description "Assign a major mode for header files" :type emacsmirror :pkgname "header-file" :required ((("find-file" find-file)))) (:name hebeng :description nil :type emacsmirror :pkgname "hebeng" :required nil) (:name help-dwim :description "Show help information" :type emacsmirror :pkgname "help-dwim" :required ((("cl" cl) ("woman" woman)))) (:name help-dwim-perlapi :description "Show help of perlapi" :type emacsmirror :pkgname "help-dwim-perlapi" :required ((("cl" cl)))) (:name help-dwim-perldoc :description nil :type emacsmirror :pkgname "help-dwim-perldoc" :required ((("cl" cl) ("help-dwim" help-dwim) ("tree-widget" tree-widget) ("woman" woman)) (("tree-mode" tree-mode))) :depends (help-dwim)) (:name hexcolour :description "Highlight HTML-style colour specifications" :type emacsmirror :pkgname "hexcolour" :required nil) (:name hexview-mode :description "A simple & fast hexadecimal file viewer" :type emacsmirror :pkgname "hexview-mode" :required ((("cl" cl)))) (:name hide-comnt :description "Hide/show comments in code" :type emacsmirror :pkgname "hide-comnt" :required (nil (("newcomment" newcomment)))) (:name hide-copyleft :description "Hide obnoxious copyright prologs" :type emacsmirror :pkgname "hide-copyleft" :required nil) (:name hide-lines :description "Commands for hiding lines based on a regexp" :type emacsmirror :pkgname "hide-lines" :required nil) (:name hidesearch :description "Incremental search while hiding non-matching lines" :type emacsmirror :pkgname "hidesearch" :required nil) (:name hideshow-org :description nil :type emacsmirror :pkgname "hideshow-org" :required ((("hideshow" hideshow)))) (:name hier-imenu :description "Hierarchical index menus, using imenu.el" :type emacsmirror :pkgname "hier-imenu" :required ((("imenu" imenu)))) (:name highlight-completion :description "Completion with highlighted provisional text" :type emacsmirror :pkgname "highlight-completion" :required ((("ispell" ispell)))) (:name highlight-context-line :description "Highlight last visible line when scrolling" :type emacsmirror :pkgname "highlight-context-line" :required ((("advice" advice)))) (:name highlight-indentation :description "Function for highlighting indentation" :type emacsmirror :pkgname "highlight-indentation" :required nil) (:name highlight-parentheses :description "Highlight surrounding parentheses" :type emacsmirror :pkgname "highlight-parentheses" :required ((("cl" cl)))) (:name highlight-tail :description "Draw a colourful \"tail\" while you write" :type emacsmirror :pkgname "highlight-tail" :required ((("cl" cl)))) (:name hilit-swiftex :description "Enhancements for highlighting swiftex and doctex" :type emacsmirror :pkgname "hilit-swiftex" :required (((nil hilit19)))) (:name himarks-mode :description "Highlight marks in buffer" :type emacsmirror :pkgname "himarks-mode" :required nil) (:name history-ring :description nil :type emacsmirror :pkgname "history-ring" :required nil) (:name historyf :description "File history library like browser" :type emacsmirror :pkgname "historyf" :required ((("cl" cl)))) (:name hiwin :description "Visible active window mode" :type emacsmirror :pkgname "hiwin" :required nil) (:name hl-sentence :description "Highlight a sentence based on customizable face" :type emacsmirror :pkgname "hl-sentence" :required nil) (:name hll :description "Interactively toggle highlighting of lines" :type emacsmirror :pkgname "hll" :required nil) (:name hobo :description "Remote editting via SCP" :type emacsmirror :pkgname "hobo" :required nil) (:name horoscope :description "Generate horoscopes" :type emacsmirror :pkgname "horoscope" :required nil) (:name host-fns :description "Functions for querying host name information" :type emacsmirror :pkgname "host-fns" :required ((("file-fns" file-fns) ("string-fns" string-fns))) :depends (string-fns file-fns)) (:name howm :description "Wiki-like note-taking tool" :type emacsmirror :pkgname "howm" :required ((("cl" cl) ("easy-mmode" easy-mmode) ("emacs-core" font-lock) ("gnus" mailcap) ("migemo" migemo))) :depends (migemo gnus)) (:name howm-gtd :description "GTD with howm" :type emacsmirror :pkgname "howm-gtd" :required ((("cl" cl) ("howm" action-lock howm))) :depends (howm)) (:name hs :description nil :type emacsmirror :pkgname "hs" :required ((("auto-complete" auto-complete) ("cl" cl))) :depends (auto-complete)) (:name hsv2rgb :description "Transformation from HSV to RGB" :type emacsmirror :pkgname "hsv2rgb" :required nil) (:name html-bible :description nil :type emacsmirror :pkgname "html-bible" :required nil) (:name html-fold :description "Fold HTML elements" :type emacsmirror :pkgname "html-fold" :required ((("emacs-core" overlay)))) (:name html-from-latex :description "Assistance for creating HTML from LaTeX documents" :type emacsmirror :pkgname "html-from-latex" :required ((("replace-regexp-list" replace-regexp-list))) :depends (replace-regexp-list)) (:name html-helper-mode :description "Major mode for composing html files" :type emacsmirror :pkgname "html-helper-mode" :required ((("easymenu" easymenu) ("tempo" tempo)))) (:name html-key-chord-mode :description "Support html tagging key chord" :type emacsmirror :pkgname "html-key-chord-mode" :required ((("key-chord" key-chord) ("xyzzy" xyzzy))) :depends (xyzzy key-chord)) (:name html-lang-timestamp :description nil :type emacsmirror :pkgname "html-lang-timestamp" :required ((("cl" cl)))) (:name html-lite :description "Construct html with sexp" :type emacsmirror :pkgname "html-lite" :required nil) (:name html-parse :description "Html parser for Emacs" :type emacsmirror :pkgname "html-parse" :required ((("xml-parse" xml-parse)))) (:name html-php :description "Multi-mode PHP embedded in HTML" :type emacsmirror :pkgname "html-php" :required ((("multi-mode" multi-mode))) :depends (multi-mode)) (:name html-phrase-list :description "Read a phrase list from HTML" :type emacsmirror :pkgname "html-phrase-list" :required nil) (:name html-script-src :description "Insert <script src=\"..\"> for popular JavaScript libraries" :type emacsmirror :pkgname "html-script-src" :required nil) (:name html-tt :description "Template Toolkit for html-helper-mode" :type emacsmirror :pkgname "html-tt" :required ((("emacs-core" font-lock) ("html-helper-mode" html-helper-mode) ("tempo" tempo))) :depends (html-helper-mode)) (:name html5 :description "Named Character References in HTML5" :type emacsmirror :pkgname "html5" :required ((("cl" cl)))) (:name http-emacs :description "Simple HTTP POST" :type emacsmirror :pkgname "http-emacs" :required ((("cl" cl) ("emacs-core" font-lock) ("gnus" time-date) ("hexl" hexl) ("thingatpt" thingatpt))) :depends (gnus)) (:name http-headers :description nil :type emacsmirror :pkgname "http-headers" :required nil) (:name http-post-simple :description "HTTP POST requests using the url library" :type emacsmirror :pkgname "http-post-simple" :required ((("cl" cl) ("url" url url-http)))) (:name http-twiddle :description "Send & twiddle & resend HTTP requests" :type emacsmirror :pkgname "http-twiddle" :required ((("cl" cl) ("easy-mmode" easy-mmode) ("emacs-core" font-lock)))) (:name hugs-mode :description nil :type emacsmirror :pkgname "hugs-mode" :required ((("easymenu" easymenu) ("shell" shell)))) (:name hungry-delete :description nil :type emacsmirror :pkgname "hungry-delete" :required nil) (:name hyde :description nil :type emacsmirror :pkgname "hyde" :required nil) (:name hyperbole :description nil :type emacsmirror :pkgname "hyperbole" :required ((("browse-url" browse-url) ("calendar" cal-julian calendar) ("cc-mode" cc-mode) ("comint" comint) ("custom" custom) ("efs" efs efs-auto) ("emacs-obsolete" lmenu) ("info" info) ("mail-utils" mail-utils) ("mh-e" mh-e) ("rmail" rmail) ("sendmail" sendmail) ("vm" vm) (nil h-skip-bytec id-menubars sw-process x-mouse))) :depends (vm efs cc-mode)) (:name hyphenate :description "Hyphenate two adjacent words" :type emacsmirror :pkgname "hyphenate" :required nil) (:name i-ching :description "Cast an i-ching, and come up with a hexagram" :type emacsmirror :pkgname "i-ching" :required nil) (:name ibs :description "Windows like buffer selection mode by C-TAB" :type emacsmirror :pkgname "ibs" :required nil) (:name ibuffer-git :description "Show git status in ibuffer column" :type emacsmirror :pkgname "ibuffer-git" :required ((("cl" cl) ("ibuffer" ibuffer)))) (:name ibuffer-vc :description "Group ibuffer's list by VC project, or show VC status" :type emacsmirror :pkgname "ibuffer-vc" :required ((("cl" cl) ("ibuffer" ibuf-ext ibuffer) ("vc" vc-hooks)))) (:name icaps :description "ICaps a word (an annoying diversion)" :type emacsmirror :pkgname "icaps" :required nil) (:name icicles-iswitchb :description "Using iswitchb with Icicles" :type emacsmirror :pkgname "icicles-iswitchb" :required ((("iswitchb" iswitchb)))) (:name icmp-info :description "ICMP information tool" :type emacsmirror :pkgname "icmp-info" :required ((("cl" cl)))) (:name ics :description nil :type emacsmirror :pkgname "ics" :required ((("comint" comint) ("emacs-core" overlay)))) (:name id-manager :description "Id-password management " :type emacsmirror :pkgname "id-manager" :required ((("cl" cl) ("widget" wid-edit widget)))) (:name ide-skel :description "IDE skeleton for Emacs Lisp hackers" :type emacsmirror :pkgname "ide-skel" :required ((("cl" cl) ("complete" complete) ("emacs-core" mwheel) ("emhacks" tabbar) ("imenu" imenu) ("info" info) ("recentf" recentf) ("tree-widget" tree-widget))) :depends (emhacks)) (:name idebridge :description nil :type emacsmirror :pkgname "idebridge" :required nil) (:name identica-mode :description "Major mode for Identica" :type emacsmirror :pkgname "identica-mode" :required ((("cl" cl) ("emacs-core" image) ("gnus" parse-time) ("json" json) ("longlines" longlines) ("oauth" oauth) ("url" url url-http) ("w3m" w3m) ("xml" xml))) :depends (w3m oauth gnus)) (:name idl-font-lock :description "Font Lock configuration for OMG IDL (CORBA IDL) files" :type emacsmirror :pkgname "idl-font-lock" :required ((("emacs-core" font-lock)))) (:name idle-highlight-mode :description "Highlight the word the point is on" :type emacsmirror :pkgname "idle-highlight-mode" :required ((("thingatpt" thingatpt)))) (:name idle-require :description "Load elisp libraries while Emacs is idle" :type emacsmirror :pkgname "idle-require" :required nil) (:name idle-scroll :description "Scroll down a line when Emacs is idle" :type emacsmirror :pkgname "idle-scroll" :required nil) (:name idledo :description "Do stuff when emacs is idle." :type emacsmirror :pkgname "idledo" :required ((("apt-utils" apt-utils) ("bbdb" bbdb) ("cl" cl) ("fetch" fetch) ("vel" vel) ("woman" woman) (nil elder-beautify))) :depends (vel fetch bbdb apt-utils)) (:name idlwave :description "IDL editing mode for GNU Emacs" :type emacsmirror :pkgname "idlwave" :required ((("browse-url" browse-url) ("cl" cl) ("comint" comint) ("emacs-core" overlay) ("imenu" imenu) ("timer" timer) ("widget" wid-edit widget) ("xml" xml)))) (:name idna :description "Internationalizing Domain Names in Applications" :type emacsmirror :pkgname "idna" :required nil) (:name ido-ubiquitous :description "Use ido (nearly) everywhere" :type emacsmirror :pkgname "ido-ubiquitous" :required ((("ido" ido)))) (:name ido-yes-or-no :description "Use Ido to answer yes-or-no questions" :type emacsmirror :pkgname "ido-yes-or-no" :required ((("ido" ido)))) (:name iedit :description "Edit multiple regions with the same content simultaneously" :type emacsmirror :pkgname "iedit" :required ((("cl" cl) ("help-macro" help-macro)))) (:name ifile-gnus :description nil :type emacsmirror :pkgname "ifile-gnus" :required ((("gnus" gnus-int gnus-util))) :depends (gnus)) (:name ifind :description "An interface to `find` based on igrep.el" :type emacsmirror :pkgname "ifind" :required ((("custom" custom) ("igrep" igrep)))) (:name ifind-mode :description "A minor mode based on isearch, for interactively finding" :type emacsmirror :pkgname "ifind-mode" :required nil) (:name iflipb :description "Interactively flip between recently visited buffers" :type emacsmirror :pkgname "iflipb" :required nil) (:name igor-mode :description "Major mode for editing Igor Pro procedure files" :type emacsmirror :pkgname "igor-mode" :required nil) (:name igrep-next-error :description "Highlight text matched by `igrep'" :type emacsmirror :pkgname "igrep-next-error" :required ((("custom" custom) ("igrep" igrep)))) (:name ii-mode :description nil :type emacsmirror :pkgname "ii-mode" :required nil) (:name ilocate-library :description "Interactive replacement for locate-library with completion" :type emacsmirror :pkgname "ilocate-library" :required nil) (:name image+ :description "Image extensions" :type emacsmirror :pkgname "image+" :required ((("easy-mmode" easy-mmode) ("emacs-core" image)))) (:name iman :description "Call man & Info viewers with completion" :type emacsmirror :pkgname "iman" :required nil) (:name imapua :description "A purely IMAP based email client for EMACS" :type emacsmirror :pkgname "imapua" :required ((("cl" cl) ("gnus" imap message qp) ("timezone" timezone))) :depends (gnus)) (:name imdb :description nil :type emacsmirror :pkgname "imdb" :required nil) (:name imdb-adds-mode :description "Major mode for editing IMDb data submissions" :type emacsmirror :pkgname "imdb-adds-mode" :required ((("easymenu" easymenu)))) (:name imdbs :description "Compute movies statistic using your imdb vote history" :type emacsmirror :pkgname "imdbs" :required nil) (:name imenu-tree :description "A mode to view imenu using tree-widget" :type emacsmirror :pkgname "imenu-tree" :required ((("cl" cl) ("imenu" imenu) ("tree-mode" tree-mode) ("windata" windata))) :depends (windata tree-mode)) (:name immigrant :description "Delicatessen from other lisps" :type emacsmirror :pkgname "immigrant" :required ((("cl" cl)))) (:name impress :description nil :type emacsmirror :pkgname "impress" :required ((("cl" cl) ("org-mode" org))) :depends (org-mode)) (:name incr :description "Increase everything as you want" :type emacsmirror :pkgname "incr" :required ((("calculator" calculator) ("cl" cl) ("rect" rect) (nil hannum)))) (:name indent-hints-mode :description "Get some hints about whether your buffer is" :type emacsmirror :pkgname "indent-hints-mode" :required nil) (:name indent-tabs-maybe :description "Guess whether to use indent-tabs-mode when finding file" :type emacsmirror :pkgname "indent-tabs-maybe" :required nil) (:name inertial-scroll :description "Global minor mode for inertial scrolling " :type emacsmirror :pkgname "inertial-scroll" :required ((("deferred" deferred))) :depends (deferred)) (:name inf-js :description nil :type emacsmirror :pkgname "inf-js" :required ((("comint" comint) ("compile" compile)))) (:name inf-perl :description "Perl" :type emacsmirror :pkgname "inf-perl" :required ((("cl" cl) ("comint" comint) ("cperl-mode" cperl-mode) ("shell" shell))) :depends (cperl-mode)) (:name inf-ruby-bond :description "Bond autocompletion support for inf-ruby" :type emacsmirror :pkgname "inf-ruby-bond" :required nil) (:name inferior-apl :description nil :type emacsmirror :pkgname "inferior-apl" :required nil) (:name inferior-pop-mode :description "Poplog processes in a buffer" :type emacsmirror :pkgname "inferior-pop-mode" :required ((("comint" comint) ("easymenu" easymenu) ("pop-help-mode" pop-help-mode) ("pop-mode" pop-mode))) :depends (pop-mode pop-help-mode)) (:name infobook :description "Keep info node \"hot list\"" :type emacsmirror :pkgname "infobook" :required ((("info" info)))) (:name initsplit :description "Code to split customizations into different files" :type emacsmirror :pkgname "initsplit" :required ((("cl" cl) ("emacs-core" simple) ("find-func" find-func)))) (:name inkmacs :description "Inkscape Emacs fusion" :type emacsmirror :pkgname "inkmacs" :required ((("dbus" dbus) ("org-mode" org org-exp) (nil dbus-introspection dbus-proxy))) :depends (org-mode)) (:name inktc :description "Comint-based interface for Inktomi Tiny Chat" :type emacsmirror :pkgname "inktc" :required ((("comint" comint)))) (:name inline-html :description nil :type emacsmirror :pkgname "inline-html" :required nil) (:name inliner :description "Insert Tag for inline image of R graphics" :type emacsmirror :pkgname "inliner" :required ((("ess" ess-site))) :depends (ess)) (:name insert-construct :description "Insert programming constructs in various languages" :type emacsmirror :pkgname "insert-construct" :required ((("tempo" tempo)))) (:name insert-time :description nil :type emacsmirror :pkgname "insert-time" :required nil) (:name insert-time-string :description nil :type emacsmirror :pkgname "insert-time-string" :required nil) (:name insertions :description "Handy things to insert in buffers" :type emacsmirror :pkgname "insertions" :required nil) (:name inspec2bibtex :description nil :type emacsmirror :pkgname "inspec2bibtex" :required nil) (:name install :description "Package to ease installation of Elisp packages" :type emacsmirror :pkgname "install" :required ((("cl" cl) ("eshell" em-glob))) :depends (eshell)) (:name install-elisp :description "Simple Emacs Lisp installer" :type emacsmirror :pkgname "install-elisp" :required ((("find-func" find-func)))) (:name integers :description "Working with integers in the buffer" :type emacsmirror :pkgname "integers" :required ((("thingatpt" thingatpt)))) (:name integrate :description "Integrate a single p4 change from one branch to another" :type emacsmirror :pkgname "integrate" :required nil) (:name interpreter-minor :description "Provide navigation, clickability, folding, interpretation" :type emacsmirror :pkgname "interpreter-minor" :required nil) (:name invoice :description "Interface for personal contracting invoice system" :type emacsmirror :pkgname "invoice" :required ((("time-stamp" time-stamp)))) (:name io-mode :description "Major mode to edit Io language files in Emacs" :type emacsmirror :pkgname "io-mode" :required ((("cl" cl) ("comint" comint) ("emacs-core" font-lock) ("hideshow" hideshow) ("newcomment" newcomment)))) (:name io-mode-inf :description nil :type emacsmirror :pkgname "io-mode-inf" :required ((("comint" comint)))) (:name ioccur :description "Incremental occur" :type emacsmirror :pkgname "ioccur" :required ((("cl" cl) ("emacs-core" derived) ("outline" outline) ("wdired" wdired)))) (:name ion3 :description "Tight integration of emacs with the ion3 window manager" :type emacsmirror :pkgname "ion3" :required nil) (:name ios-config-mode :description nil :type emacsmirror :pkgname "ios-config-mode" :required nil) (:name ipa :description "In-place annotations" :type emacsmirror :pkgname "ipa" :required nil) (:name irc :description "A user interface for the Internet Relay Chat" :type emacsmirror :pkgname "irc" :required nil) (:name iread :description "Incremental X minor mode" :type emacsmirror :pkgname "iread" :required ((("cl" cl)))) (:name irish :description nil :type emacsmirror :pkgname "irish" :required ((("emacs-core" iso-transl)))) (:name irsim-mode :description nil :type emacsmirror :pkgname "irsim-mode" :required ((("cl" cl) ("emacs-core" font-lock)))) (:name isearch-all :description nil :type emacsmirror :pkgname "isearch-all" :required nil) (:name iso-html :description "Translating HTML to ISO-8859/1 while editing a file" :type emacsmirror :pkgname "iso-html" :required nil) (:name iso-sgml :description "Display SGML entity references as ISO 8859-1 characters" :type emacsmirror :pkgname "iso-sgml" :required nil) (:name ispell-highlight :description "MS-Word like spell-error highlithing" :type emacsmirror :pkgname "ispell-highlight" :required ((("ispell" ispell) (nil hyper-apropos)))) (:name iswitch-menu :description "Use iswitch to access menus" :type emacsmirror :pkgname "iswitch-menu" :required ((("cl" cl) ("iswitchb" iswitchb) ("tmm" tmm)))) (:name iswitchb-fc :description "Switch to buffers or file-cache entries with 1 command" :type emacsmirror :pkgname "iswitchb-fc" :required ((("cl" cl) ("filecache" filecache) ("iswitchb" iswitchb)))) (:name iswitchb-highlight :description "Highlighting extension for iswitchb" :type emacsmirror :pkgname "iswitchb-highlight" :required ((("iswitchb" iswitchb)))) (:name ite :description nil :type emacsmirror :pkgname "ite" :required nil) (:name itimer :description "List and operate on emacs timers" :type emacsmirror :pkgname "itimer" :required nil) (:name itunes :description "Utility functions to interact with iTunes" :type emacsmirror :pkgname "itunes" :required ((("cl" cl) ("xml" xml)))) (:name iuscheme :description "Scheme support, Indiana Univeristy style" :type emacsmirror :pkgname "iuscheme" :required ((("cmuscheme" cmuscheme)))) (:name jabber :description nil :type emacsmirror :pkgname "jabber" :required ((("assoc" assoc) ("button" button) ("cl" cl) ("ewoc" ewoc) ("festival" festival) ("gnus" dns format-spec mailcap sasl sha1 starttls time-date tls) ("hexrgb" hexrgb) ("hippie-exp" hippie-exp) ("jabber" jabber-autoloads) ("osd" osd) ("sgml-mode" sgml-mode) ("twittering-mode" ssl) ("widget" wid-edit widget) ("xml" xml) (nil password sha1-el)) (("dbus" dbus) ("gnus" password-cache))) :depends (twittering-mode osd gnus festival)) (:name jabber-chatx :description "Add the ability to remember and extract old messages" :type emacsmirror :pkgname "jabber-chatx" :required ((("jabber" jabber))) :depends (jabber)) (:name jam-mode :description nil :type emacsmirror :pkgname "jam-mode" :required ((("emacs-core" generic) (nil generic-mode)))) (:name java-complete :description "Java completion" :type emacsmirror :pkgname "java-complete" :required nil) (:name java-find :description nil :type emacsmirror :pkgname "java-find" :required nil) (:name java-mode-indent-annotations :description "Indentation for Java 5 annotations" :type emacsmirror :pkgname "java-mode-indent-annotations" :required nil) (:name java-open :description "Open source file of Java class name under point" :type emacsmirror :pkgname "java-open" :required nil) (:name javacc-mode :description nil :type emacsmirror :pkgname "javacc-mode" :required nil) (:name javascript :description "Major mode for editing JavaScript source text" :type emacsmirror :pkgname "javascript" :required nil) (:name javascript-mode :description "Major mode for editing javascript (.js) files" :type emacsmirror :pkgname "javascript-mode" :required ((("browse-url" browse-url) ("tempo" tempo)))) (:name javatools :description "Java functions to compile and run small java programs" :type emacsmirror :pkgname "javatools" :required nil) (:name jda :description "Jong-Gyu Development Assistant minor mode for Developers" :type emacsmirror :pkgname "jda" :required ((("anything" anything) ("cl" cl) ("hi-lock" hi-lock) ("ido" ido) ("imenu" imenu) ("thingatpt" thingatpt))) :depends (anything)) (:name jde-cflow :description nil :type emacsmirror :pkgname "jde-cflow" :required ((("jdee" jde) ("tempo" tempo))) :depends (jdee)) (:name jde-eclipse-compiler-server :description "Eclipse compiler as a compile server for JDEE" :type emacsmirror :pkgname "jde-eclipse-compiler-server" :required ((("flymake" flymake) ("jdee" jde jde-compile))) :depends (jdee)) (:name jde-findbugs :description "Findbugs interface for JDE" :type emacsmirror :pkgname "jde-findbugs" :required ((("jdee" jde-compile jde-package))) :depends (jdee)) (:name jde-hotspot :description nil :type emacsmirror :pkgname "jde-hotspot" :required ((("jdee" jde))) :depends (jdee)) (:name jde-maven :description "Use Apache Maven to build your JDE projects" :type emacsmirror :pkgname "jde-maven" :required nil) (:name jde-mvn :description "Maven2 integration for JDEE" :type emacsmirror :pkgname "jde-mvn" :required ((("cl" cl) ("jdee" efc) ("json" json) ("nxml-mode" nxml-mode) ("url" url) ("xml" xml))) :depends (jdee)) (:name jde-refactor :description "Refactoring support for JDEE" :type emacsmirror :pkgname "jde-refactor" :required nil) (:name jde-stack :description "Jump to source from Java stack trace" :type emacsmirror :pkgname "jde-stack" :required ((("jdee" jde))) :depends (jdee)) (:name jde-transmogrify :description nil :type emacsmirror :pkgname "jde-transmogrify" :required nil) (:name jdee :description "Integrated Development Environment for Java" :type emacsmirror :pkgname "jdee" :required ((("arc-mode" arc-mode) ("avl-tree" avl-tree) ("browse-url" browse-url) ("cc-mode" cc-fonts cc-mode) ("cedet" eieio speedbar) ("cl" cl) ("comint" comint) ("compile" compile) ("custom" cus-edit custom) ("easymenu" easymenu) ("eldoc" eldoc) ("elib" avltree) ("emacs-core" font-lock overlay sort) ("emacs-obsolete" lmenu) ("etags" etags) ("executable" executable) ("flymake" flymake) ("htmlize" htmlize) ("imenu" imenu) ("jdee" jde-autoload) ("regexp-opt" regexp-opt) ("reporter" reporter) ("tempo" tempo) ("thingatpt" thingatpt) ("tree-widget" tree-widget) ("widget" wid-edit widget) (nil semantic/senator))) :depends (elib cedet cc-mode)) (:name jdibug :description nil :type emacsmirror :pkgname "jdibug" :required ((("bindat" bindat) ("cc-mode" cc-mode) ("cedet" eieio semantic-java) ("easymenu" easymenu) ("tree-mode" tree-mode) (nil jdibug-java-expr-wy))) :depends (tree-mode cedet cc-mode)) (:name jekyll :description nil :type emacsmirror :pkgname "jekyll" :required nil) (:name jem-pkg :description "Some kind of elisp packaging for and by jemarch" :type emacsmirror :pkgname "jem-pkg" :required nil) (:name jenkins-watch :description nil :type emacsmirror :pkgname "jenkins-watch" :required nil) (:name jerkcity :description "Quote jerkcity comics" :type emacsmirror :pkgname "jerkcity" :required ((("cookie1" cookie1)))) (:name jess-mode :description "Jess editing mode" :type emacsmirror :pkgname "jess-mode" :required ((("comint" comint) ("lisp-mode" lisp-mode)))) (:name jfolding :description nil :type emacsmirror :pkgname "jfolding" :required ((("folding" folding) ("hideshow" hideshow)))) (:name jhg-cload :description "Byte compile elisp when loaded" :type emacsmirror :pkgname "jhg-cload" :required nil) (:name jhg-pine :description "Read a pine addressbook" :type emacsmirror :pkgname "jhg-pine" :required nil) (:name jiggle :description "Minor mode to jiggle cursor when changing buffers" :type emacsmirror :pkgname "jiggle" :required ((("advice" advice) ("cl" cl)))) (:name jinja2 :description nil :type emacsmirror :pkgname "jinja2" :required ((("sgml-mode" sgml-mode)))) (:name jiseki :description "Desktop for emacs" :type emacsmirror :pkgname "jiseki" :required nil) (:name joccur :description "An improved 'occur' implementation" :type emacsmirror :pkgname "joccur" :required nil) (:name joseph-autopair :description nil :type emacsmirror :pkgname "joseph-autopair" :required nil) (:name joseph-file-util :description "Function library about file and directory" :type emacsmirror :pkgname "joseph-file-util" :required nil) (:name joseph-scroll-screen :description "Scroll half screen down or up, and highlight current line" :type emacsmirror :pkgname "joseph-scroll-screen" :required nil) (:name joseph-single-dired :description nil :type emacsmirror :pkgname "joseph-single-dired" :required ((("dired" dired)))) (:name journal :description "Stuff for keeping a diary" :type emacsmirror :pkgname "journal" :required ((("cl" cl) ("generic-text" generic-text) ("html-helper-mode" html-helper-mode) ("time-stamp" time-stamp) ("versor" handsfree-read-number))) :depends (versor html-helper-mode generic-text)) (:name journal-at-exit :description "Stuff for keeping a diary as you quit emacs" :type emacsmirror :pkgname "journal-at-exit" :required ((("journal" journal))) :depends (journal)) (:name journal-search :description "Search my journal" :type emacsmirror :pkgname "journal-search" :required nil) (:name joystick :description "Lisp part of joystick interface for Emacs" :type emacsmirror :pkgname "joystick" :required nil) (:name jpeg-mode :description "Major mode for JPEG files" :type emacsmirror :pkgname "jpeg-mode" :required nil) (:name js-comint :description "Run javascript in an inferior process window" :type emacsmirror :pkgname "js-comint" :required ((("comint" comint)))) (:name js-doc :description "Insert JsDoc style comment easily" :type emacsmirror :pkgname "js-doc" :required nil) (:name js-doctor :description "Put paragraphs through doctor.el to make facetious replies" :type emacsmirror :pkgname "js-doctor" :required nil) (:name js2-mode :description "An improved JavaScript editing mode" :type emacsmirror :pkgname "js2-mode" :required ((("cc-mode" cc-cmds cc-engine cc-langs cc-mode) ("cl" cl) ("imenu" imenu))) :depends (cc-mode)) (:name jserial :description nil :type emacsmirror :pkgname "jserial" :required ((("jdee" jde))) :depends (jdee)) (:name jtags :description nil :type emacsmirror :pkgname "jtags" :required ((("cl" cl) ("etags" etags)))) (:name jtemplate :description "Helper for building java class" :type emacsmirror :pkgname "jtemplate" :required (nil (("easymenu" easymenu) (nil jtemplate-db)))) (:name judge-indent :description "Judge indent and tab widths" :type emacsmirror :pkgname "judge-indent" :required ((("cl" cl)))) (:name juick :description "Improvement reading juick@juick.com" :type emacsmirror :pkgname "juick" :required ((("browse-url" browse-url) ("button" button) ("google-maps" google-maps) ("jabber" jabber-chatbuffer jabber-si-common))) :depends (jabber google-maps)) (:name jump :description "Build functions which contextually jump between files" :type emacsmirror :pkgname "jump" :required ((("findr" findr) ("which-func" which-func) (nil inflections)))) (:name kbd-fns :description "Keyboard input and keymap utility functions" :type emacsmirror :pkgname "kbd-fns" :required ((("list-fns" list-fns))) :depends (list-fns)) (:name keats :description "Keybinding Cheats" :type emacsmirror :pkgname "keats" :required ((("easymenu" easymenu)))) (:name keep-buffers :description "Attempt to prevent named buffers from deletion" :type emacsmirror :pkgname "keep-buffers" :required nil) (:name keep-end :description nil :type emacsmirror :pkgname "keep-end" :required ((("cl" cl)))) (:name key-cast :description "Key comannd casting interface" :type emacsmirror :pkgname "key-cast" :required ((("cl" cl) ("easy-mmode" easy-mmode)))) (:name key-choices :description "Key Choices -- Also Viper has different colors in different modes" :type emacsmirror :pkgname "key-choices" :required ((("color-theme" color-theme) ("easymenu" easymenu) ("ergoemacs" ergoemacs-mode) ("vimpulse" vimpulse) ("viper" viper) ("viper-in-more-modes" viper-in-more-modes))) :depends (viper-in-more-modes vimpulse ergoemacs zenburn-theme)) (:name key-chord :description "Map pairs of simultaneously pressed keys to commands" :type emacsmirror :pkgname "key-chord" :required ((("advice" advice)))) (:name keymap-hacks :description "Some keymap-hacking code" :type emacsmirror :pkgname "keymap-hacks" :required nil) (:name keymap-utils :description "Keymap utilities" :type emacsmirror :pkgname "keymap-utils" :required ((("cl" cl)))) (:name keyring :description "A password manager" :type emacsmirror :pkgname "keyring" :required nil) (:name kibologize :description "Generate ravings about kibology, in the style of kibo" :type emacsmirror :pkgname "kibologize" :required nil) (:name kill-a-lawyer :description "Hide legal verbiage at the start of programs" :type emacsmirror :pkgname "kill-a-lawyer" :required nil) (:name kill-ring-search :description "Incremental search for the kill ring" :type emacsmirror :pkgname "kill-ring-search" :required ((("cl" cl)))) (:name killbuf :description "Emacs 19--style kill-buffer for emacs 18" :type emacsmirror :pkgname "killbuf" :required nil) (:name kis-interface :description "Extensions for kis-mode" :type emacsmirror :pkgname "kis-interface" :required ((("custom" cus-edit) ("dired" dired) ("kis-project" kis-project) ("widget" wid-edit widget))) :depends (kis-project)) (:name kis-project :description "Extensions for kis-mode" :type emacsmirror :pkgname "kis-project" :required nil) (:name kmacro-ring-list :description "List keyboard macros in a buffer" :type emacsmirror :pkgname "kmacro-ring-list" :required ((("cl" cl) ("emacs-core" kmacro pp) ("ewoc" ewoc)))) (:name kokopelli :description "List function declaration and jump to it" :type emacsmirror :pkgname "kokopelli" :required nil) (:name kuler-colors :description nil :type emacsmirror :pkgname "kuler-colors" :required nil) (:name labbook :description "Provides a labbook log" :type emacsmirror :pkgname "labbook" :required ((("add-log" add-log)))) (:name labbook-sign :description "Provides support for PGP signing the labbook" :type emacsmirror :pkgname "labbook-sign" :required ((("labbook" labbook) ("mailcrypt" mailcrypt))) :depends (mailcrypt labbook)) (:name lagn :description nil :type emacsmirror :pkgname "lagn" :required nil) (:name langhelp :description nil :type emacsmirror :pkgname "langhelp" :required nil) (:name langtool :description "Grammer check utility using LanguageTool" :type emacsmirror :pkgname "langtool" :required ((("cl" cl) ("flymake" flymake)))) (:name language-codes :description "Map between language names and language codes" :type emacsmirror :pkgname "language-codes" :required nil) (:name lat1conv :description "Convert latin-1 chars to 7bit ascii equivalents" :type emacsmirror :pkgname "lat1conv" :required nil) (:name later-do :description "Execute lisp code ... later" :type emacsmirror :pkgname "later-do" :required nil) (:name latex-frame-mode :description "Minor mode for latex beamer geeks equipped with folding power" :type emacsmirror :pkgname "latex-frame-mode" :required nil) (:name latex-spread :description nil :type emacsmirror :pkgname "latex-spread" :required nil) (:name latex-symbols :description "Display tables of (La)TeX symbols in XEmacs" :type emacsmirror :pkgname "latex-symbols" :required nil) (:name latin-mode :description nil :type emacsmirror :pkgname "latin-mode" :required nil) (:name lazy-desktop :description "Modify desktop to open slowly in the idle-cycle" :type emacsmirror :pkgname "lazy-desktop" :required nil) (:name lbdb :description nil :type emacsmirror :pkgname "lbdb" :required ((("cl" cl)))) (:name ldap-mode :description "Major modes for editing LDAP schema and LDIF files" :type emacsmirror :pkgname "ldap-mode" :required nil) (:name ldif-ns :description "Convert name service records to LDIF records" :type emacsmirror :pkgname "ldif-ns" :required nil) (:name ldoc :description "Extract and format documentation from lisp files" :type emacsmirror :pkgname "ldoc" :required ((("org-mode" org))) :depends (org-mode)) (:name ldots :description "Changes three dots to `\\ldots' on the fly" :type emacsmirror :pkgname "ldots" :required nil) (:name ldraw-mode :description "Simple major mode for editing LDraw DAT-files" :type emacsmirror :pkgname "ldraw-mode" :required ((("cl" cl) ("w3" w3))) :depends (w3)) (:name lectionary :description nil :type emacsmirror :pkgname "lectionary" :required nil) (:name ledger :description "Helper code for use with the \"ledger\" command-line tool" :type emacsmirror :pkgname "ledger" :required ((("cl" cl) ("eshell" esh-arg esh-util) ("pcomplete" pcomplete) ("rx" rx))) :depends (eshell)) (:name legalese :description "Add legalese to your program files" :type emacsmirror :pkgname "legalese" :required ((("finder" finder)))) (:name less :description "Less style view mode" :type emacsmirror :pkgname "less" :required nil) (:name less-css-mode :description "Major mode for editing LESS CSS files (lesscss.org)" :type emacsmirror :pkgname "less-css-mode" :required ((("compile" compile) ("emacs-core" derived) ("flymake" flymake)))) (:name less-mode :description "Major mode for editing Less files" :type emacsmirror :pkgname "less-mode" :required ((("compile" compile) ("emacs-core" derived)))) (:name lessage :description "Like message but less intrusive" :type emacsmirror :pkgname "lessage" :required nil) (:name lff :description nil :type emacsmirror :pkgname "lff" :required nil) (:name li3 :description nil :type emacsmirror :pkgname "li3" :required ((("anything" anything) ("cake" cake-inflector) ("cl" cl) ("easy-mmode" easy-mmode) ("historyf" historyf)) (("anything" anything-show-completion) ("imenu" imenu) ("tail" tail))) :depends (historyf cake anything)) (:name ligeti :description "Process-music composition system for csound" :type emacsmirror :pkgname "ligeti" :required ((("cl" cl) ("csound-x" csound-x))) :depends (csound-x)) (:name light :description "Lightning completion" :type emacsmirror :pkgname "light" :required ((("cl" cl) ("custom" custom) ("ispell" ispell)))) (:name like-pull-hidden-other :description nil :type emacsmirror :pkgname "like-pull-hidden-other" :required nil) (:name lilypond :description "Major mode for editing GNU LilyPond music scores" :type emacsmirror :pkgname "lilypond" :required ((("cl" cl) ("compile" compile) ("easymenu" easymenu) ("ecasound" ecasound) (nil ilisp)))) (:name lilypond-hook :description "Automatically display and play lilypond Score" :type emacsmirror :pkgname "lilypond-hook" :required nil) (:name line-comment-banner :description "Comment a line in a banner style" :type emacsmirror :pkgname "line-comment-banner" :required ((("cl" cl)))) (:name linear-undo :description "Undo/redo without making undo tree" :type emacsmirror :pkgname "linear-undo" :required ((("cl" cl)))) (:name linemenu :description nil :type emacsmirror :pkgname "linemenu" :required nil) (:name lines :description nil :type emacsmirror :pkgname "lines" :required ((("cl" cl)))) (:name lingr :description "Lingr Client for GNU Emacs" :type emacsmirror :pkgname "lingr" :required ((("cl" cl) ("gnus" parse-time) ("json" json) ("timezone" timezone) ("url" url))) :depends (gnus)) (:name linkd :description "Make hypertext with active links in any buffer" :type emacsmirror :pkgname "linkd" :required ((("cl" cl) ("easymenu" easymenu)) (("htmlize" htmlize)))) (:name linkify :description "Create clickable links to lines in files" :type emacsmirror :pkgname "linkify" :required nil) (:name linmag-mode :description "Editing for the Linux Magazine" :type emacsmirror :pkgname "linmag-mode" :required nil) (:name linphone :description nil :type emacsmirror :pkgname "linphone" :required ((("timer" timer)))) (:name linum+ :description "Extension of linum" :type emacsmirror :pkgname "linum+" :required ((("linum" linum)))) (:name linum-off :description "Provides an interface for turning line-numbering off" :type emacsmirror :pkgname "linum-off" :required ((("linum" linum)))) (:name linuxproc :description "File handlers for /proc" :type emacsmirror :pkgname "linuxproc" :required nil) (:name lisp-re :description "Transform REs written in a Lisp like notation to strings" :type emacsmirror :pkgname "lisp-re" :required nil) (:name lispxmp :description "Automagic emacs lisp code annotation" :type emacsmirror :pkgname "lispxmp" :required ((("cl" cl) ("emacs-core" pp) ("newcomment" newcomment)) (("paredit" paredit)))) (:name list-fns :description "List-searching and manipulation functions" :type emacsmirror :pkgname "list-fns" :required nil) (:name list-processes+ :description nil :type emacsmirror :pkgname "list-processes+" :required ((("cl" cl)))) (:name list-register :description "List register" :type emacsmirror :pkgname "list-register" :required nil) (:name listbuf :description "Build buffer menu for use in Buff-menu-mode" :type emacsmirror :pkgname "listbuf" :required nil) (:name lively :description nil :type emacsmirror :pkgname "lively" :required ((("cl" cl)))) (:name ljupdate :description "Misc elisp utilities for ljupdate" :type emacsmirror :pkgname "ljupdate" :required ((("cl" cl) ("emacs-core" autoload md5) ("gnus" message) ("http-emacs" http-post) ("pcomplete" pcomplete) ("sendmail" sendmail) ("viper" viper-cmd))) :depends (http-emacs gnus)) (:name lnk :description "Follow Microsoft Explorer shortcuts" :type emacsmirror :pkgname "lnk" :required nil) (:name load-directory :description nil :type emacsmirror :pkgname "load-directory" :required nil) (:name load-fns :description "Library loading functions" :type emacsmirror :pkgname "load-fns" :required nil) (:name load-relative :description "Relative file load (within a multi-file Emacs package)" :type emacsmirror :pkgname "load-relative" :required nil) (:name localized-source :description "Show localization for source files, e.g. translations of comments and perhaps names" :type emacsmirror :pkgname "localized-source" :required nil) (:name locdict :description "Using a local Webster dictionary" :type emacsmirror :pkgname "locdict" :required nil) (:name lodgemacs :description "Pasting to paste.pocoo.org or other instances of LodgeIt" :type emacsmirror :pkgname "lodgemacs" :required ((("browse-url" browse-url) ("json" json) ("url" url)))) (:name logger :description "Log work time and activities" :type emacsmirror :pkgname "logger" :required ((("assoc" assoc)))) (:name lolcode-mode :description "Major mode for editing LOLCODE" :type emacsmirror :pkgname "lolcode-mode" :required nil) (:name longlines-jp :description "Automatically wrap long lines in Japanese text" :type emacsmirror :pkgname "longlines-jp" :required nil) (:name look-mode :description "Quick file viewer for image and text file browsing" :type emacsmirror :pkgname "look-mode" :required (nil (("eimp" eimp)))) (:name lookout :description "Read CSV formatted diary and address data" :type emacsmirror :pkgname "lookout" :required ((("bbdb" bbdb) ("csv" csv))) :depends (csv bbdb)) (:name lookup :description "Search interface to electronic dictionaries" :type emacsmirror :pkgname "lookup" :required ((("cl" cl) ("cookie1" cookie1) ("descr-text" descr-text) ("emacs-core" ucs-normalize) ("gnus" hmac-md5) ("json" json) ("navi2ch" navi2ch navi2ch-bookmark) ("semi" mime-view) ("url" url-http url-parse) ("view" view) ("w3m" w3m))) :depends (w3m semi navi2ch gnus)) (:name loop-constructs :description "Sugary looping forms for emacs-lisp" :type emacsmirror :pkgname "loop-constructs" :required ((("cl" cl)))) (:name loops :description "Detect loops in lists" :type emacsmirror :pkgname "loops" :required ((("cl" cl)))) (:name lorem-ipsum :description "Insert dummy pseudo Latin text" :type emacsmirror :pkgname "lorem-ipsum" :required nil) (:name lotto-check :description "Simple API for Korean Lotto 645" :type emacsmirror :pkgname "lotto-check" :required ((("cl" cl)))) (:name lout-mode :description "An Emacs major-mode for editing Lout source" :type emacsmirror :pkgname "lout-mode" :required ((("cl" cl) ("compile" compile) ("easymenu" easymenu) ("reporter" reporter)))) (:name lru-yank :description "Least Recently Used stacking for kill-ring" :type emacsmirror :pkgname "lru-yank" :required ((("cl" cl)))) (:name lsdb :description "The Lovely Sister Database" :type emacsmirror :pkgname "lsdb" :required ((("apel" pces poem product static) ("emacs-core" image) ("flim" mime) ("mew" mew))) :depends (mew flim apel)) (:name lsl-mode :description nil :type emacsmirror :pkgname "lsl-mode" :required ((("cc-mode" cc-bytecomp cc-mode) ("thingatpt" thingatpt))) :depends (cc-mode)) (:name lua-block :description "Highlight matching block" :type emacsmirror :pkgname "lua-block" :required ((("lua-mode" lua-mode))) :depends (lua-mode)) (:name lua-mode :description "A major-mode for editing Lua scripts" :type emacsmirror :pkgname "lua-mode" :required ((("cl" cl) ("comint" comint)))) (:name lude :description "Hacks for quickly finding LUDE-related files" :type emacsmirror :pkgname "lude" :required nil) (:name lui :description "Linewise User Interface" :type emacsmirror :pkgname "lui" :required nil) (:name lunar-mode-line :description "Display lunar phase in mode line of Emacs" :type emacsmirror :pkgname "lunar-mode-line" :required ((("calendar" calendar lunar) ("timer" timer)))) (:name lusty-explorer :description "Dynamic filesystem explorer and buffer switcher" :type emacsmirror :pkgname "lusty-explorer" :required ((("cl" cl) ("dired" dired) ("ido" ido)))) (:name lynx :description nil :type emacsmirror :pkgname "lynx" :required nil) (:name lyric-mode :description "Major mode for editing lyric (.lrc) files" :type emacsmirror :pkgname "lyric-mode" :required nil) (:name lyrics :description nil :type emacsmirror :pkgname "lyrics" :required ((("mingus" libmpdee) ("url" url url-http))) :depends (mingus)) (:name lyricwiki :description "An Emacs mode to fetch lyrics" :type emacsmirror :pkgname "lyricwiki" :required ((("url" url)))) (:name m56k :description "Major mode for editing Motorola's DSP56300 assembly code" :type emacsmirror :pkgname "m56k" :required ((("advice" advice) ("cl" cl) ("emacs-obsolete" lucid)))) (:name mac-key-mode :description "Provide mac-style key bindings on Carbon Emacs" :type emacsmirror :pkgname "mac-key-mode" :required ((("redo" redo))) :depends (redo)) (:name mactag :description "Mode for automatically handle multiple tags files with Mactag rubygem" :type emacsmirror :pkgname "mactag" :required nil) (:name magit :description "Control Git from Emacs" :type emacsmirror :pkgname "magit" :required ((("assoc" assoc) ("cl" cl) ("diff-mode" diff-mode) ("easymenu" easymenu) ("ediff" ediff) ("emacs-core" server) ("ido" ido) ("iswitchb" iswitchb) ("log-edit" log-edit) ("pcomplete" pcomplete) ("view" view)))) (:name magithub :description "Magit extensions for using GitHub" :type emacsmirror :pkgname "magithub" :required ((("cl" cl) ("crm" crm) ("json" json) ("magit" magit) ("url" url))) :depends (magit)) (:name magpie :description "Acronym expansion and others. " :type emacsmirror :pkgname "magpie" :required ((("cl" cl)))) (:name mail-directory :description "Set up mail buffers for sending photos" :type emacsmirror :pkgname "mail-directory" :required ((("cl" cl)))) (:name mail-field :description "Emulate Sun mailtool field movement" :type emacsmirror :pkgname "mail-field" :required nil) (:name mail-inserts :description "Handy things to insert in outgoing mail" :type emacsmirror :pkgname "mail-inserts" :required (((nil aw)))) (:name mail-reorder-headers :description "Re-arrange mail headers into pleasing order" :type emacsmirror :pkgname "mail-reorder-headers" :required ((("fmailutils" fmailutils) ("rfc822" rfc822))) :depends (fmailutils)) (:name mail-signature :description "Add context sensitive signature" :type emacsmirror :pkgname "mail-signature" :required nil) (:name mailcrypt :description nil :type emacsmirror :pkgname "mailcrypt" :required ((("comint" comint) ("easymenu" easymenu) ("itimer" itimer) ("rfc822" rfc822) ("timer" timer))) :depends (itimer)) (:name mailq :description "A major mode for `mailq' interaction" :type emacsmirror :pkgname "mailq" :required ((("emacs-core" simple)))) (:name mailrc :description nil :type emacsmirror :pkgname "mailrc" :required ((("cl" cl)))) (:name mailrc-mode :description "Major mode for editing .mailrc files" :type emacsmirror :pkgname "mailrc-mode" :required nil) (:name mailto-checker :description nil :type emacsmirror :pkgname "mailto-checker" :required nil) (:name mailx :description "A front-end to mailx" :type emacsmirror :pkgname "mailx" :required ((("emacs-core" font-lock) ("mail-utils" mail-utils)))) (:name majordomo :description nil :type emacsmirror :pkgname "majordomo" :required ((("cl" cl) ("emacs-core" backquote)))) (:name make-hex :description "Functions for drawing small ASCII hexes" :type emacsmirror :pkgname "make-hex" :required nil) (:name malabar-mode :description "A better Java mode for Emacs" :type emacsmirror :pkgname "malabar-mode" :required ((("ansi-color" ansi-color) ("arc-mode" arc-mode) ("cc-mode" cc-cmds cc-subword cc-vars) ("cedet" eieio eieio-base eieio-opt semantic semantic-ctxt semantic-find semantic-ia semantic-lex semantic-load semantic-wisent semanticdb-search srecode srecode-getset srecode-map wisent-comp wisent-java) ("cl" cl) ("comint" comint) ("compile" compile) ("easymenu" easymenu) ("fringe-helper" fringe-helper) ("skeleton" skeleton) ("subword" subword) ("thingatpt" thingatpt) (nil semantic/ctxt semantic/db-find semantic/find semantic/ia semantic/lex semantic/wisent semantic/wisent/comp semantic/wisent/java-tags srecode/getset srecode/map srecode/semantic))) :depends (cedet cc-mode)) (:name malyon :description "Mode to execute z code files version 3, 5, 8" :type emacsmirror :pkgname "malyon" :required nil) (:name manued :description nil :type emacsmirror :pkgname "manued" :required ((("easymenu" easymenu)))) (:name map-win :description "Run expressions for various windows" :type emacsmirror :pkgname "map-win" :required ((("emacs-core" backquote)))) (:name maple-mode :description nil :type emacsmirror :pkgname "maple-mode" :required ((("shell" shell)))) (:name mapreplace :description nil :type emacsmirror :pkgname "mapreplace" :required nil) (:name mark-select :description "Mark and select interface" :type emacsmirror :pkgname "mark-select" :required ((("cl" cl)))) (:name markdown-mode :description "Emacs Major mode for Markdown-formatted text files" :type emacsmirror :pkgname "markdown-mode" :required ((("cl" cl) ("easymenu" easymenu) ("emacs-core" font-lock) ("outline" outline) ("thingatpt" thingatpt)))) (:name markerpen :description "Colour and highlight arbitrary sections of buffers" :type emacsmirror :pkgname "markerpen" :required nil) (:name math :description nil :type emacsmirror :pkgname "math" :required ((("comint" comint) ("shell" shell)))) (:name mathematica :description nil :type emacsmirror :pkgname "mathematica" :required nil) (:name maths-menu :description "Insert maths characters from a menu" :type emacsmirror :pkgname "maths-menu" :required nil) (:name maude-mode :description "Emacs mode for the programming language Maude" :type emacsmirror :pkgname "maude-mode" :required ((("ansi-color" ansi-color) ("cl" cl) ("comint" comint) ("compile" compile) ("easymenu" easymenu) ("emacs-core" derived font-lock) ("imenu" imenu) ("newcomment" newcomment) ("rx" rx)))) (:name maven-mode :description nil :type emacsmirror :pkgname "maven-mode" :required nil) (:name mc-gpg-file-mode :description "Automatically gpg decrypt/encrypt files ending with '.gpg'" :type emacsmirror :pkgname "mc-gpg-file-mode" :required ((("mailcrypt" mailcrypt))) :depends (mailcrypt)) (:name mcalc :description nil :type emacsmirror :pkgname "mcalc" :required ((("cl" cl)))) (:name mcomplete :description "Minibuffer completion with prefix and substring matching" :type emacsmirror :pkgname "mcomplete" :required nil) (:name md-readme :description "Markdown-formatted READMEs for your ELisp" :type emacsmirror :pkgname "md-readme" :required nil) (:name mdee :description nil :type emacsmirror :pkgname "mdee" :required ((("javascript-mode" javascript-mode))) :depends (javascript-mode)) (:name mdfind :description "Interface to OS X's mdfind command" :type emacsmirror :pkgname "mdfind" :required ((("org-mode" org))) :depends (org-mode)) (:name media-files :description nil :type emacsmirror :pkgname "media-files" :required ((("cl" cl)))) (:name mediawiki :description "Mediawiki frontend" :type emacsmirror :pkgname "mediawiki" :required ((("cl" cl) ("gnus" mm-url mml) ("ring" ring) ("url" url-http))) :depends (gnus)) (:name meditate :description "Talk to ZenMOO and optionally make emacs meditate for you" :type emacsmirror :pkgname "meditate" :required nil) (:name member-functions :description "Expand C++ member functions into implementation file" :type emacsmirror :pkgname "member-functions" :required ((("cl" cl)))) (:name memo-pop :description "Helps you pop up and pop out a specific file buffer easily" :type emacsmirror :pkgname "memo-pop" :required nil) (:name memory-monitor :description nil :type emacsmirror :pkgname "memory-monitor" :required nil) (:name mentor :description "Control rtorrent from GNU Emacs" :type emacsmirror :pkgname "mentor" :required ((("cl" cl) ("xml-rpc" xml-rpc))) :depends (xml-rpc)) (:name message-log :description nil :type emacsmirror :pkgname "message-log" :required nil) (:name message-utils :description nil :type emacsmirror :pkgname "message-utils" :required ((("custom" custom) ("gnus" message))) :depends (gnus)) (:name message-x :description "Customizable completion in message headers" :type emacsmirror :pkgname "message-x" :required ((("gnus" message))) :depends (gnus)) (:name messkeyw :description "Automatic keyword support during composition" :type emacsmirror :pkgname "messkeyw" :required ((("cl" cl)))) (:name metapost-mode+ :description "Drawing with metapost interactively in Emacs" :type emacsmirror :pkgname "metapost-mode+" :required ((("doc-view" doc-view)))) (:name metaweblog :description "An emacs library to access metaweblog based weblogs" :type emacsmirror :pkgname "metaweblog" :required ((("xml-rpc" xml-rpc))) :depends (xml-rpc)) (:name mew :description "Messaging in the Emacs World" :type emacsmirror :pkgname "mew" :required ((("ange-ftp" ange-ftp) ("emacs-core" faces) ("timer" timer) ("w3m" mew-w3m))) :depends (w3m)) (:name mew-ical :description "ICalendar support for Mew" :type emacsmirror :pkgname "mew-ical" :required ((("browse-url" browse-url)))) (:name mew-unread :description nil :type emacsmirror :pkgname "mew-unread" :required ((("mew" mew))) :depends (mew)) (:name mgp :description "Magic Point tool" :type emacsmirror :pkgname "mgp" :required nil) (:name mgrep :description "Search in the directory previously specified" :type emacsmirror :pkgname "mgrep" :required ((("compile" compile)))) (:name mh-crypt :description "Manage encrypted or compressed MH messages" :type emacsmirror :pkgname "mh-crypt" :required ((("advice" advice) ("crypt++" crypt++) ("mh-e" mh-e) (nil mh-pick)))) (:name mhc :description "MH Calendar" :type emacsmirror :pkgname "mhc" :required ((("apel" pcustom poe static) ("cl" cl) ("easymenu" easymenu) ("emacs-core" bytecomp) ("flim" eword-decode) ("gnus" gnus-art gnus-sum message nnheader nnmail nnoo) ("mew" mew) ("semi" mime-edit) ("wanderlust" elmo-localdir wl-summary) (nil bitmap cmail))) :depends (wanderlust semi mew gnus flim apel)) (:name midje-mode :description "Minor mode for Midje tests" :type emacsmirror :pkgname "midje-mode" :required ((("clojure-mode" clojure-mode) ("newcomment" newcomment) ("slime" slime))) :depends (slime clojure-mode)) (:name migemo :description nil :type emacsmirror :pkgname "migemo" :required nil) (:name mine-sweeper-auto :description "Automated mine sweeping for mine-sweeper.el" :type emacsmirror :pkgname "mine-sweeper-auto" :required ((("cl" cl)))) (:name minesweeper :description nil :type emacsmirror :pkgname "minesweeper" :required nil) (:name mingus :description "Time-stamp: <2011-02-04 10:12:13 sharik>" :type emacsmirror :pkgname "mingus" :required ((("cl" cl) ("custom" custom) ("dired" dired) ("edebug" edebug) ("gnus" time-date) ("reporter" reporter) ("sendmail" sendmail) ("thingatpt" thingatpt) ("url" url) ("widget" wid-edit) (nil taggit))) :depends (gnus)) (:name minibuffer-complete-cycle :description "Cycle through the *Completions* buffer" :type emacsmirror :pkgname "minibuffer-complete-cycle" :required ((("custom" custom)))) (:name minimal :description "Minimalist Emacs appearance" :type emacsmirror :pkgname "minimal" :required nil) (:name minimap :description "Minimap sidebar for Emacs" :type emacsmirror :pkgname "minimap" :required nil) (:name minor-map :description nil :type emacsmirror :pkgname "minor-map" :required nil) (:name minor-mode-hack :description "Hack of minor-modes" :type emacsmirror :pkgname "minor-mode-hack" :required nil) (:name miranda-mode :description nil :type emacsmirror :pkgname "miranda-mode" :required ((("easymenu" easymenu) ("shell" shell)))) (:name mirror-mode :description "Insert parens and string quotes in pairs" :type emacsmirror :pkgname "mirror-mode" :required ((("cl" cl)))) (:name misc-elisp-tools :description "Assorted elisp-related tools" :type emacsmirror :pkgname "misc-elisp-tools" :required nil) (:name misc-patchup :description "Various mending of pages" :type emacsmirror :pkgname "misc-patchup" :required ((("webmaster-macros" webmaster-macros))) :depends (webmaster-macros)) (:name mizar :description "Mizar.el -- Mizar Mode for Emacs" :type emacsmirror :pkgname "mizar" :required ((("cedet" speedbar) ("cl" cl) ("comint" comint) ("compile" compile) ("dabbrev" dabbrev) ("easymenu" easymenu) ("emacs-core" font-lock) ("etags" etags) ("executable" executable) ("hideshow" hideshow) ("imenu" imenu) ("info" info) ("shell" shell) ("term" term)) (("xml" xml))) :depends (cedet)) (:name mk-project :description "Lightweight project handling" :type emacsmirror :pkgname "mk-project" :required ((("cl" cl) ("grep" grep) ("thingatpt" thingatpt)))) (:name mk-project+ :description "Enhancement of `mk-project.el'" :type emacsmirror :pkgname "mk-project+" :required ((("mk-project" mk-project))) :depends (mk-project)) (:name mkback :description nil :type emacsmirror :pkgname "mkback" :required ((("cl" cl)))) (:name mm2mw :description "A MoinMoin 1.2.x -> MediaWiki 1.7.x converter" :type emacsmirror :pkgname "mm2mw" :required ((("url" url)))) (:name mma :description nil :type emacsmirror :pkgname "mma" :required ((("cl" cl) (nil func-menu)))) (:name mmm-mako :description "MMM submode class for Mako Templates" :type emacsmirror :pkgname "mmm-mako" :required ((("mmm-mode" mmm-auto mmm-compat mmm-vars))) :depends (mmm-mode)) (:name mmm-mode :description "Allow Multiple Major Modes in a buffer" :type emacsmirror :pkgname "mmm-mode" :required ((("cl" cl) ("custom" custom) ("emacs-core" font-lock overlay) ("regexp-opt" regexp-opt)))) (:name mo-git-blame :description "An interactive, iterative 'git blame' mode for Emacs" :type emacsmirror :pkgname "mo-git-blame" :required ((("cl" cl) ("easymenu" easymenu) ("ido" ido)))) (:name mo-rot13 :description "Convert text buffer to and from ROT13" :type emacsmirror :pkgname "mo-rot13" :required ((("rot13" rot13)))) (:name moccur-edit :description "Apply replaces to multiple files" :type emacsmirror :pkgname "moccur-edit" :required ((("color-moccur" color-moccur))) :depends (color-moccur)) (:name mode-line-frame :description "Create information frame like mode-line^" :type emacsmirror :pkgname "mode-line-frame" :required ((("cl" cl)))) (:name modula3 :description nil :type emacsmirror :pkgname "modula3" :required ((("cl" cl)))) (:name mogo :description "Simple MoGo client" :type emacsmirror :pkgname "mogo" :required ((("cl" cl)))) (:name mojo :description "Interactive functions for webOS development" :type emacsmirror :pkgname "mojo" :required ((("json" json)))) (:name molpro :description nil :type emacsmirror :pkgname "molpro" :required nil) (:name mongo :description "MongoDB driver for Emacs Lisp" :type emacsmirror :pkgname "mongo" :required ((("cl" cl)))) (:name mongolian :description "Mongolian input method" :type emacsmirror :pkgname "mongolian" :required nil) (:name monk :description "For bleeding hearts," :type emacsmirror :pkgname "monk" :required ((("cl" cl) ("dired" dired) ("dired-aux" dired-aux) ("emacs-core" pp) ("timer" timer) (nil timidity)))) (:name monky :description "Control Hg from Emacs" :type emacsmirror :pkgname "monky" :required ((("cl" cl) ("pcomplete" pcomplete)))) (:name moo :description "Comint-based emacs interface for MOOs" :type emacsmirror :pkgname "moo" :required nil) (:name motion-fns :description "Motion and insertion functions" :type emacsmirror :pkgname "motion-fns" :required nil) (:name mouse-drag-fix :description "Bug fixed version of mouse-drag" :type emacsmirror :pkgname "mouse-drag-fix" :required ((("mouse-drag" mouse-drag)))) (:name mouse-focus :description "Focus follows mouse in Emacs windows" :type emacsmirror :pkgname "mouse-focus" :required nil) (:name mousymacro :description nil :type emacsmirror :pkgname "mousymacro" :required nil) (:name move-and :description "Move point and perform some other action" :type emacsmirror :pkgname "move-and" :required ((("cl" cl)))) (:name move-pictures :description nil :type emacsmirror :pkgname "move-pictures" :required nil) (:name move-text :description nil :type emacsmirror :pkgname "move-text" :required nil) (:name movie :description "Playing movies" :type emacsmirror :pkgname "movie" :required nil) (:name mozart :description nil :type emacsmirror :pkgname "mozart" :required ((("comint" comint) ("compile" compile) ("custom" custom) ("emacs-core" font-lock) ("outline" outline)))) (:name mp3-tools :description "A simple MP3 Tag Editor for GNU Emacs" :type emacsmirror :pkgname "mp3-tools" :required ((("easymenu" easymenu) ("widget" wid-edit widget)))) (:name mp3play :description nil :type emacsmirror :pkgname "mp3play" :required nil) (:name mp3player :description "Interface to mpg123 or winamp" :type emacsmirror :pkgname "mp3player" :required ((("cl" cl) ("dired" dired) ("emacs-core" font-lock) ("thingatpt" thingatpt) ("widget" wid-edit widget)))) (:name mpg123 :description nil :type emacsmirror :pkgname "mpg123" :required ((("emacs-core" overlay) ("smart-dnd" smart-dnd))) :depends (smart-dnd)) (:name mplayer-mode :description nil :type emacsmirror :pkgname "mplayer-mode" :required nil) (:name mpris-dbus :description "MPRIS call via dbus" :type emacsmirror :pkgname "mpris-dbus" :required ((("dbus" dbus)))) (:name msearch :description "Search for mouse selection" :type emacsmirror :pkgname "msearch" :required nil) (:name mss :description nil :type emacsmirror :pkgname "mss" :required nil) (:name mthesaur :description "Thesaurus look-up of a word or phrase" :type emacsmirror :pkgname "mthesaur" :required ((("cl" cl) ("thingatpt" thingatpt)))) (:name mtools :description "Emacs front-end to mtools" :type emacsmirror :pkgname "mtools" :required ((("dired" dired)))) (:name mtorus :description "Navigation with marks on a ring of rings (torus)" :type emacsmirror :pkgname "mtorus" :required ((("cl" cl) ("timer" timer) ("tree-widget" tree-widget)))) (:name mudel :description "The Mudel MUD Client" :type emacsmirror :pkgname "mudel" :required ((("comint" comint)))) (:name mule-menu :description "Add multiple language support for menubar" :type emacsmirror :pkgname "mule-menu" :required ((("cl" cl) ("emacs-core" pp) ("tmm" tmm)))) (:name multi-comment :description "Multi-mode handling of comments and strings" :type emacsmirror :pkgname "multi-comment" :required ((("emacs-core" syntax) ("multi-mode" multi-mode) ("newcomment" newcomment))) :depends (multi-mode)) (:name multi-eshell :description "Create and manage multiple shells within Emacs" :type emacsmirror :pkgname "multi-eshell" :required nil) (:name multi-find-file :description "Find multiple files in one command" :type emacsmirror :pkgname "multi-find-file" :required nil) (:name multi-mode :description "Support for multiple major modes" :type emacsmirror :pkgname "multi-mode" :required ((("advice" advice) ("emacs-core" font-lock) ("imenu" imenu)))) (:name multi-project :description "Easily work with multiple projects" :type emacsmirror :pkgname "multi-project" :required ((("compile" compile) ("easymenu" easymenu) ("etags" etags)))) (:name multi-term :description "Managing multiple terminal buffers in Emacs" :type emacsmirror :pkgname "multi-term" :required ((("advice" advice) ("cl" cl) ("term" term)) (("ecb" ecb)))) (:name multiple-line-edit :description "Edit multiple line at a time" :type emacsmirror :pkgname "multiple-line-edit" :required ((("cl" cl) ("easymenu" easymenu)))) (:name multiselect :description "Select non-contiguous regions" :type emacsmirror :pkgname "multiselect" :required nil) (:name multiverse :description "Manage multiple versions of buffers in an Emacs session" :type emacsmirror :pkgname "multiverse" :required ((("cl" cl)))) (:name multr :description "Multiple regions handling" :type emacsmirror :pkgname "multr" :required nil) (:name mulvoc :description "Multi-lingual vocabulary" :type emacsmirror :pkgname "mulvoc" :required ((("thingatpt" thingatpt)))) (:name mumamo-noweb :description "MuMaMo noweb goo" :type emacsmirror :pkgname "mumamo-noweb" :required ((("nxhtml" mumamo))) :depends (nxhtml)) (:name muon :description "A mode for interacting with MU*s" :type emacsmirror :pkgname "muon" :required ((("cl" cl) ("comint" comint)))) (:name mupacs :description nil :type emacsmirror :pkgname "mupacs" :required ((("advice" advice) ("cc-mode" cc-mode) ("easymenu" easymenu) ("emacs-core" backquote disp-table font-lock) ("emacs-obsolete" lazy-lock) ("gud" gud) ("imenu" imenu) ("regexp-opt" regexp-opt))) :depends (cc-mode)) (:name muse-blog :description "Keep and publish a blog" :type emacsmirror :pkgname "muse-blog" :required ((("muse" muse-html muse-journal muse-publish)))) (:name muse-definition :description "Define words in a muse project" :type emacsmirror :pkgname "muse-definition" :required ((("assoc" assoc)))) (:name muse-ess :description "Emacs muse speaks statistics" :type emacsmirror :pkgname "muse-ess" :required nil) (:name muse-settings :description "Load settings for individual directories. " :type emacsmirror :pkgname "muse-settings" :required nil) (:name muse-trail :description "Trails for muse projects. " :type emacsmirror :pkgname "muse-trail" :required ((("cl" cl)))) (:name musical-letters :description "Play the fluidsynth software synthesizer" :type emacsmirror :pkgname "musical-letters" :required nil) (:name musicbrainz :description "Musicbrainz interface" :type emacsmirror :pkgname "musicbrainz" :required ((("cl" cl) ("gnus" message mm-url) ("url" url))) :depends (gnus)) (:name mutt-alias :description "Lookup/insert mutt mail aliases" :type emacsmirror :pkgname "mutt-alias" :required ((("cl" cl)))) (:name muttrc-mode :description "Major mode to edit muttrc under Emacs" :type emacsmirror :pkgname "muttrc-mode" :required ((("emacs-core" jka-compr) ("man" man)))) (:name mv-shell :description nil :type emacsmirror :pkgname "mv-shell" :required nil) (:name mwe-cambridge-permute :description "Obfuscate text" :type emacsmirror :pkgname "mwe-cambridge-permute" :required nil) (:name mwe-color-box :description "Display color boxes for each nesting level" :type emacsmirror :pkgname "mwe-color-box" :required ((("cl" cl) ("rect" rect) ("thingatpt" thingatpt)))) (:name mwe-log-commands :description "Log keyboard commands to buffer" :type emacsmirror :pkgname "mwe-log-commands" :required ((("cl" cl)))) (:name my-zmacs :description nil :type emacsmirror :pkgname "my-zmacs" :required nil) (:name mybuffers :description "Switch buffers with Ctrl-Tab (or another keystroke)" :type emacsmirror :pkgname "mybuffers" :required nil) (:name mythryl-mode :description "Major mode for editing Mythryl code" :type emacsmirror :pkgname "mythryl-mode" :required nil) (:name n3-mode :description "Mode for Notation 3" :type emacsmirror :pkgname "n3-mode" :required nil) (:name namazu :description nil :type emacsmirror :pkgname "namazu" :required ((("browse-url" browse-url) ("custom" custom) ("emacs-core" jka-compr) ("man" man) ("mew" mew))) :depends (mew)) (:name nanowrimo :description "Elisp for tracking wordcount while working on" :type emacsmirror :pkgname "nanowrimo" :required nil) (:name narrow-stack :description nil :type emacsmirror :pkgname "narrow-stack" :required ((("advice" advice)))) (:name natsel :description nil :type emacsmirror :pkgname "natsel" :required nil) (:name nav :description "Emacs mode for filesystem navigation" :type emacsmirror :pkgname "nav" :required ((("ack" ack) ("dired" dired)))) (:name navi :description nil :type emacsmirror :pkgname "navi" :required nil) (:name navi2ch :description "Navigator for 2ch for Emacsen" :type emacsmirror :pkgname "navi2ch" :required ((("browse-url" browse-url) ("cl" cl) ("emacs-core" base64 ccl) ("migemo" migemo) ("regexp-opt" regexp-opt) ("timer" timer) ("timezone" timezone) ("w3m" w3m) ("widget" wid-edit widget) (nil bitmap spamfilter))) :depends (w3m migemo)) (:name nazna :description nil :type emacsmirror :pkgname "nazna" :required ((("cl" cl)))) (:name nc :description "Emulate famos ms-dog file browser" :type emacsmirror :pkgname "nc" :required ((("easymenu" easymenu) ("shell" shell)))) (:name nclosemacs :description nil :type emacsmirror :pkgname "nclosemacs" :required ((("cedet" eieio-base tree) ("cl" cl))) :depends (cedet)) (:name neophyte :description "Makes it easier to learn emacs" :type emacsmirror :pkgname "neophyte" :required ((("advice" advice) ("emacs-core" helper)))) (:name nero :description "A fast Lynx-based browser for Emacs" :type emacsmirror :pkgname "nero" :required ((("cl" cl)))) (:name nesc :description "Necs mode" :type emacsmirror :pkgname "nesc" :required ((("cc-mode" cc-mode) ("emacs-core" derived font-lock))) :depends (cc-mode)) (:name nethack :description "Run Nethack as a subprocess" :type emacsmirror :pkgname "nethack" :required ((("cl" cl) ("emacs-core" overlay) ("gamegrid" gamegrid)))) (:name netrexx-mode :description "Highlight and indent Netrexx program files" :type emacsmirror :pkgname "netrexx-mode" :required ((("cedet" speedbar) ("skeleton" skeleton))) :depends (cedet)) (:name networkmanager :description "Define hooks which run after changing a status of network" :type emacsmirror :pkgname "networkmanager" :required ((("dbus" dbus)))) (:name new-subdirs-el :description "Special subdirs.el to go along with write-subdirs-el" :type emacsmirror :pkgname "new-subdirs-el" :required nil) (:name news-hack :description "Create newsrc buffers for foreign groups" :type emacsmirror :pkgname "news-hack" :required nil) (:name nexus :description "REST Client for Nexus Maven Repository servers" :type emacsmirror :pkgname "nexus" :required ((("gnus" mm-url) ("xml" xml))) :depends (gnus)) (:name nf-procmail-mode :description "Major mode for editing procmail recipe files" :type emacsmirror :pkgname "nf-procmail-mode" :required ((("emacs-core" derived font-lock)))) (:name nginx-mode :description "Major mode for editing nginx config files" :type emacsmirror :pkgname "nginx-mode" :required nil) (:name ngn :description "Quickly insert a newsgroup name into a buffer using completion" :type emacsmirror :pkgname "ngn" :required ((("cl" cl)))) (:name nmap :description nil :type emacsmirror :pkgname "nmap" :required nil) (:name nmcobol-mode :description "For use with Tandem Cobol only - Sorry" :type emacsmirror :pkgname "nmcobol-mode" :required ((("anchored-transpose" anchored-transpose) ("column-marker" column-marker) ("imenu" imenu) ("paren" paren) ("which-func" which-func))) :depends (python-mode anchored-transpose)) (:name nntodo :description "Manage todo items with Gnus" :type emacsmirror :pkgname "nntodo" :required ((("cl" cl) ("easy-mmode" easy-mmode) ("gnus" gnus-start nnheader nnmail nnmbox nnoo))) :depends (gnus)) (:name nobreak-fade :description "Some functions for `fill-nobreak-predicate'" :type emacsmirror :pkgname "nobreak-fade" :required ((("help-mode" help-mode) ("thingatpt" thingatpt)))) (:name nopaste :description "Interface to nopaste.pl" :type emacsmirror :pkgname "nopaste" :required nil) (:name normalize-page :description "Rebuild a page usinga  given template</title>" :type emacsmirror :pkgname "normalize-page" :required ((("page-attributes" page-attributes) ("webmaster-macros" webmaster-macros))) :depends (webmaster-macros page-attributes)) (:name nose :description "Easy Python test running in Emacs" :type emacsmirror :pkgname "nose" :required ((("cl" cl)))) (:name notes-mode :description nil :type emacsmirror :pkgname "notes-mode" :required ((("emacs-core" font-lock) ("mailcrypt" mailcrypt) (nil npgp pam))) :depends (mailcrypt)) (:name noweb :description "Noweb mode for literate programming" :type emacsmirror :pkgname "noweb" :required ((("cl" cl) ("easy-mmode" easy-mmode) ("multi-mode" multi-mode))) :depends (multi-mode)) (:name nqmbm :description "Advanced mouse buffer menu mainly for win32" :type emacsmirror :pkgname "nqmbm" :required nil) (:name ns-browse :description "View html-enriched mail/news buffers using Netscape" :type emacsmirror :pkgname "ns-browse" :required nil) (:name ns-platform-support :description nil :type emacsmirror :pkgname "ns-platform-support" :required nil) (:name nterm :description nil :type emacsmirror :pkgname "nterm" :required ((("cl" cl)))) (:name nukneval :description nil :type emacsmirror :pkgname "nukneval" :required ((("cl" cl)))) (:name nunmove :description nil :type emacsmirror :pkgname "nunmove" :required nil) (:name nxhtml :description "Keeping nXhtml together" :type emacsmirror :pkgname "nxhtml" :required ((("advice" advice) ("apropos" apropos) ("bookmark" bookmark) ("browse-url" browse-url) ("button" button) ("cc-mode" cc-engine) ("cl" cl) ("comint" comint) ("compile" compile) ("custom" cus-edit) ("desktop" desktop) ("dired" dired) ("easymenu" easymenu) ("ediff" ediff) ("edmacro" edmacro) ("emacs-core" bytecomp font-lock loadhist server tutorial) ("flymake" flymake) ("flyspell" flyspell) ("gnus" mailcap mm-decode mm-url) ("grep" grep) ("help-mode" help-mode) ("hideshow" hideshow) ("hl-line" hl-line) ("htmlfontify" htmlfontify) ("http-post-simple" http-post-simple) ("ido" ido) ("imenu" imenu) ("iss-mode" iss-mode) ("json" json) ("nxml-mode" rng-nxml rng-valid) ("org-mode" org) ("outline" outline) ("ps-print" ps-print) ("re-builder" re-builder) ("recentf" recentf) ("rinari" rinari) ("ruby-mode" ruby-mode) ("rx" rx) ("sendmail" sendmail) ("sgml-mode" sgml-mode) ("thingatpt" thingatpt) ("uniquify" uniquify) ("url" url url-expand url-handlers url-http url-parse url-util url-vars) ("widget" wid-browse wid-edit) ("xml" xml) (nil ert)) (("anything" anything) ("ecb" ecb) ("edit-server" edit-server) ("fold-dwim" fold-dwim) ("html-toc" html-toc) ("mediawiki" mediawiki) ("nxml-mode" nxml-mode) ("vline" vline) ("winsize" winsize) (nil company-mode emacsw32 flymake-js typesetter w32-regdat w32shell))) :depends (rvm rinari org-mode http-post-simple gnus cc-mode)) (:name nyan-mode :description "Nyan Cat shows position in current buffer in mode-line" :type emacsmirror :pkgname "nyan-mode" :required nil) (:name oacs :description "OpenACS extensions" :type emacsmirror :pkgname "oacs" :required ((("autoinsert" autoinsert) ("color-occur" color-occur) ("mmm-mode" mmm-auto mmm-mode) ("psgml" psgml) ("sql" sql))) :depends (psgml mmm-mode color-occur)) (:name oauth :description "Oauth library" :type emacsmirror :pkgname "oauth" :required ((("cl" cl) ("gnus" sha1) ("url" url url-util)) (("gnus" sasl))) :depends (gnus)) (:name ob-picolisp :description "Org-babel functions for picolisp evaluation" :type emacsmirror :pkgname "ob-picolisp" :required ((("org-mode" ob ob-eval) (nil inferior-picolisp))) :depends (org-mode)) (:name obarray-fns :description "Obarray-manipulating routines" :type emacsmirror :pkgname "obarray-fns" :required nil) (:name oberon :description "Major mode for editing Oberon/Oberon-2 program texts" :type emacsmirror :pkgname "oberon" :required ((("emacs-core" font-lock) ("newcomment" newcomment)))) (:name obfusurl :description "Obfuscate URLs so they aren't spoilers" :type emacsmirror :pkgname "obfusurl" :required ((("cl" cl) ("thingatpt" thingatpt)))) (:name occam-mode :description "OCCAM2 mode for GNU emacs" :type emacsmirror :pkgname "occam-mode" :required nil) (:name ocr :description "Major mode for editing OCR'd documents" :type emacsmirror :pkgname "ocr" :required nil) (:name octal-chars :description "Convert escape sequences in a file" :type emacsmirror :pkgname "octal-chars" :required nil) (:name oddmuse :description "Edit pages on an Oddmuse wiki" :type emacsmirror :pkgname "oddmuse" :required ((("cl" cl) ("sgml-mode" sgml-mode) ("skeleton" skeleton) ("url" url)))) (:name odf-mode :description "Support for Open Document Format files" :type emacsmirror :pkgname "odf-mode" :required ((("xml" xml)))) (:name offlineimap :description "Run OfflineIMAP from Emacs" :type emacsmirror :pkgname "offlineimap" :required ((("comint" comint)))) (:name ogg-comment :description "Read Ogg-Vorbis file headers" :type emacsmirror :pkgname "ogg-comment" :required ((("cl" cl)))) (:name oggel :description "OGG encoding for EmacsLisp " :type emacsmirror :pkgname "oggel" :required ((("cl" cl)))) (:name ogre-material-mode :description "Mode for editing Ogre3D .material scripts" :type emacsmirror :pkgname "ogre-material-mode" :required ((("cc-mode" cc-mode))) :depends (cc-mode)) (:name omake :description "Editing mode for omake files" :type emacsmirror :pkgname "omake" :required ((("rx" rx)))) (:name one-key :description "One key" :type emacsmirror :pkgname "one-key" :required ((("cl" cl)))) (:name oo-browser :description nil :type emacsmirror :pkgname "oo-browser" :required ((("cc-mode" cc-mode) ("compile" compile) ("emacs-obsolete" lmenu) ("hyperbole" hmouse-drv hmouse-key hpath hui-mouse hversion hypb set) ("info" info) (nil id-menubars pydoc))) :depends (hyperbole cc-mode)) (:name ooc-mode :description nil :type emacsmirror :pkgname "ooc-mode" :required ((("cc-mode" cc-fonts cc-langs cc-mode) ("cedet" cedet semantic) ("cl" cl) ("flymake" flymake)) (("cedet" semantic-decorate-include semantic-lex wisent-comp) (nil semantic/decorate/include semantic/lex semantic/wisent/comp))) :depends (cedet cc-mode)) (:name open-junk-file :description "Open a junk (memo) file to try-and-error" :type emacsmirror :pkgname "open-junk-file" :required ((("cl" cl)))) (:name openpaste :description "Emacs interface for OpenPastebin" :type emacsmirror :pkgname "openpaste" :required ((("xml-rpc" xml-rpc))) :depends (xml-rpc)) (:name openssl-cipher :description "Encrypt/Decrypt string with password by openssl command" :type emacsmirror :pkgname "openssl-cipher" :required nil) (:name openwith :description "Open files with external programs" :type emacsmirror :pkgname "openwith" :required nil) (:name opscode-sign :description "Opscode API request signer" :type emacsmirror :pkgname "opscode-sign" :required ((("cl" cl) ("emacs-core" base64) ("gnus" sha1))) :depends (gnus)) (:name order-head :description "Re-arrange mail headers into pleasing order" :type emacsmirror :pkgname "order-head" :required ((("fmailutils" fmailutils) ("rfc822" rfc822))) :depends (fmailutils)) (:name oremus :description nil :type emacsmirror :pkgname "oremus" :required ((("autocue" autocue) ("cl" cl) ("w3" w3))) :depends (w3 autocue)) (:name org-assoc-tags :description "Automatically associate tags when key-tagging an item" :type emacsmirror :pkgname "org-assoc-tags" :required nil) (:name org-babel-plugins :description "Org-babel functions for pygment evaluation" :type emacsmirror :pkgname "org-babel-plugins" :required ((("org-mode" ob ob-eval))) :depends (org-mode)) (:name org-blog :description "Create and publish a blog with org-mode" :type emacsmirror :pkgname "org-blog" :required ((("org-mode" org-publish))) :depends (org-mode)) (:name org-buffers :description "An Org-mode tool for buffer management" :type emacsmirror :pkgname "org-buffers" :required ((("cl" cl) ("org-mode" org))) :depends (org-mode)) (:name org-camp :description "Import TODO items from basecamp into org-mode" :type emacsmirror :pkgname "org-camp" :required nil) (:name org-daypage :description "Org-Mode Day Page" :type emacsmirror :pkgname "org-daypage" :required ((("cl" cl)))) (:name org-email :description "Use org for an email database" :type emacsmirror :pkgname "org-email" :required (((nil ert))) :depends (rvm)) (:name org-googlecl :description nil :type emacsmirror :pkgname "org-googlecl" :required nil) (:name org-html5presentation :description nil :type emacsmirror :pkgname "org-html5presentation" :required ((("cl" cl) ("htmlize" htmlize) ("org-mode" org-exp org-table) ("table" table))) :depends (org-mode)) (:name org-hyde :description "Export hyde-ready posts from org-mode entries" :type emacsmirror :pkgname "org-hyde" :required nil) (:name org-jekyll :description "Export jekyll-ready posts form org-mode entries" :type emacsmirror :pkgname "org-jekyll" :required nil) (:name org-json :description "Conversion between org and json" :type emacsmirror :pkgname "org-json" :required ((("json" json)))) (:name org-mac-protocol :description "Process events triggered by the" :type emacsmirror :pkgname "org-mac-protocol" :required ((("cl" cl) ("org-mode" org-bibtex org-protocol))) :depends (org-mode)) (:name org-magit :description "Basic support for magit links" :type emacsmirror :pkgname "org-magit" :required ((("cl" cl) ("magit" magit) ("org-mode" org))) :depends (org-mode magit)) (:name org-mode :description "Outline-based notes management and organizer" :type emacsmirror :pkgname "org-mode" :required ((("arc-mode" arc-mode) ("assoc" assoc) ("bbdb" bbdb bbdb-com) ("bibtex" bibtex) ("bookmark" bookmark) ("browse-url" browse-url) ("button" button) ("calc" calc calc-store calc-trail) ("calendar" cal-iso calendar diary-lib holidays solar) ("cc-mode" cc-mode) ("cdlatex" cdlatex) ("cl" cl) ("cmuscheme" cmuscheme) ("comint" comint) ("dabbrev" dabbrev) ("easymenu" easymenu) ("electric" electric) ("emacs-core" autoload font-lock overlay pp) ("epg" epg) ("erc" erc erc-log) ("eshell" esh-mode eshell) ("ess" ess) ("find-func" find-func) ("find-lisp" find-lisp) ("footnote" footnote) ("gnuplot" gnuplot) ("gnus" format-spec gnus gnus-art gnus-sum mailcap message parse-time sha1 time-date) ("haskell-mode" inf-haskell) ("hi-lock" hi-lock) ("htmlfontify" htmlfontify) ("htmlize" htmlize) ("icalendar" icalendar) ("info" info) ("jira" jira) ("matlab" matlab) ("mew" mew) ("mh-e" mh-e mh-search mh-utils) ("mozart" mozart) ("nxhtml" moz) ("octave-inf" octave-inf) ("outline" noutline outline) ("pcomplete" pcomplete) ("ps-print" ps-print) ("remember" remember) ("remind" remind) ("reporter" reporter) ("rinari" inf-ruby) ("rmail" rmail) ("shell" shell) ("slime" slime) ("table" table) ("term" term) ("time" time) ("tuareg" tuareg) ("url" url-handlers url-parse) ("vm" vm vm-search) ("wanderlust" wl) ("xml" xml) (nil inf-shen notifications notmuch rcodetools swank-clojure))) :depends (shen-mode wanderlust vm tuareg slime rinari remind remember nxhtml mozart mew haskell-mode gnus ess eshell erc epg cc-mode bbdb)) (:name org-osm-link :description "Org-links to OSM maps" :type emacsmirror :pkgname "org-osm-link" :required ((("org-mode" org))) :depends (org-mode)) (:name org-outlook :description "Outlook org" :type emacsmirror :pkgname "org-outlook" :required ((("org-mode" org org-protocol))) :depends (org-mode)) (:name org-passwords :description "Contacts management" :type emacsmirror :pkgname "org-passwords" :required nil) (:name org-s5 :description "Helpers for s5 org export" :type emacsmirror :pkgname "org-s5" :required nil) (:name org-seenthis :description "Provides Seenthis.net integration for Org-mode" :type emacsmirror :pkgname "org-seenthis" :required ((("xml" xml)))) (:name org-toodledo :description nil :type emacsmirror :pkgname "org-toodledo" :required ((("org-mode" org) ("url" url url-http) ("w3m" w3m) ("xml" xml))) :depends (w3m org-mode)) (:name org-tree-slide :description "A presentation tool for org-mode" :type emacsmirror :pkgname "org-tree-slide" :required nil) (:name org-website :description "Generate multi-level website from org" :type emacsmirror :pkgname "org-website" :required ((("cl" cl) ("dirtree" dirtree) ("org-mode" org-html org-publish) ("string-template" string-template))) :depends (string-template org-mode dirtree)) (:name org2blog :description "Blog from Org mode to wordpress" :type emacsmirror :pkgname "org2blog" :required ((("metaweblog" metaweblog) ("org-mode" org) ("xml-rpc" xml-rpc))) :depends (xml-rpc org-mode metaweblog)) (:name organizer-mode :description "Major mode for editing organizer list files" :type emacsmirror :pkgname "organizer-mode" :required ((("bbdb" bbdb) ("calendar" calendar diary-lib) ("dired" dired) ("ffap" ffap) ("gnus" gnus) ("todo-mode" todo-mode) ("vm" vm) (nil dired-shell))) :depends (vm gnus bbdb)) (:name orgml :description "Export org mode files as xml" :type emacsmirror :pkgname "orgml" :required nil) (:name orthodox :description "Save the orthodox keymap before hacking it" :type emacsmirror :pkgname "orthodox" :required nil) (:name orwell :description "Exchange [C-h] & [DEL] without affecting prefix mappings" :type emacsmirror :pkgname "orwell" :required nil) (:name osd :description "On-screen display" :type emacsmirror :pkgname "osd" :required nil) (:name osx-itunes :description "Control itunes from emacs" :type emacsmirror :pkgname "osx-itunes" :required ((("osx-osascript" osx-osascript))) :depends (osx-osascript)) (:name osx-osascript :description "Invoke osascript on OSX" :type emacsmirror :pkgname "osx-osascript" :required nil) (:name osx-typecreator :description "Set OSX type and creator" :type emacsmirror :pkgname "osx-typecreator" :required nil) (:name otp :description "A one-time password creator for Emacs" :type emacsmirror :pkgname "otp" :required nil) (:name outdent :description nil :type emacsmirror :pkgname "outdent" :required nil) (:name outline-m :description nil :type emacsmirror :pkgname "outline-m" :required nil) (:name outlookedit :description nil :type emacsmirror :pkgname "outlookedit" :required nil) (:name p4 :description "Simple Perforce-Emacs Integration" :type emacsmirror :pkgname "p4" :required ((("browse-url" browse-url) ("dired" dired) ("easymenu" easymenu) ("ediff" ediff) ("timer" timer)))) (:name p4pymarshal :description "Read/write p4 python marshalled objects" :type emacsmirror :pkgname "p4pymarshal" :required nil) (:name pabbrev :description "Predictive abbreviation expansion" :type emacsmirror :pkgname "pabbrev" :required ((("cedet" working) ("cl" cl) ("emacs-core" overlay) ("thingatpt" thingatpt))) :depends (cedet)) (:name pack-windows :description "Resize all windows to display as much info as possible" :type emacsmirror :pkgname "pack-windows" :required ((("cl" cl)))) (:name package-spec :description "Specify package.el packages to use in a package spec" :type emacsmirror :pkgname "package-spec" :required (((nil package)))) (:name padr :description nil :type emacsmirror :pkgname "padr" :required ((("cl" cl)))) (:name page-attributes :description nil :type emacsmirror :pkgname "page-attributes" :required ((("cl" cl)))) (:name page-status :description nil :type emacsmirror :pkgname "page-status" :required ((("find-page-file" find-page-file))) :depends (find-page-file)) (:name page-structure :description nil :type emacsmirror :pkgname "page-structure" :required nil) (:name pager :description "Windows-scroll commands" :type emacsmirror :pkgname "pager" :required nil) (:name paint :description "Makes a Emacs to the Paint Tool" :type emacsmirror :pkgname "paint" :required ((("cl" cl)))) (:name pair-mode :description "Insertion of paired characters" :type emacsmirror :pkgname "pair-mode" :required ((("skeleton" skeleton)))) (:name palette :description "Color palette useful with RGB, HSV, and color names" :type emacsmirror :pkgname "palette" :required ((("cl" cl) ("hexrgb" hexrgb)) (("icicles" icicles)))) (:name pandoc-mode :description nil :type emacsmirror :pkgname "pandoc-mode" :required ((("easymenu" easymenu)))) (:name paredit :description "Minor mode for editing parentheses" :type emacsmirror :pkgname "paredit" :required ((("newcomment" newcomment)))) (:name paredit-viper-compat :description nil :type emacsmirror :pkgname "paredit-viper-compat" :required nil) (:name paren-glint :description "Unhighlight matching paren after a timeout" :type emacsmirror :pkgname "paren-glint" :required ((("advice" advice)))) (:name parenface :description "Provide a face for parens in lisp modes" :type emacsmirror :pkgname "parenface" :required nil) (:name parenthesis :description "Insert pair of parenthesis" :type emacsmirror :pkgname "parenthesis" :required nil) (:name parfait-mode :description "Prettifies your code by removing needless clutter" :type emacsmirror :pkgname "parfait-mode" :required nil) (:name parser :description "Elisp Macro DSL Parser Compiler" :type emacsmirror :pkgname "parser" :required ((("cl" cl) ("closure" closure) ("help" help-fns)))) (:name pases :description "Packaging & system definition for Emacs" :type emacsmirror :pkgname "pases" :required nil) (:name pastebin :description "A simple interface to the www.pastebin.com webservice" :type emacsmirror :pkgname "pastebin" :required nil) (:name pastebox :description "Emacs lisp lib for pasting to PasteBox-powered bins" :type emacsmirror :pkgname "pastebox" :required ((("url" url)))) (:name pb-popup :description "Display process buffer when new output arrives" :type emacsmirror :pkgname "pb-popup" :required nil) (:name pbook :description "Format a program listing for LaTeX" :type emacsmirror :pkgname "pbook" :required ((("cl" cl)))) (:name pc-keys :description "Smart `home' and `end' keys" :type emacsmirror :pkgname "pc-keys" :required nil) (:name pcmpl-arch :description "Functions for dealing with arch/tla completions" :type emacsmirror :pkgname "pcmpl-arch" :required ((("executable" executable) ("pcomplete" pcomplete)))) (:name pcmpl-git :description "Pcomplete for git" :type emacsmirror :pkgname "pcmpl-git" :required ((("cl" cl) ("pcomplete" pcomplete)))) (:name pcsv :description "Parser of csv" :type emacsmirror :pkgname "pcsv" :required ((("cl" cl)))) (:name pdb :description "Editing Protein Databank files" :type emacsmirror :pkgname "pdb" :required ((("emacs-core" latin1-disp)))) (:name pdftools :description nil :type emacsmirror :pkgname "pdftools" :required nil) (:name peano :description nil :type emacsmirror :pkgname "peano" :required ((("cl" cl) ("emacs-core" font-lock) ("org-mode" org) ("rx" rx))) :depends (org-mode)) (:name peg :description "Parsing Expression Grammars in Emacs Lisp" :type emacsmirror :pkgname "peg" :required nil) (:name per-window-point :description "Persisent per-window values of point" :type emacsmirror :pkgname "per-window-point" :required nil) (:name perl-completion :description nil :type emacsmirror :pkgname "perl-completion" :required ((("anything" anything) ("cl" cl) ("cperl-mode" cperl-mode) ("custom" custom) ("dabbrev" dabbrev) ("emacs-core" env pp) ("ffap" ffap) ("man" man) ("regexp-opt" regexp-opt) ("rx" rx) ("tramp" tramp) ("woman" woman)) (("anything" anything-show-completion) ("color-moccur" color-moccur) ("url" url))) :depends (tramp cperl-mode anything)) (:name perl-find-library :description "Functions for locating perl libraries on your system" :type emacsmirror :pkgname "perl-find-library" :required ((("cl" cl) ("cperl-mode" cperl-mode) ("find-lisp" find-lisp))) :depends (cperl-mode)) (:name perl-manual :description nil :type emacsmirror :pkgname "perl-manual" :required nil) (:name perldoc :description nil :type emacsmirror :pkgname "perldoc" :required ((("cl" cl) ("pde" pde-vars) ("tree-mode" tree-mode) ("windata" windata) ("woman" woman))) :depends (windata tree-mode)) (:name perlmonks :description "A simple interface to www.perlmonks.org" :type emacsmirror :pkgname "perlmonks" :required ((("emacs-core" menu-bar) ("url" url) (nil perlmonks-auth)))) (:name perlnow :description "Wed Jan 14 13:45:31 2004" :type emacsmirror :pkgname "perlnow" :required ((("cl" cl) ("template" template))) :depends (template)) (:name perspective :description "Switch between named \"perspectives\" of the editor" :type emacsmirror :pkgname "perspective" :required ((("cl" cl)))) (:name pgg-crypt :description "Automatic encryption with gpg" :type emacsmirror :pkgname "pgg-crypt" :required ((("gnus" pgg))) :depends (gnus)) (:name pgp-wrapper :description "Runs PGP command-lines" :type emacsmirror :pkgname "pgp-wrapper" :required ((("comint" comint)))) (:name pgrok :description "Project Grokking for Emacs" :type emacsmirror :pkgname "pgrok" :required ((("find-dired" find-dired)))) (:name pgsql-linum-format :description "Dimitri Fontaine" :type emacsmirror :pkgname "pgsql-linum-format" :required ((("linum" linum)))) (:name phonebook :description nil :type emacsmirror :pkgname "phonebook" :required nil) (:name phonemode :description nil :type emacsmirror :pkgname "phonemode" :required ((("cl" cl)))) (:name php-completion :description "Complete everything PHP with Anything.el" :type emacsmirror :pkgname "php-completion" :required ((("anything" anything anything-match-plugin) ("auto-complete" auto-complete) ("browse-url" browse-url) ("cl" cl) ("emacs-core" pp tool-bar) ("etags" etags) ("rx" rx) ("thingatpt" thingatpt) ("url" url-util))) :depends (auto-complete anything)) (:name php-completion-opt :description "Php-completion optional utilities" :type emacsmirror :pkgname "php-completion-opt" :required ((("php-completion" php-completion))) :depends (php-completion)) (:name php-mode :description "Major mode for editing PHP code" :type emacsmirror :pkgname "php-mode" :required ((("add-log" add-log) ("cc-mode" cc-langs cc-mode) ("cedet" speedbar) ("custom" custom) ("emacs-core" font-lock) ("etags" etags) ("regexp-opt" regexp-opt))) :depends (cedet cc-mode)) (:name phpsh :description nil :type emacsmirror :pkgname "phpsh" :required ((("cl" cl) ("custom" custom) ("gud" gud) ("tree-widget" tree-widget) ("url" url-util) ("xml" xml)))) (:name phpunit :description "Interact with PHPUnit" :type emacsmirror :pkgname "phpunit" :required ((("compile" compile)))) (:name phrase :description "Movement by `phrases' in text" :type emacsmirror :pkgname "phrase" :required nil) (:name phutball :description "Play phutball in Emacs" :type emacsmirror :pkgname "phutball" :required nil) (:name physical-line :description nil :type emacsmirror :pkgname "physical-line" :required nil) (:name pianobar :description nil :type emacsmirror :pkgname "pianobar" :required ((("comint" comint)))) (:name pic-basic-mode :description "Editing mode for MELabs PIC Basic" :type emacsmirror :pkgname "pic-basic-mode" :required ((("cl" cl)))) (:name pick-backup :description "Easy access to versioned backup files" :type emacsmirror :pkgname "pick-backup" :required ((("diff" diff) ("ediff" ediff)))) (:name pickel :description "Elisp object serialization" :type emacsmirror :pkgname "pickel" :required ((("cl" cl)))) (:name pifont :description nil :type emacsmirror :pkgname "pifont" :required nil) (:name pig-mode :description nil :type emacsmirror :pkgname "pig-mode" :required ((("emacs-core" font-lock)))) (:name pigletfill :description "Agressive auto filling" :type emacsmirror :pkgname "pigletfill" :required nil) (:name pilot-doc :description nil :type emacsmirror :pkgname "pilot-doc" :required nil) (:name pilot-memo :description nil :type emacsmirror :pkgname "pilot-memo" :required nil) (:name pinbar :description "Display a pin bar in the header line" :type emacsmirror :pkgname "pinbar" :required nil) (:name pinpoint-mode :description "Major mode for editing pinpoint files" :type emacsmirror :pkgname "pinpoint-mode" :required ((("easymenu" easymenu)))) (:name pivotal-tracker :description nil :type emacsmirror :pkgname "pivotal-tracker" :required ((("url" url) ("xml" xml)))) (:name pkgbuild-mode :description nil :type emacsmirror :pkgname "pkgbuild-mode" :required ((("advice" advice) ("cl" cl) ("easymenu" easymenu) ("etags" etags) ("sh-script" sh-script)))) (:name planner :description "The Emacs Planner" :type emacsmirror :pkgname "planner" :required ((("advice" advice) ("align" align) ("appt" appt) ("bbdb" bbdb-com) ("bibtex" bibtex) ("bookmark" bookmark) ("calendar" calendar diary-lib holidays) ("cl" cl) ("compile" compile) ("crm" crm) ("easymenu" easymenu) ("emacs-core" derived font-lock overlay sort) ("erc" erc) ("gnus" gnus gnus-msg gnus-sum time-date) ("grep" grep) ("icalendar" icalendar) ("info" info) ("ledger" ledger) ("log-edit" log-edit) ("mh-e" mh-e) ("muse" muse muse-colors muse-html muse-mode muse-project muse-publish muse-xml) ("psvn" psvn) ("remember" remember) ("rmail" rmail) ("timeclock" timeclock) ("trace" trace) ("vm" vm) ("w3m" w3m) ("wanderlust" wl wl-summary) (nil gnats xtla))) :depends (wanderlust w3m vm remember psvn ledger gnus erc bbdb)) (:name planner-favoris :description "Add some bookmarks in a planner day page" :type emacsmirror :pkgname "planner-favoris" :required ((("planner" planner))) :depends (planner)) (:name planner-frame :description "Devote a frame to the Planner" :type emacsmirror :pkgname "planner-frame" :required ((("planner" planner))) :depends (planner)) (:name planner-hierarchy :description "Hierarchical Planning" :type emacsmirror :pkgname "planner-hierarchy" :required nil) (:name planner-notes-index-page :description "Create index of notes in a particular page" :type emacsmirror :pkgname "planner-notes-index-page" :required ((("planner" planner))) :depends (planner)) (:name planner-todo-index :description "Find todos in files of project and display to planner page" :type emacsmirror :pkgname "planner-todo-index" :required (((nil traverse-dir)))) (:name playlist :description "A music file playlist" :type emacsmirror :pkgname "playlist" :required nil) (:name plone-mode :description "Tools for developing plone / zope / python with emacs" :type emacsmirror :pkgname "plone-mode" :required ((("json" json)))) (:name plt-completions :description "Completion for PLT Scheme" :type emacsmirror :pkgname "plt-completions" :required ((("cl" cl) ("emacs-core" derived) ("scheme" scheme) ("thingatpt" thingatpt)))) (:name plugin :description "Automatic fetching, installing and loading of Emacs modules according to widespread Emacs conventions" :type emacsmirror :pkgname "plugin" :required ((("cl" cl) ("loop-constructs" loop-constructs) ("record" record))) :depends (record loop-constructs)) (:name plural :description "Pluralize english nouns" :type emacsmirror :pkgname "plural" :required ((("thingatpt" thingatpt)))) (:name plywood :description nil :type emacsmirror :pkgname "plywood" :required nil) (:name pmd :description "Major mode for pluging PMD into Emacs" :type emacsmirror :pkgname "pmd" :required ((("compile" compile)))) (:name po-mode :description "Major mode for GNU gettext PO files" :type emacsmirror :pkgname "po-mode" :required ((("compile" compile) ("custom" custom) ("etags" etags) (nil po-compat)))) (:name pocketcompletion :description "Tree style completion intended for tablets" :type emacsmirror :pkgname "pocketcompletion" :required ((("cl" cl) ("predictive" dict-tree trie))) :depends (predictive)) (:name point-ring :description nil :type emacsmirror :pkgname "point-ring" :required nil) (:name point-stack :description nil :type emacsmirror :pkgname "point-stack" :required nil) (:name point-undo :description "Undo/redo position" :type emacsmirror :pkgname "point-undo" :required ((("cl" cl)))) (:name pointback :description "Restore window points when returning to buffers" :type emacsmirror :pkgname "pointback" :required ((("assoc" assoc)))) (:name poker :description "A simple poker game for Emacs" :type emacsmirror :pkgname "poker" :required nil) (:name policy-switch :description "Window configuration navigation utility" :type emacsmirror :pkgname "policy-switch" :required ((("cl" cl) ("desktop" desktop) ("winner" winner)))) (:name pom-parser :description "Tools for using attributes from a Maven POM in JDE project files" :type emacsmirror :pkgname "pom-parser" :required ((("cl" cl) ("jdee" jde) ("xml" xml))) :depends (jdee)) (:name pony-mode :description "Minor mode for working with Django projects" :type emacsmirror :pkgname "pony-mode" :required ((("cl" cl) ("easymenu" easymenu) ("sgml-mode" sgml-mode) ("sql" sql) ("thingatpt" thingatpt)))) (:name pop-help-mode :description "Major mode for reading Poplog help documentation.    " :type emacsmirror :pkgname "pop-help-mode" :required ((("cl" cl)))) (:name pop-mode :description "Major mode for editing Pop-11 code" :type emacsmirror :pkgname "pop-mode" :required ((("add-log" add-log) ("cl" cl) ("easymenu" easymenu) ("emacs-core" font-lock)))) (:name popbiff :description "Checks for mail using POP3" :type emacsmirror :pkgname "popbiff" :required ((("ange-ftp" ange-ftp) ("cl" cl)))) (:name popup :description "Visual Popup User Interface" :type emacsmirror :pkgname "popup" :required ((("cl" cl)))) (:name popup+ :description "Enhancement of `popup.el'" :type emacsmirror :pkgname "popup+" :required ((("popup" popup))) :depends (popup)) (:name popup-global-mark-ring :description "Jumping Interactively through global mark ring" :type emacsmirror :pkgname "popup-global-mark-ring" :required ((("popup" popup))) :depends (popup)) (:name popup-kill-ring :description "Interactively insert item from kill-ring" :type emacsmirror :pkgname "popup-kill-ring" :required ((("cl" cl) ("popup" popup) ("pos-tip" pos-tip))) :depends (pos-tip popup)) (:name popup-menu :description "Pop up a menu under the mouse pointer" :type emacsmirror :pkgname "popup-menu" :required nil) (:name popup-pos-tip :description "Pos-tip.el wrapper library for programs using popup.el" :type emacsmirror :pkgname "popup-pos-tip" :required ((("cl" cl) ("popup" popup) ("pos-tip" pos-tip))) :depends (pos-tip popup)) (:name popup-ruler :description "Displays a ruler at point" :type emacsmirror :pkgname "popup-ruler" :required nil) (:name popup-select-window :description "Selecting a window by popup-menu*" :type emacsmirror :pkgname "popup-select-window" :required ((("popup" popup))) :depends (popup)) (:name popwin :description "Popup Window Manager" :type emacsmirror :pkgname "popwin" :required ((("browse-url" browse-url) ("cl" cl) ("w3m" w3m) ("yatex" yatex))) :depends (yatex w3m)) (:name portage :description "Search and install Gentoo packages" :type emacsmirror :pkgname "portage" :required ((("emacs-core" generic-x)))) (:name pos-tip :description "Show tooltip at point" :type emacsmirror :pkgname "pos-tip" :required nil) (:name post :description nil :type emacsmirror :pkgname "post" :required ((("cl" cl) ("easymenu" easymenu) ("emacs-core" derived)))) (:name posterous :description "Emacs integration for posterous.com" :type emacsmirror :pkgname "posterous" :required ((("url" url) ("xml" xml)))) (:name power-macros :description nil :type emacsmirror :pkgname "power-macros" :required ((("advice" advice) ("cl" cl) ("edmacro" edmacro)))) (:name powershell :description "Run powershell as an inferior shell in emacs" :type emacsmirror :pkgname "powershell" :required ((("shell" shell)))) (:name powershell-mode :description "Mode for editing Powershell scripts" :type emacsmirror :pkgname "powershell-mode" :required (nil (("cedet" speedbar) ("compile" compile)))) (:name ppindent :description "Indents C preprocessor directives" :type emacsmirror :pkgname "ppindent" :required nil) (:name ppm-gen :description "Simple & slow ppm generation in emacs" :type emacsmirror :pkgname "ppm-gen" :required ((("cedet" eieio eieio-base eieio-comp) ("cl" cl) ("image-mode" image-mode))) :depends (cedet)) (:name prand :description "Generate pesudo-random number" :type emacsmirror :pkgname "prand" :required ((("calc" calc calc-ext calc-misc) ("cl" cl)))) (:name predictive :description nil :type emacsmirror :pkgname "predictive" :required ((("advice" advice) ("auto-overlays" auto-overlay-flat auto-overlay-line auto-overlay-nested auto-overlay-self auto-overlay-word auto-overlays) ("avl-tree" avl-tree) ("cl" cl) ("completion-ui" completion-ui) ("edebug" edebug) ("emacs-core" bytecomp) ("ispell" ispell) ("timerfunctions" timerfunctions) (nil predictive-compat))) :depends (timerfunctions completion-ui auto-overlays)) (:name prefixkey :description "Prefix key processing" :type emacsmirror :pkgname "prefixkey" :required ((("cl" cl)))) (:name pretty-mode :description "Redisplay parts of the buffer as pretty symbols" :type emacsmirror :pkgname "pretty-mode" :required ((("cl" cl)))) (:name prg-comment :description "This package helps to comment source code" :type emacsmirror :pkgname "prg-comment" :required ((("tempo" tempo)))) (:name proc-filters :description "Some generally useful process filters" :type emacsmirror :pkgname "proc-filters" :required nil) (:name proc-mode :description "Copyright (C) 1999 Pat Thoyts <pat@zsplat.freeserve.co.uk>" :type emacsmirror :pkgname "proc-mode" :required ((("regexp-opt" regexp-opt) ("reporter" reporter)))) (:name processing-mode :description nil :type emacsmirror :pkgname "processing-mode" :required ((("cl" cl) ("compile" compile) ("yasnippet" yasnippet))) :depends (yasnippet)) (:name procmaillog :description "Read the procmail log file in Gnus" :type emacsmirror :pkgname "procmaillog" :required nil) (:name procomm-mode :description "Major mode for editing PROCOMM ASPECT scripts" :type emacsmirror :pkgname "procomm-mode" :required nil) (:name profile-dotemacs :description "Profile your Emacs init file" :type emacsmirror :pkgname "profile-dotemacs" :required nil) (:name profiles :description nil :type emacsmirror :pkgname "profiles" :required ((("custom" custom)))) (:name project :description "Keep track of time devoted to projects" :type emacsmirror :pkgname "project" :required ((("appt" appt) ("cl" cl) ("gnus" time-date) ("timezone" timezone))) :depends (gnus)) (:name project-buffer-mode :description "Generic mode to browse project file" :type emacsmirror :pkgname "project-buffer-mode" :required ((("cl" cl) ("ewoc" ewoc)))) (:name projectile :description "Manage and navigate projects in Emacs easily" :type emacsmirror :pkgname "projectile" :required ((("cl" cl) ("easymenu" easymenu) ("thingatpt" thingatpt)))) (:name projutils :description "Project utils" :type emacsmirror :pkgname "projutils" :required ((("cedet" speedbar) ("grep" grep) ("ido" ido)) (("full-ack" full-ack) ("sr-speedbar" sr-speedbar))) :depends (cedet)) (:name promela-mode :description "Major mode for editing PROMELA program files" :type emacsmirror :pkgname "promela-mode" :required ((("emacs-core" font-lock)))) (:name properties :description "Non-intrusive file local variables" :type emacsmirror :pkgname "properties" :required ((("tellib" tellib))) :depends (tellib)) (:name protbuf :description "Protect buffers from accidental killing" :type emacsmirror :pkgname "protbuf" :required nil) (:name protect-files :description "Hooks and minor mode to avoid modifying files" :type emacsmirror :pkgname "protect-files" :required nil) (:name protocolarium :description "A set of buffer IO routines" :type emacsmirror :pkgname "protocolarium" :required ((("alert" alert) ("cl" cl) ("spread" spread))) :depends (spread alert)) (:name protocols :description "Protocol database access functions" :type emacsmirror :pkgname "protocols" :required ((("cl" cl)))) (:name ps-stack-comments :description "Update stack comments in a PostScript file" :type emacsmirror :pkgname "ps-stack-comments" :required nil) (:name pseudo-grep :description "Approximate replacement for grep, for machines which don't have it" :type emacsmirror :pkgname "pseudo-grep" :required nil) (:name psgml :description "SGML-editing mode with parsing support" :type emacsmirror :pkgname "psgml" :required ((("cl" cl) ("easymenu" easymenu) ("edebug" edebug) ("elp" elp)))) (:name psgml-jade :description nil :type emacsmirror :pkgname "psgml-jade" :required nil) (:name psgml-table :description "Editing table for SGML-mode" :type emacsmirror :pkgname "psgml-table" :required ((("psgml" psgml-parse))) :depends (psgml)) (:name psvn :description "Subversion interface for emacs" :type emacsmirror :pkgname "psvn" :required ((("cl" cl) ("diff-mode" diff-mode) ("dired" dired) ("easymenu" easymenu) ("ediff" ediff-util ediff-wind) ("elp" elp) ("emacs-core" overlay pp) ("log-edit" log-edit) ("vc" vc-hooks) (nil cl-macs)) (("gnus" mailcap)))) (:name ptexinfmt :description "Portable Texinfo formatter" :type emacsmirror :pkgname "ptexinfmt" :required ((("texinfmt" texinfmt)))) (:name publish-init :description nil :type emacsmirror :pkgname "publish-init" :required nil) (:name punycode :description "An ASCII compatible Unicode encoding format" :type emacsmirror :pkgname "punycode" :required nil) (:name puppet-pi-mode :description nil :type emacsmirror :pkgname "puppet-pi-mode" :required ((("emacs-core" font-lock)))) (:name pushy :description "Pushy completion" :type emacsmirror :pkgname "pushy" :required ((("iswitchb" iswitchb)))) (:name puzzle :description "Slide puzzle for Emacs" :type emacsmirror :pkgname "puzzle" :required nil) (:name pvr :description "Personal Video Recorder" :type emacsmirror :pkgname "pvr" :required ((("cl" cl) ("gnus" time-date) ("xml" xml))) :depends (gnus)) (:name pwsafe :description "Emacs interface to pwsafe" :type emacsmirror :pkgname "pwsafe" :required nil) (:name pycomplete+ :description "Complete symbols at point using Pymacs" :type emacsmirror :pkgname "pycomplete+" :required ((("pymacs" pymacs) ("python-mode" python-mode))) :depends (python-mode pymacs)) (:name pylookup :description nil :type emacsmirror :pkgname "pylookup" :required ((("browse-url" browse-url) ("cl" cl) ("emacs-core" simple) ("ido" ido)))) (:name pymacs :description nil :type emacsmirror :pkgname "pymacs" :required nil) (:name python-extras :description "Extras for python-mode" :type emacsmirror :pkgname "python-extras" :required ((("comint" comint) ("python" python) ("rx" rx) ("skeleton" skeleton) ("thingatpt" thingatpt)))) (:name python-mode :description "Major mode for editing Python programs" :type emacsmirror :pkgname "python-mode" :required ((("ansi-color" ansi-color) ("cc-mode" cc-cmds) ("cl" cl) ("comint" comint) ("compile" compile) ("custom" custom) ("highlight-indentation" highlight-indentation) ("imenu" imenu) ("info-look" info-look) ("mmm-mode" mmm-auto) ("pymacs" pymacs) ("reporter" reporter) ("shell" shell))) :depends (pymacs mmm-mode highlight-indentation cc-mode)) (:name python-pep8 :description "Minor mode for running `pep8'" :type emacsmirror :pkgname "python-pep8" :required nil) (:name python-pylint :description "Minor mode for running `pylint'" :type emacsmirror :pkgname "python-pylint" :required nil) (:name pythonbrew-mini :description "A simple pythonbrew wrapper for Emacs" :type emacsmirror :pkgname "pythonbrew-mini" :required nil) (:name qa :description "Some elisp to make life easier for QA Engineers" :type emacsmirror :pkgname "qa" :required ((("cl" cl) ("edb" database)))) (:name qa-mode :description "Major mode to edit QA files for SuperMemo" :type emacsmirror :pkgname "qa-mode" :required nil) (:name qda :description "Qda project setup" :type emacsmirror :pkgname "qda" :required ((("cl" cl) ("easymenu" easymenu) ("electric" electric) ("emacs-core" derived pp) ("gnus" gnus-range))) :depends (gnus)) (:name qemu :description "An interface to the qemu emulator" :type emacsmirror :pkgname "qemu" :required nil) (:name qflib :description nil :type emacsmirror :pkgname "qflib" :required ((("easymenu" easymenu)))) (:name qooxdoo :description "Helper functions for working with qooxdoo" :type emacsmirror :pkgname "qooxdoo" :required ((("eproject" eproject eproject-extras) ("thingatpt" thingatpt))) :depends (eproject)) (:name qpdecode :description "Decode mime quoted-printable messages" :type emacsmirror :pkgname "qpdecode" :required ((("fmailutils" fmailutils) ("sendmail" sendmail))) :depends (fmailutils)) (:name qs :description "Search utility" :type emacsmirror :pkgname "qs" :required nil) (:name qsas :description "QuickSilver's Abbreviation Scoring" :type emacsmirror :pkgname "qsas" :required ((("cl" cl)))) (:name qtdoc :description "Qt documentation lookup from within Emacs" :type emacsmirror :pkgname "qtdoc" :required ((("browse-url" browse-url) ("iswitchb" iswitchb)))) (:name qtref :description "An interface with Qt API reference on Emacs" :type emacsmirror :pkgname "qtref" :required ((("cl" cl) ("w3m" w3m))) :depends (w3m)) (:name quack :description "Enhanced support for editing and running Scheme code" :type emacsmirror :pkgname "quack" :required ((("advice" advice) ("browse-url" browse-url) ("cmuscheme" cmuscheme) ("compile" compile) ("custom" custom) ("easymenu" easymenu) ("emacs-core" font-lock) ("scheme" scheme) ("thingatpt" thingatpt)))) (:name query :description "Functions to query the user" :type emacsmirror :pkgname "query" :required ((("cl" cl)))) (:name queue-mail :description "Queue draft e-mail in a directory" :type emacsmirror :pkgname "queue-mail" :required nil) (:name quick-jump :description nil :type emacsmirror :pkgname "quick-jump" :required ((("ring" ring)))) (:name quick-task :description "Execute common tasks quickly" :type emacsmirror :pkgname "quick-task" :required nil) (:name quilt :description nil :type emacsmirror :pkgname "quilt" :required nil) (:name quotes :description "A mode to keep a list of easily searchable quotes" :type emacsmirror :pkgname "quotes" :required nil) (:name radio :description "Text file tag navigator with etags search integration" :type emacsmirror :pkgname "radio" :required ((("cl" cl)))) (:name rail :description "Replace Agent-string Internal Library" :type emacsmirror :pkgname "rail" :required nil) (:name rain :description "Display raindrops in a buffer" :type emacsmirror :pkgname "rain" :required ((("gamegrid" gamegrid)))) (:name rainbow-mode :description "Displays color names with colored background" :type emacsmirror :pkgname "rainbow-mode" :required ((("cl" cl) ("emacs-core" faces) ("regexp-opt" regexp-opt)))) (:name raise-web-directory :description nil :type emacsmirror :pkgname "raise-web-directory" :required nil) (:name random-quote :description "Chooses a random quote from a file" :type emacsmirror :pkgname "random-quote" :required nil) (:name ratcatcher-mode :description nil :type emacsmirror :pkgname "ratcatcher-mode" :required nil) (:name rays :description nil :type emacsmirror :pkgname "rays" :required ((("cl" cl)))) (:name rcirc-alias :description "Provide a local alias for nicks" :type emacsmirror :pkgname "rcirc-alias" :required nil) (:name rcirc-color :description "Color nicks" :type emacsmirror :pkgname "rcirc-color" :required ((("rcirc" rcirc)))) (:name rcirc-controls :description "Control sequences" :type emacsmirror :pkgname "rcirc-controls" :required ((("rcirc" rcirc)))) (:name rcirc-dbus :description "Rcirc dbus notifications" :type emacsmirror :pkgname "rcirc-dbus" :required ((("dbus" dbus)))) (:name rcirc-ding :description "Do something such as beep on channel activity" :type emacsmirror :pkgname "rcirc-ding" :required nil) (:name rcirc-groups :description "An emacs buffer in rcirc-groups major mode" :type emacsmirror :pkgname "rcirc-groups" :required ((("cl" cl) ("rcirc" rcirc)))) (:name rcirc-late-fix :description "Replace s/wrong/right strings on rcirc buffers" :type emacsmirror :pkgname "rcirc-late-fix" :required ((("cl" cl) ("rcirc" rcirc)))) (:name rcirc-notify :description nil :type emacsmirror :pkgname "rcirc-notify" :required nil) (:name rcirc-pounce :description "Maintain a message queue for offline nicks" :type emacsmirror :pkgname "rcirc-pounce" :required ((("rcirc" rcirc)))) (:name rcirc-random-names :description "Randomize names" :type emacsmirror :pkgname "rcirc-random-names" :required nil) (:name rcirc-sound :description "CTCP SOUND support for rcirc " :type emacsmirror :pkgname "rcirc-sound" :required nil) (:name rd-mode :description nil :type emacsmirror :pkgname "rd-mode" :required ((("emacs-core" derived)))) (:name re-suggest :description "[R]egular [E]xpression-based [C]ommand [S]uggester" :type emacsmirror :pkgname "re-suggest" :required ((("cl" cl)))) (:name read-all-emacs-help :description "Show the user the help strings of all functions" :type emacsmirror :pkgname "read-all-emacs-help" :required nil) (:name read-table-data :description nil :type emacsmirror :pkgname "read-table-data" :required ((("cl" cl)))) (:name realplay :description "Interface with Real Player" :type emacsmirror :pkgname "realplay" :required nil) (:name recent :description "Make new file/recent menu and list recent visited files" :type emacsmirror :pkgname "recent" :required nil) (:name recent-changes :description "Handling updating of pages in web trees" :type emacsmirror :pkgname "recent-changes" :required ((("cl" cl) ("page-attributes" page-attributes))) :depends (page-attributes)) (:name recent-files :description "Maintain menu of recently opened files" :type emacsmirror :pkgname "recent-files" :required nil) (:name recentf-buffer :description "Creates the buffer with the list of recently open files" :type emacsmirror :pkgname "recentf-buffer" :required ((("recentf" recentf) ("widget" wid-edit)))) (:name recentf-ext :description "Recentf extensions" :type emacsmirror :pkgname "recentf-ext" :required ((("cl" cl) ("recentf" recentf)))) (:name recipe-mode :description "A mode to make writing, finding recipes easy" :type emacsmirror :pkgname "recipe-mode" :required ((("calc" calc-units) ("emacs-core" font-lock overlay) ("grep" grep) ("iimage" iimage)))) (:name reco :description "'Reco'gnize what is playing on a streaming audio" :type emacsmirror :pkgname "reco" :required ((("url" url url-parse url-vars)))) (:name record :description "Named structure types with named fields for emacs-list" :type emacsmirror :pkgname "record" :required ((("cl" cl)))) (:name recs-mode :description "[R]eg[E]xp-based [C]ommand [S]uggestion" :type emacsmirror :pkgname "recs-mode" :required ((("cl" cl)))) (:name rect+ :description "Extensions to rect.el" :type emacsmirror :pkgname "rect+" :required ((("rect" rect)))) (:name recursive-narrow :description "Narrow-to-region that operates recursively" :type emacsmirror :pkgname "recursive-narrow" :required nil) (:name reddit-mode :description nil :type emacsmirror :pkgname "reddit-mode" :required ((("cl" cl) ("json" json) ("markdown-mode" markdown-mode) ("thingatpt" thingatpt) ("tree-mode" tree-mode) ("url" url url-http))) :depends (tree-mode markdown-mode)) (:name redmine :description "See Redmine on Emacs" :type emacsmirror :pkgname "redmine" :required ((("anything" anything) ("cl" cl) ("xml" xml))) :depends (anything)) (:name redo :description "Redo/undo system for XEmacs" :type emacsmirror :pkgname "redo" :required nil) (:name redo+ :description "Redo/undo system for Emacs" :type emacsmirror :pkgname "redo+" :required nil) (:name redshank :description nil :type emacsmirror :pkgname "redshank" :required ((("cl" cl) ("easymenu" easymenu) ("eldoc" eldoc) ("paredit" paredit) ("skeleton" skeleton))) :depends (paredit)) (:name redspace :description nil :type emacsmirror :pkgname "redspace" :required nil) (:name reduce-ide :description "REDUCE code editing mode for GNU Emacs" :type emacsmirror :pkgname "reduce-ide" :required ((("comint" comint) ("emacs-core" font-lock) ("paren" paren) ("timer" timer)))) (:name refdb-mode :description "Minor mode for RefDB interaction" :type emacsmirror :pkgname "refdb-mode" :required ((("easy-mmode" easy-mmode) ("easymenu" easymenu) ("emacs-core" derived)))) (:name reftex :description "Version and autoloads of RefTeX" :type emacsmirror :pkgname "reftex" :required ((("cl" cl) ("custom" custom) ("easymenu" easymenu) ("reporter" reporter)))) (:name regex-tool :description "A regular expression evaluation tool for programmers" :type emacsmirror :pkgname "regex-tool" :required ((("cl" cl)))) (:name regexp-char :description "Generate regular expression matching a character" :type emacsmirror :pkgname "regexp-char" :required nil) (:name regexpl :description "Search and replace list of patterns and replacements" :type emacsmirror :pkgname "regexpl" :required nil) (:name regression :description "Some simple stats functions" :type emacsmirror :pkgname "regression" :required nil) (:name relax :description "For browsing and interacting with CouchDB" :type emacsmirror :pkgname "relax" :required ((("gnus" mm-util) ("json" json) ("thingatpt" thingatpt) ("url" url))) :depends (gnus)) (:name relisp :description "Library for ruby/elisp interaction" :type emacsmirror :pkgname "relisp" :required nil) (:name relocate-page :description "Move a page, adjusting (local) URLs in it" :type emacsmirror :pkgname "relocate-page" :required ((("cl" cl) ("page-attributes" page-attributes) ("webmaster-macros" webmaster-macros))) :depends (webmaster-macros page-attributes)) (:name remap-del-key :description nil :type emacsmirror :pkgname "remap-del-key" :required nil) (:name remap-parens :description nil :type emacsmirror :pkgname "remap-parens" :required nil) (:name remarks :description "Text annotations" :type emacsmirror :pkgname "remarks" :required ((("cl" cl) ("emacs-core" overlay) ("tellib" tellib))) :depends (tellib)) (:name remem :description nil :type emacsmirror :pkgname "remem" :required ((("emacs-core" overlay) ("itimer" itimer) ("time-stamp" time-stamp) ("timer" timer))) :depends (itimer)) (:name remember :description "A mode for quickly jotting down things to remember" :type emacsmirror :pkgname "remember" :required ((("bbdb" bbdb-com) ("bibl-mode" bibl-mode) ("bookmark" bookmark) ("emacs-wiki-journal" emacs-wiki-journal) ("planner" planner) ("url" url) (nil emacs-wiki-blosxom))) :depends (planner bibl-mode bbdb)) (:name remind :description nil :type emacsmirror :pkgname "remind" :required ((("planner" planner))) :depends (planner)) (:name remind-conf-mode :description "A mode to help configure remind" :type emacsmirror :pkgname "remind-conf-mode" :required ((("auto-complete" auto-complete) ("emacs-core" font-lock overlay))) :depends (auto-complete)) (:name removable-media :description "Find files that may have been put on another drive" :type emacsmirror :pkgname "removable-media" :required nil) (:name repdet :description "Detect repetition in user activity" :type emacsmirror :pkgname "repdet" :required ((("loops" loops))) :depends (loops)) (:name repeat-insert :description nil :type emacsmirror :pkgname "repeat-insert" :required ((("cl" cl)))) (:name repeatable :description "Modify commands to repeat on last key event" :type emacsmirror :pkgname "repeatable" :required ((("advice" advice)))) (:name replace-regexp-list :description nil :type emacsmirror :pkgname "replace-regexp-list" :required nil) (:name reportmail :description nil :type emacsmirror :pkgname "reportmail" :required ((("itimer" itimer) ("timer" timer))) :depends (itimer)) (:name repository-root :description "Deduce the repository root directory for a given file" :type emacsmirror :pkgname "repository-root" :required ((("widget" wid-edit widget)))) (:name require-or-install :description "Download and automagically install Emacs Lisp" :type emacsmirror :pkgname "require-or-install" :required ((("install-elisp" install-elisp))) :depends (install-elisp)) (:name restorebuffer :description nil :type emacsmirror :pkgname "restorebuffer" :required ((("load-directory" load-directory) (nil library-path))) :depends (load-directory)) (:name review-mode :description nil :type emacsmirror :pkgname "review-mode" :required ((("emacs-core" font-lock)))) (:name revive :description nil :type emacsmirror :pkgname "revive" :required ((("cc-mode" cc-mode) ("mew" mew) ("mh-e" mh-e mh-utils) ("mpg123" mpg123) ("view" view))) :depends (mpg123 mew cc-mode)) (:name rewrite :description "Utility to rewrite text files with easier regular expression handling" :type emacsmirror :pkgname "rewrite" :required nil) (:name rexx-mode :description nil :type emacsmirror :pkgname "rexx-mode" :required ((("comint" comint) ("emacs-core" font-lock)))) (:name rf-vm :description nil :type emacsmirror :pkgname "rf-vm" :required nil) (:name rfc :description "View RFC" :type emacsmirror :pkgname "rfc" :required ((("w3" w3))) :depends (w3)) (:name rfc-view :description nil :type emacsmirror :pkgname "rfc-view" :required nil) (:name rfcr :description nil :type emacsmirror :pkgname "rfcr" :required ((("widget" widget)))) (:name rfringe :description "Display the relative location of the region, in the fringe" :type emacsmirror :pkgname "rfringe" :required ((("emacs-core" fringe)))) (:name rheeet-mail :description "Rheeeeeeeeet!" :type emacsmirror :pkgname "rheeet-mail" :required ((("fmailutils" fmailutils) ("order-head" order-head))) :depends (order-head fmailutils)) (:name rhtml :description nil :type emacsmirror :pkgname "rhtml" :required ((("cl" cl) ("ruby-mode" ruby-mode) ("sgml-mode" sgml-mode)))) (:name rhtml-minor-mode :description "Minor mode for Ruby .rhtml files that" :type emacsmirror :pkgname "rhtml-minor-mode" :required nil) (:name ri :description "Ruby Documentation Lookup" :type emacsmirror :pkgname "ri" :required ((("ido" ido) ("thingatpt" thingatpt)))) (:name ricette-mode :description "Vedere ricette" :type emacsmirror :pkgname "ricette-mode" :required nil) (:name rightjustify :description "Right justifies the region" :type emacsmirror :pkgname "rightjustify" :required nil) (:name rijndael :description "Rijndael (AES) block cipher implementation" :type emacsmirror :pkgname "rijndael" :required nil) (:name rinari :description "Rinari Is Not A Rails IDE" :type emacsmirror :pkgname "rinari" :required ((("cl" cl) ("comint" comint) ("compile" compile) ("jump" jump) ("pcomplete" pcomplete) ("ruby-compilation" ruby-compilation) ("ruby-mode" ruby-mode))) :depends (ruby-compilation jump)) (:name rmail-extras :description "Remote inboxes for RMAIL, extend \"time\" with multiple mail flags" :type emacsmirror :pkgname "rmail-extras" :required ((("ange-ftp" ange-ftp) ("cl" cl) ("rmail" rmail)))) (:name rmail-frobs :description "Random RMAIL utilities" :type emacsmirror :pkgname "rmail-frobs" :required nil) (:name rmail-spamprobe :description "Interact with spamprobe from within RMAIL" :type emacsmirror :pkgname "rmail-spamprobe" :required ((("rmail" rmail)))) (:name rmime :description "Read MIME messages" :type emacsmirror :pkgname "rmime" :required ((("mh-e" mh-e) ("rmail" rmail) ("vm" vm))) :depends (vm)) (:name rmoo :description nil :type emacsmirror :pkgname "rmoo" :required ((("advice" advice) ("cl" cl) ("comint" comint) ("emacspeak" emacspeak-fix-interactive) ("w3" w3) (nil emacspeak-speak))) :depends (w3 emacspeak)) (:name rnc-mode :description nil :type emacsmirror :pkgname "rnc-mode" :required ((("emacs-core" font-lock)))) (:name rpm :description "Front end for rpm (the RedHat Package Manager) now widely" :type emacsmirror :pkgname "rpm" :required ((("custom" custom) ("dired" dired) ("elib" cookie))) :depends (elib)) (:name rpn-edit :description "Reverse polish editing commands, aimed at voice command use" :type emacsmirror :pkgname "rpn-edit" :required ((("cl" cl)))) (:name rpn-old :description nil :type emacsmirror :pkgname "rpn-old" :required nil) (:name rs-info :description "Some info related functions" :type emacsmirror :pkgname "rs-info" :required nil) (:name rsl-mode :description nil :type emacsmirror :pkgname "rsl-mode" :required nil) (:name rspec-mode :description "Enhance ruby-mode for RSpec" :type emacsmirror :pkgname "rspec-mode" :required ((("ansi-color" ansi-color) ("ruby-mode" ruby-mode)) (("snippet" snippet)))) (:name rtest :description "Top of code common to both Elisp and CL rtest" :type emacsmirror :pkgname "rtest" :required ((("arrange" arrange) ("caselet" caselet) ("cl" cl) ("emacs-core" pp) ("hideshow" hideshow) ("reporter" reporter) ("tehom-cl" tehom-cl) ("tehom-font-lock" tehom-font-lock) ("tehom-inflisp" tehom-inflisp))) :depends (tehom-inflisp tehom-font-lock tehom-cl caselet)) (:name rtf :description "Mode for editing RTF documents" :type emacsmirror :pkgname "rtf" :required ((("cl" cl) ("emacs-core" code-pages)))) (:name ruby-block :description "Highlight matching block" :type emacsmirror :pkgname "ruby-block" :required ((("ruby-mode" ruby-mode)))) (:name ruby-comint :description "Run a ruby process in a compilation buffer" :type emacsmirror :pkgname "ruby-comint" :required nil) (:name ruby-compilation :description "Run a ruby process in a compilation buffer" :type emacsmirror :pkgname "ruby-compilation" :required ((("ansi-color" ansi-color) ("rinari" pcmpl-rake))) :depends (rinari)) (:name ruby-electric :description "Electric editing commands for ruby files" :type emacsmirror :pkgname "ruby-electric" :required ((("ruby-mode" ruby-mode)))) (:name ruby-end :description "Automatic insertion of end blocks for Ruby" :type emacsmirror :pkgname "ruby-end" :required nil) (:name ruby-test :description "Test runner for ruby unit tests" :type emacsmirror :pkgname "ruby-test" :required nil) (:name ruby-test-mode :description "Minor mode for Behaviour and Test Driven" :type emacsmirror :pkgname "ruby-test-mode" :required nil) (:name rudel :description "A collaborative editing framework for Emacs" :type emacsmirror :pkgname "rudel" :required ((("cedet" data-debug eieio eieio-base eieio-datadebug eieio-speedbar speedbar) ("cl" cl) ("custom" custom) ("easy-mmode" easy-mmode) ("easymenu" easymenu) ("emacs-core" image warnings) ("gnus" format-spec sasl) ("xml" xml) ("zeroconf" zeroconf))) :depends (gnus cedet)) (:name run-assoc :description "Run program or lisp function associated with a file" :type emacsmirror :pkgname "run-assoc" :required nil) (:name run-command :description "Library to facilitate running external commands" :type emacsmirror :pkgname "run-command" :required ((("comint" comint)))) (:name rusewiki :description "Edit pages on an RuseWiki wiki using curl" :type emacsmirror :pkgname "rusewiki" :required nil) (:name rust-mode :description "CC Mode derived mode for rust" :type emacsmirror :pkgname "rust-mode" :required ((("cc-mode" cc-fonts cc-langs cc-mode))) :depends (cc-mode)) (:name rvm :description "Emacs integration for rvm" :type emacsmirror :pkgname "rvm" :required ((("button" button) ("cl" cl) ("debug" debug) ("easymenu" easymenu) ("ewoc" ewoc) ("find-func" find-func) ("help" help)))) (:name sa-learn-invoke :description nil :type emacsmirror :pkgname "sa-learn-invoke" :required nil) (:name safe-equal :description "Test even circular objects for equality" :type emacsmirror :pkgname "safe-equal" :required ((("cl" cl)))) (:name safescrollmouse :description nil :type emacsmirror :pkgname "safescrollmouse" :required nil) (:name saft-to :description nil :type emacsmirror :pkgname "saft-to" :required nil) (:name sas :description nil :type emacsmirror :pkgname "sas" :required ((("emacs-core" font-lock) ("shell" shell)))) (:name sass-mode :description "Major mode for editing Sass files" :type emacsmirror :pkgname "sass-mode" :required ((("haml-mode" haml-mode))) :depends (haml-mode)) (:name save-and-dwim :description nil :type emacsmirror :pkgname "save-and-dwim" :required nil) (:name save-emacs-state :description nil :type emacsmirror :pkgname "save-emacs-state" :required ((("load-directory" load-directory))) :depends (load-directory)) (:name save-history :description "Save mini-buffer histories between sessions" :type emacsmirror :pkgname "save-history" :required nil) (:name save-kill :description nil :type emacsmirror :pkgname "save-kill" :required ((("save-emacs-state" save-emacs-state))) :depends (save-emacs-state)) (:name save-load-path :description "Save load-path and reuse it to test" :type emacsmirror :pkgname "save-load-path" :required nil) (:name save-sexp :description "Replace S-expressions in files to save variables" :type emacsmirror :pkgname "save-sexp" :required nil) (:name save-undo :description "Preserve undo boundary across multiple-buffer edits" :type emacsmirror :pkgname "save-undo" :required nil) (:name save-visited-files :description "Save opened files across sessions" :type emacsmirror :pkgname "save-visited-files" :required nil) (:name savebuffer :description nil :type emacsmirror :pkgname "savebuffer" :required ((("filenames-in-env" filenames-in-env))) :depends (filenames-in-env)) (:name savekill :description "Save kill ring to disk" :type emacsmirror :pkgname "savekill" :required ((("cl" cl)))) (:name saw-client :description "Interaction with sawfish" :type emacsmirror :pkgname "saw-client" :required nil) (:name sawfish :description "Sawfish mode" :type emacsmirror :pkgname "sawfish" :required ((("cl" cl) ("easymenu" easymenu) ("emacs-core" font-lock pp) ("inf-lisp" inf-lisp) ("info" info) ("regexp-opt" regexp-opt) ("thingatpt" thingatpt) (nil lisp-doc rep\.structures)))) (:name scan :description "Editing Sound Files" :type emacsmirror :pkgname "scan" :required ((("cl" cl) ("gnus" gnus-util))) :depends (gnus)) (:name scel :description "IDE for working with the SuperCollider language" :type emacsmirror :pkgname "scel" :required ((("cl" cl) ("emacs-core" font-lock) ("tree-widget" tree-widget)) (("view" view) ("xcscope" xcscope)))) (:name scheme-complete :description nil :type emacsmirror :pkgname "scheme-complete" :required ((("cl" cl) ("scheme" scheme)))) (:name scheme-here :description "Cmuscheme extension for multiple inferior processes" :type emacsmirror :pkgname "scheme-here" :required ((("cmuscheme" cmuscheme) ("comint" comint) ("scheme" scheme)))) (:name scim-bridge :description nil :type emacsmirror :pkgname "scim-bridge" :required nil) (:name scrat :description "Access *scratch* like you do *shell*" :type emacsmirror :pkgname "scrat" :required nil) (:name scratch :description "Mode-specific scratch buffers" :type emacsmirror :pkgname "scratch" :required nil) (:name scratch-log :description nil :type emacsmirror :pkgname "scratch-log" :required ((("cl" cl)))) (:name screen-lines :description "A minor mode for screen-line-based point motion" :type emacsmirror :pkgname "screen-lines" :required nil) (:name screen-setups :description nil :type emacsmirror :pkgname "screen-setups" :required ((("cl" cl)))) (:name screencast :description "Demonstrate the capabilities of Emacs" :type emacsmirror :pkgname "screencast" :required nil) (:name screenplay :description "A major mode for editing screenplay files" :type emacsmirror :pkgname "screenplay" :required ((("reporter" reporter)))) (:name screenshot :description "Take a screenshot in Emacs" :type emacsmirror :pkgname "screenshot" :required ((("cl" cl)) (("yaoddmuse" yaoddmuse)))) (:name scrl-margs :description "Scroll margins minor mode" :type emacsmirror :pkgname "scrl-margs" :required nil) (:name scrobble :description "Interfacing with last.fm" :type emacsmirror :pkgname "scrobble" :required ((("cl" cl) ("gnus" mm-url))) :depends (gnus)) (:name scroll-in-place :description nil :type emacsmirror :pkgname "scroll-in-place" :required nil) (:name scss-mode :description "Major mode for editing SCSS files" :type emacsmirror :pkgname "scss-mode" :required ((("compile" compile) ("emacs-core" derived) ("flymake" flymake)))) (:name sdic :description nil :type emacsmirror :pkgname "sdic" :required nil) (:name sdic-inline :description "Program to view dictionary" :type emacsmirror :pkgname "sdic-inline" :required ((("sdic" sdic))) :depends (sdic)) (:name sdic-inline-pos-tip :description "Extension for sdic-inline-mode using pos-tip.el" :type emacsmirror :pkgname "sdic-inline-pos-tip" :required ((("pos-tip" pos-tip) ("sdic-inline" sdic-inline))) :depends (sdic-inline pos-tip)) (:name search-engines :description "Query AV via w3" :type emacsmirror :pkgname "search-engines" :required nil) (:name search-web :description nil :type emacsmirror :pkgname "search-web" :required nil) (:name selftest :description "Personal unit tests" :type emacsmirror :pkgname "selftest" :required (nil (("twit" twit)))) (:name semi :description "Setup file for MIME-View" :type emacsmirror :pkgname "semi" :required ((("apel" emu filename invisible path-util poe static) ("bbdb" bbdb bbdb-com) ("cl" cl) ("custom" custom) ("emacs-core" image) ("flim" eword-encode mel mime std11) ("gnus" mailcap pgg-def pgg-parse) ("mail-extr" mail-extr) ("mail-utils" mail-utils) ("mailcrypt" mailcrypt) ("sendmail" sendmail) ("signature" signature) ("tiny-tools" calist) ("w3" w3))) :depends (w3 tiny-tools signature mailcrypt gnus flim bbdb apel)) (:name semibalanced :description nil :type emacsmirror :pkgname "semibalanced" :required nil) (:name sendmail-alias :description "Parse a sendmail-style alias file" :type emacsmirror :pkgname "sendmail-alias" :required ((("sendmail" sendmail)))) (:name sendmail-mode :description "Major mode for editing Sendmail configuration files" :type emacsmirror :pkgname "sendmail-mode" :required ((("regexp-opt" regexp-opt)))) (:name sepia :description "Simple Emacs-Perl InterAction: ugly, yet effective" :type emacsmirror :pkgname "sepia" :required ((("button" button) ("cl" cl) ("cperl-mode" cperl-mode) ("eldoc" eldoc) ("gud" gud) ("ido" ido) ("tree-widget" tree-widget) ("w3m" w3m w3m-perldoc) (nil sepia-snippet))) :depends (w3m cperl-mode)) (:name seq-numbering :description nil :type emacsmirror :pkgname "seq-numbering" :required nil) (:name sequential-command :description "Many commands into one command" :type emacsmirror :pkgname "sequential-command" :required ((("cl" cl)) (("org-mode" org)))) (:name services :description "Services database access functions" :type emacsmirror :pkgname "services" :required ((("cl" cl)))) (:name sese :description nil :type emacsmirror :pkgname "sese" :required ((("emacs-core" font-lock) ("filladapt" filladapt))) :depends (filladapt)) (:name session :description "Use variables, registers and buffer places across sessions" :type emacsmirror :pkgname "session" :required ((("cl" cl) ("custom" custom)))) (:name setnu :description nil :type emacsmirror :pkgname "setnu" :required nil) (:name setq-trap :description "Debug on entry to setq when specific symbols are modified" :type emacsmirror :pkgname "setq-trap" :required ((("emacs-core" backquote)))) (:name sfst :description "Major mode for editing SFST files" :type emacsmirror :pkgname "sfst" :required nil) (:name sgml-id :description "Set of functions for finding cross-referenced IDs" :type emacsmirror :pkgname "sgml-id" :required nil) (:name sh-proxy :description "Experiment with elisp proxies for shell commands" :type emacsmirror :pkgname "sh-proxy" :required nil) (:name shbuf :description "Network-shared buffers minor mode" :type emacsmirror :pkgname "shbuf" :required ((("cl" cl) ("distel" erlext))) :depends (distel)) (:name shell-command :description "Enables tab-completion for `shell-command'" :type emacsmirror :pkgname "shell-command" :required ((("comint" comint) ("custom" custom) ("shell" shell)))) (:name shell-completion :description "Provides tab completion for shell commands" :type emacsmirror :pkgname "shell-completion" :required ((("cl" cl) ("comint" comint)))) (:name shell-history :description "Integration with shell history" :type emacsmirror :pkgname "shell-history" :required ((("cl" cl)))) (:name shell-plus :description "Extra bits for talking to shells" :type emacsmirror :pkgname "shell-plus" :required nil) (:name shell-pop :description "Helps you pop up and pop out shell buffer easily" :type emacsmirror :pkgname "shell-pop" :required nil) (:name shell-toggle :description "Toggle to and from the *shell* buffer" :type emacsmirror :pkgname "shell-toggle" :required nil) (:name shen-mode :description "A major mode for editing shen source code" :type emacsmirror :pkgname "shen-mode" :required ((("comint" comint) ("imenu" imenu) ("lisp-mode" lisp-mode)))) (:name shindent :description "Indentation support for shell-script modes for some shells" :type emacsmirror :pkgname "shindent" :required ((("advice" advice) ("sh-script" sh-script)))) (:name shop :description "Generate random shopping lists" :type emacsmirror :pkgname "shop" :required nil) (:name show-arglist :description "Showing arglist of function at point" :type emacsmirror :pkgname "show-arglist" :required nil) (:name show-functions :description "List functions in a buffer" :type emacsmirror :pkgname "show-functions" :required ((("widget" wid-edit)))) (:name show-whitespace-mode :description "Simple mode to highlight whitespaces" :type emacsmirror :pkgname "show-whitespace-mode" :required nil) (:name show-wspace :description "Highlight whitespace of various kinds" :type emacsmirror :pkgname "show-wspace" :required ((("cl" cl)))) (:name sidebrain :description "Programmer's memory aide" :type emacsmirror :pkgname "sidebrain" :required ((("cl" cl) ("gnus" time-date) ("xml" xml))) :depends (gnus)) (:name sie :description "Interpreter of a Scheme-like language" :type emacsmirror :pkgname "sie" :required nil) (:name sig-quote :description "Add quotes to signature according to recipients (Gnus/RMAIL/MH-E/vm)" :type emacsmirror :pkgname "sig-quote" :required ((("cl" cl) ("gnus" message) ("mail-utils" mail-utils) ("mh-e" mh-comp) ("sendmail" sendmail) ("vm" vm))) :depends (vm gnus)) (:name sigadapt :description nil :type emacsmirror :pkgname "sigadapt" :required ((("bbdb" bbdb bbdb-com))) :depends (bbdb)) (:name signature :description "Small hack to insert a custom signature" :type emacsmirror :pkgname "signature" :required nil) (:name silly-mail :description "Generate bozotic mail headers" :type emacsmirror :pkgname "silly-mail" :required ((("horoscope" horoscope) ("kibologize" kibologize) ("sendmail" sendmail) ("shop" shop) ("uboat" uboat) ("youwill" youwill))) :depends (youwill uboat shop kibologize horoscope)) (:name simo :description "Simple image manuplation object" :type emacsmirror :pkgname "simo" :required ((("cedet" eieio))) :depends (cedet)) (:name simple-server :description "A SIMPLE web-server run by emacs" :type emacsmirror :pkgname "simple-server" :required ((("htmlize" htmlize) ("org-mode" org org-exp))) :depends (org-mode)) (:name simple-slides :description nil :type emacsmirror :pkgname "simple-slides" :required nil) (:name simplegeo :description "Library to access SimpleGeo's API" :type emacsmirror :pkgname "simplegeo" :required nil) (:name simplemerge :description nil :type emacsmirror :pkgname "simplemerge" :required nil) (:name simplenote :description "Interact with simple-note.appspot.com" :type emacsmirror :pkgname "simplenote" :required ((("cl" cl) ("json" json) ("url" url) ("widget" widget)))) (:name sinasi :description "Sinasi Is Not A SproutCore IDE" :type emacsmirror :pkgname "sinasi" :required ((("cl" cl) ("jump" jump))) :depends (jump)) (:name sinatra :description "Minor mode for the Sinatra web mini-framework" :type emacsmirror :pkgname "sinatra" :required ((("cl" cl) ("nxhtml" mumamo) ("rinari" inf-ruby) ("ruby-compilation" ruby-compilation) ("ruby-mode" ruby-mode))) :depends (ruby-compilation rinari nxhtml)) (:name singlebind :description "Bind commands to single characters" :type emacsmirror :pkgname "singlebind" :required nil) (:name ska-skel-matlab :description "My matlab skeletons" :type emacsmirror :pkgname "ska-skel-matlab" :required nil) (:name skip-initial-comments :description "Skip initial comments when loading a file" :type emacsmirror :pkgname "skip-initial-comments" :required nil) (:name skype :description "Skype UI for emacs users." :type emacsmirror :pkgname "skype" :required ((("cl" cl) ("dbus" dbus)))) (:name slack-rtm :description "An elisp implementation of the Remember The Milk API" :type emacsmirror :pkgname "slack-rtm" :required ((("cl" cl) ("custom" custom) ("ido" ido) ("org-mode" org) ("url" url-http url-util) ("xml" xml))) :depends (org-mode)) (:name slashdot :description "View and browse headlines captured with slashcache.lisp" :type emacsmirror :pkgname "slashdot" :required ((("cl" cl)))) (:name slime :description "Superior Lisp Interaction Mode for Emacs" :type emacsmirror :pkgname "slime" :required ((("apropos" apropos) ("arc-mode" arc-mode) ("browse-url" browse-url) ("cl" cl) ("comint" comint) ("compile" compile) ("easymenu" easymenu) ("elp" elp) ("emacs-core" bytecomp font-lock overlay pp) ("etags" etags) ("gud" gud) ("outline" outline) ("thingatpt" thingatpt) ("timer" timer) ("tree-widget" tree-widget)))) (:name slime-complete-locals :description nil :type emacsmirror :pkgname "slime-complete-locals" :required nil) (:name slisp :description nil :type emacsmirror :pkgname "slisp" :required nil) (:name smart-compile :description "An interface to `compile'" :type emacsmirror :pkgname "smart-compile" :required nil) (:name smart-dabbrev :description "Smarter dabbrev-expand" :type emacsmirror :pkgname "smart-dabbrev" :required ((("dabbrev" dabbrev)))) (:name smart-dash :description "Smart-Dash minor mode" :type emacsmirror :pkgname "smart-dash" :required nil) (:name smart-dnd :description "User-configurable drag-n-drop feature" :type emacsmirror :pkgname "smart-dnd" :required ((("emacs-core" dnd)))) (:name smart-mark :description "Smart Mark for GNU Emacs" :type emacsmirror :pkgname "smart-mark" :required ((("sgml-mode" sgml-mode) ("thingatpt" thingatpt)))) (:name smart-quotes :description "Smart Quotes minor mode for GNU Emacs" :type emacsmirror :pkgname "smart-quotes" :required nil) (:name smart-tab :description "Intelligent tab completion and indentation" :type emacsmirror :pkgname "smart-tab" :required ((("easy-mmode" easy-mmode)))) (:name smart-todo :description "Makes it easier to quickly add todos" :type emacsmirror :pkgname "smart-todo" :required nil) (:name smartchr :description "Emacs version of smartchr.vim" :type emacsmirror :pkgname "smartchr" :required ((("cl" cl)))) (:name smartquotes :description "Insertion of unicode quotes in text documents" :type emacsmirror :pkgname "smartquotes" :required nil) (:name smartsig :description "Smart signature selection based on message content" :type emacsmirror :pkgname "smartsig" :required ((("cl" cl)))) (:name smarty-mode :description "Major mode for editing smarty templates" :type emacsmirror :pkgname "smarty-mode" :required ((("emacs-core" font-lock) ("regexp-opt" regexp-opt)))) (:name smex :description "M-x interface with Ido-style fuzzy matching" :type emacsmirror :pkgname "smex" :required ((("cl" cl) ("ido" ido)))) (:name sml-mode :description "Major mode for editing (Standard) ML" :type emacsmirror :pkgname "sml-mode" :required ((("cl" cl) ("comint" comint) ("compile" compile) ("custom" custom) ("info" info) ("skeleton" skeleton) ("smerge-mode" smerge-mode)))) (:name smooth-scroll :description "Minor mode for smooth scrolling" :type emacsmirror :pkgname "smooth-scroll" :required ((("cl" cl) ("easy-mmode" easy-mmode) ("emacs-core" simple)))) (:name soap-client :description "Access SOAP web services from Emacs" :type emacsmirror :pkgname "soap-client" :required ((("cl" cl) ("emacs-core" warnings) ("gnus" mm-decode) ("url" url url-http url-util) ("xml" xml))) :depends (gnus)) (:name sokoban :description "Sokoban Game" :type emacsmirror :pkgname "sokoban" :required ((("cl" cl)))) (:name songbook :description "Major mode for editing the song files of Patacrep songbook" :type emacsmirror :pkgname "songbook" :required nil) (:name sorter :description "Cycles dired listing between name/date/extension/size" :type emacsmirror :pkgname "sorter" :required nil) (:name source-highlight :description nil :type emacsmirror :pkgname "source-highlight" :required nil) (:name sourcepair :description nil :type emacsmirror :pkgname "sourcepair" :required nil) (:name sourcepawn-mode :description nil :type emacsmirror :pkgname "sourcepawn-mode" :required nil) (:name space-chord :description "Key chord with Space" :type emacsmirror :pkgname "space-chord" :required ((("key-chord" key-chord))) :depends (key-chord)) (:name spaces :description "Create and switch between named window configurations" :type emacsmirror :pkgname "spaces" :required ((("cl" cl) ("ido" ido)))) (:name spamprobe :description nil :type emacsmirror :pkgname "spamprobe" :required nil) (:name spamtrap :description "Check message recipients for spam traps" :type emacsmirror :pkgname "spamtrap" :required nil) (:name spartan-wiki :description "A really spartan personal wiki" :type emacsmirror :pkgname "spartan-wiki" :required ((("cl" cl)))) (:name speck :description "Minor mode for spell checking" :type emacsmirror :pkgname "speck" :required ((("cl" cl)))) (:name specman-mode :description "Mode for editing specman files" :type emacsmirror :pkgname "specman-mode" :required ((("cl" cl) ("easymenu" easymenu) ("emacs-core" font-lock) ("filladapt" filladapt) ("imenu" imenu) ("reporter" reporter))) :depends (filladapt)) (:name spectre-mode :description "Major mode providing a spectre mode hook for fontification" :type emacsmirror :pkgname "spectre-mode" :required ((("cedet" speedbar) ("emacs-core" font-lock))) :depends (cedet)) (:name speechd :description "Library for accessing Speech Dispatcher" :type emacsmirror :pkgname "speechd" :required ((("cedet" eieio) ("cl" cl) ("reporter" reporter))) :depends (cedet)) (:name speedread :description nil :type emacsmirror :pkgname "speedread" :required nil) (:name split-root :description "Root window splitter" :type emacsmirror :pkgname "split-root" :required ((("cl" cl)))) (:name split-screen :description nil :type emacsmirror :pkgname "split-screen" :required nil) (:name split-window-multi :description "Multi-way split of window" :type emacsmirror :pkgname "split-window-multi" :required nil) (:name spoiler-space :description "1-key, automatically insert spoiler space" :type emacsmirror :pkgname "spoiler-space" :required nil) (:name spokes :description nil :type emacsmirror :pkgname "spokes" :required nil) (:name spookmime :description "Echelon fodder mime boundary generators" :type emacsmirror :pkgname "spookmime" :required nil) (:name spread :description "A very simple spreadsheet mode for GNU emacs" :type emacsmirror :pkgname "spread" :required nil) (:name sql-completion :description "Completion in *SQL* for mysql" :type emacsmirror :pkgname "sql-completion" :required ((("cl" cl) ("mysql" mysql)))) (:name sql-indent :description "Indentation of SQL statements" :type emacsmirror :pkgname "sql-indent" :required ((("regexp-opt" regexp-opt) ("sql" sql)))) (:name sql-with-placeholders :description "Handle SQL statements with placeholders gently" :type emacsmirror :pkgname "sql-with-placeholders" :required ((("sql" sql)))) (:name sqled-mode :description "Major Mode for editing sql, sqlplus and pl/sql code" :type emacsmirror :pkgname "sqled-mode" :required ((("custom" custom) ("easymenu" easymenu)))) (:name sqlite-dump :description "View dump of sqlite database file" :type emacsmirror :pkgname "sqlite-dump" :required ((("advice" advice) ("apel" poe) ("cl" cl))) :depends (apel)) (:name sqlplus :description "User friendly interface to SQL*Plus and support for PL/SQL compilation" :type emacsmirror :pkgname "sqlplus" :required ((("cl" cl) ("emacs-core" font-lock) ("recentf" recentf) ("skeleton" skeleton) ("sql" sql) ("tabify" tabify)))) (:name sqlplus-mode :description "Mode for editing SQL and testing via SQL*Plus" :type emacsmirror :pkgname "sqlplus-mode" :required ((("emacs-core" font-lock)))) (:name ssh :description "Remote login interface" :type emacsmirror :pkgname "ssh" :required ((("comint" comint) ("shell" shell)))) (:name ssh-agent :description nil :type emacsmirror :pkgname "ssh-agent" :required nil) (:name ssh-config :description "Manage both ssh and dsh confguration from emacs" :type emacsmirror :pkgname "ssh-config" :required ((("org-mode" org)) (("emacs-core" files) ("vc" vc-hooks))) :depends (org-mode)) (:name ssh-config-mode :description "Mode for fontification of ~/.ssh/config" :type emacsmirror :pkgname "ssh-config-mode" :required nil) (:name starteam :description "VC-type mode for StarTeam" :type emacsmirror :pkgname "starteam" :required ((("dired" dired) ("elib" string) ("vc" vc))) :depends (elib)) (:name startproject :description "Simple project starter" :type emacsmirror :pkgname "startproject" :required ((("ido" ido)) (("vc" vc)))) (:name startup-messages :description nil :type emacsmirror :pkgname "startup-messages" :required nil) (:name startupd :description "Modular loading of Emacs configuration" :type emacsmirror :pkgname "startupd" :required nil) (:name status-table :description nil :type emacsmirror :pkgname "status-table" :required ((("page-attributes" page-attributes) ("page-status" page-status) ("webmaster-macros" webmaster-macros))) :depends (webmaster-macros page-status page-attributes)) (:name steno :description "Edit time-stamped entries in text notepads under Emacs" :type emacsmirror :pkgname "steno" :required ((("emacs-core" derived)))) (:name sticky :description "Sticky key for capital letters" :type emacsmirror :pkgname "sticky" :required ((("cl" cl)))) (:name stream :description "A stream library in elisp" :type emacsmirror :pkgname "stream" :required nil) (:name strfile :description "Edit fortune files" :type emacsmirror :pkgname "strfile" :required nil) (:name string-fns :description "An assortment of string-manipulation functions" :type emacsmirror :pkgname "string-fns" :required nil) (:name string-template :description "Support for $-substitution" :type emacsmirror :pkgname "string-template" :required ((("cl" cl)))) (:name strptime :description "Partial implementation of POSIX date and time parsing" :type emacsmirror :pkgname "strptime" :required ((("regexp-opt" regexp-opt)))) (:name structure-edit :description nil :type emacsmirror :pkgname "structure-edit" :required nil) (:name studlycaps :description "StudlyCapify as you type" :type emacsmirror :pkgname "studlycaps" :required nil) (:name stufe :description nil :type emacsmirror :pkgname "stufe" :required nil) (:name stuffcast :description "Stuff a PMP with content" :type emacsmirror :pkgname "stuffcast" :required nil) (:name subedit :description "Edit part of a buffer in a new buffer" :type emacsmirror :pkgname "subedit" :required nil) (:name subtitles :description nil :type emacsmirror :pkgname "subtitles" :required nil) (:name sudo-ext :description "Sudo support" :type emacsmirror :pkgname "sudo-ext" :required ((("cl" cl)))) (:name sudoku :description "Simple sudoku game, can download puzzles from the web" :type emacsmirror :pkgname "sudoku" :required ((("cl" cl) ("easy-mmode" easy-mmode) ("easymenu" easymenu) ("url" url) ("w3" w3))) :depends (w3)) (:name suggbind :description "Suggest key bindings for M-x commands AFTER they complete" :type emacsmirror :pkgname "suggbind" :required ((("advice" advice)))) (:name summarye :description "List up matched strings from a buffer, and display them in summary buffer" :type emacsmirror :pkgname "summarye" :required ((("cl" cl) ("which-func" which-func)))) (:name sunrise-commander :description "Two-pane file manager for Emacs based on Dired and inspired by MC" :type emacsmirror :pkgname "sunrise-commander" :required ((("bookmark" bookmark) ("cl" cl) ("custom" cus-edit) ("desktop" desktop) ("dired" dired) ("dired-aux" dired-aux) ("dired-x" dired-x) ("easymenu" easymenu) ("emacs-core" font-lock sort) ("enriched" enriched) ("eshell" esh-mode) ("find-dired" find-dired) ("recentf" recentf) ("term" term) ("tree-widget" tree-widget))) :depends (eshell)) (:name supertab :description nil :type emacsmirror :pkgname "supertab" :required nil) (:name surround :description "Emulate surround.vim from Vim" :type emacsmirror :pkgname "surround" :required ((("evil" evil))) :depends (evil)) (:name swadesh-numbers :description "Further stuff for swadesh lists" :type emacsmirror :pkgname "swadesh-numbers" :required nil) (:name swank-clojure-extra :description "Some handy utilities for using" :type emacsmirror :pkgname "swank-clojure-extra" :required ((("assoc" assoc) ("clojure-mode" clojure-mode) ("slime" slime))) :depends (slime clojure-mode)) (:name swbuff-advice :description "Provides alternate regexp cycling for swbuff" :type emacsmirror :pkgname "swbuff-advice" :required nil) (:name swiftex :description "Major modes for LaTeX and LaTeX doc.sty documents" :type emacsmirror :pkgname "swiftex" :required ((("auctex" font-latex) ("hilit-swiftex" hilit-swiftex) ("outline" outline) ("tex-mode" tex-mode) (nil tex-site))) :depends (hilit-swiftex auctex)) (:name swimmers :description "Draw a swimming-pool screensaver" :type emacsmirror :pkgname "swimmers" :required nil) (:name swiss-move :description "Swiss Cursor Movement" :type emacsmirror :pkgname "swiss-move" :required nil) (:name switch-color-theme-matlab-latex :description "Color themes for matlab" :type emacsmirror :pkgname "switch-color-theme-matlab-latex" :required nil) (:name switch-file :description "Switch from one file to another" :type emacsmirror :pkgname "switch-file" :required nil) (:name switch-files :description nil :type emacsmirror :pkgname "switch-files" :required nil) (:name switch-to-new-buffer :description "Switch to a new buffer with default name" :type emacsmirror :pkgname "switch-to-new-buffer" :required nil) (:name switch-window :description "A *visual* way to choose a window to switch to" :type emacsmirror :pkgname "switch-window" :required ((("cl" cl) ("emacs-core" quail)))) (:name sww :description "Switch to a named window on win32 systems" :type emacsmirror :pkgname "sww" :required nil) (:name symfony :description "Minor mode for editting PHP symfony flamework code" :type emacsmirror :pkgname "symfony" :required ((("anything" anything anything-grep anything-match-plugin) ("anything-project" anything-project) ("cl" cl) ("etags" etags) ("php-completion" php-completion) ("php-mode" php-mode) ("rx" rx))) :depends (php-mode php-completion anything-project anything)) (:name symlink-fix :description nil :type emacsmirror :pkgname "symlink-fix" :required nil) (:name sysadmin :description "Useful stuff for running system" :type emacsmirror :pkgname "sysadmin" :required nil) (:name syslog :description nil :type emacsmirror :pkgname "syslog" :required nil) (:name syslog-mode :description "Mode for viewing system logfiles" :type emacsmirror :pkgname "syslog-mode" :required nil) (:name system-names :description nil :type emacsmirror :pkgname "system-names" :required nil) (:name sysuplist-mode :description "Emacs Major mode for Yaourt's update selection" :type emacsmirror :pkgname "sysuplist-mode" :required ((("cl" cl)))) (:name tabbar-ruler :description "Setup tabbar to look pretty.." :type emacsmirror :pkgname "tabbar-ruler" :required ((("cl" cl) ("easymenu" easymenu) ("emhacks" tabbar))) :depends (emhacks)) (:name tacl-mode :description "Handles the Tandem/NSK/Guardian TACL language" :type emacsmirror :pkgname "tacl-mode" :required ((("column-marker" column-marker) ("imenu" imenu) ("which-func" which-func) (nil tacl-indent))) :depends (python-mode)) (:name tag :description "Tagging files" :type emacsmirror :pkgname "tag" :required nil) (:name tagger :description "Tagged information handler" :type emacsmirror :pkgname "tagger" :required ((("cl" cl)))) (:name tagging :description "A global Status bar for emacs" :type emacsmirror :pkgname "tagging" :required ((("cl" cl)))) (:name tags-tree :description nil :type emacsmirror :pkgname "tags-tree" :required ((("cl" cl) ("etags" etags) ("tree-mode" tree-mode))) :depends (tree-mode)) (:name tags-view :description "Display and navigate tags browsing history" :type emacsmirror :pkgname "tags-view" :required ((("cl" cl)))) (:name tail :description "Tail files within Emacs" :type emacsmirror :pkgname "tail" :required ((("electric" electric)))) (:name tal-indent :description "Handles indentation functions for tal-mode" :type emacsmirror :pkgname "tal-indent" :required ((("tal-mode" tal-mode))) :depends (tal-mode)) (:name tal-mode :description "Handles the Tandem/NSK/Guardian TAL & PTAL languages" :type emacsmirror :pkgname "tal-mode" :required ((("column-marker" column-marker) ("imenu" imenu) ("tal-indent" tal-indent) ("which-func" which-func))) :depends (tal-indent python-mode)) (:name tap-mode :description "Major mode for editing .tap-files" :type emacsmirror :pkgname "tap-mode" :required nil) (:name task-mode :description "Enhanced window configuration manager" :type emacsmirror :pkgname "task-mode" :required ((("ring" ring)) (("ido" ido) ("iswitchb" iswitchb)))) (:name task-timer :description "Simple task timer package" :type emacsmirror :pkgname "task-timer" :required nil) (:name taskjuggler-mode :description "Editing Taskjuggler Files" :type emacsmirror :pkgname "taskjuggler-mode" :required nil) (:name taskpaper :description "Taskpaper implementation for Emacs" :type emacsmirror :pkgname "taskpaper" :required nil) (:name tc :description "Cite text with proper filling" :type emacsmirror :pkgname "tc" :required ((("emacs-core" overlay) ("mail-extr" mail-extr)))) (:name tcapedit :description nil :type emacsmirror :pkgname "tcapedit" :required nil) (:name tdtd :description "Tony's DTD mode" :type emacsmirror :pkgname "tdtd" :required ((("cl" cl) ("emacs-core" font-lock) ("etags" etags) ("imenu" imenu) ("reporter" reporter) ("sendmail" sendmail) (nil tdtd-font)))) (:name tea-time :description "Simple timer package" :type emacsmirror :pkgname "tea-time" :required nil) (:name teco :description "Dale Worley's teco-in-elisp interpreter" :type emacsmirror :pkgname "teco" :required ((("emacs-core" backquote)))) (:name tee :description "Teeuhr" :type emacsmirror :pkgname "tee" :required nil) (:name tehom-1 :description "Emacs lisp extensions for gnus' eforms" :type emacsmirror :pkgname "tehom-1" :required ((("gnus" gnus-eform gnus-util))) :depends (gnus)) (:name tehom-2 :description "Emacs lisp extensions for history lists" :type emacsmirror :pkgname "tehom-2" :required nil) (:name tehom-4 :description "A variant completing-read that returns value" :type emacsmirror :pkgname "tehom-4" :required ((("cl" cl)))) (:name tehom-cl :description "Extra support for the cl package structures" :type emacsmirror :pkgname "tehom-cl" :required ((("cl" cl) ("tehom-font-lock" tehom-font-lock))) :depends (tehom-font-lock)) (:name tehom-font-lock :description "A little help for writing fontlock support" :type emacsmirror :pkgname "tehom-font-lock" :required ((("emacs-core" font-lock)))) (:name tehom-func-args :description "Expand almost any known elisp function to a template" :type emacsmirror :pkgname "tehom-func-args" :required (((nil local-vars)))) (:name tehom-inflisp :description "Additions to comint to support rtest" :type emacsmirror :pkgname "tehom-inflisp" :required ((("comint" comint) ("comint-redirect" comint-redirect) ("inf-lisp" inf-lisp))) :depends (comint-redirect)) (:name tehom-psgml-arrange :description "Rearrange XML/SGML easily" :type emacsmirror :pkgname "tehom-psgml-arrange" :required ((("arrange" arrange) ("cl" cl) ("psgml" psgml) ("tehom-psgml" tehom-psgml))) :depends (psgml)) (:name tehom-psgml-fold-by-key :description "Fold/unfold XML according to keywords" :type emacsmirror :pkgname "tehom-psgml-fold-by-key" :required ((("arrange" arrange) ("cl" cl) ("psgml" psgml) ("tehom-psgml" tehom-psgml))) :depends (psgml)) (:name tehom-psgml-link :description "Bare-bones hyperlinks in psgml" :type emacsmirror :pkgname "tehom-psgml-link" :required ((("cl" cl) ("psgml" psgml))) :depends (psgml)) (:name tehom-search :description "Support sregex.el for searching" :type emacsmirror :pkgname "tehom-search" :required nil) (:name tellib :description "Thomas' ELisp LIBrary" :type emacsmirror :pkgname "tellib" :required ((("emacs-core" overlay)))) (:name tellicopy :description nil :type emacsmirror :pkgname "tellicopy" :required nil) (:name tellstick :description "Controlling tellstick controllers" :type emacsmirror :pkgname "tellstick" :required ((("cl" cl)))) (:name template :description "Use templates, decorate comments, auto-update buffers" :type emacsmirror :pkgname "template" :required ((("cl" cl) ("custom" custom)))) (:name templated-page :description nil :type emacsmirror :pkgname "templated-page" :required nil) (:name tempo2 :description "Alternative template mode" :type emacsmirror :pkgname "tempo2" :required nil) (:name term-toggle :description "Toggle to and from the *terminal* buffer" :type emacsmirror :pkgname "term-toggle" :required ((("term" term)))) (:name test :description "Unit test framework for Emacs lisp program" :type emacsmirror :pkgname "test" :required ((("cl" cl)))) (:name test-case-mode :description "Unit test front-end" :type emacsmirror :pkgname "test-case-mode" :required ((("cl" cl) ("compile" compile)) (("fringe-helper" fringe-helper)))) (:name test-framework :description "Framework for unit testing" :type emacsmirror :pkgname "test-framework" :required ((("advice" advice) ("cl" cl) ("emacs-core" warnings)))) (:name texdrive :description nil :type emacsmirror :pkgname "texdrive" :required nil) (:name texi-docstring-magic :description "Munge internal docstrings into texi" :type emacsmirror :pkgname "texi-docstring-magic" :required nil) (:name texletter :description "LaTeX letter templates" :type emacsmirror :pkgname "texletter" :required nil) (:name texmed :description "Query and retrieve BibTeX from NCBI pubmed via TeXMed in Emacs" :type emacsmirror :pkgname "texmed" :required ((("w3m" w3m-search))) :depends (w3m)) (:name text-to-html :description nil :type emacsmirror :pkgname "text-to-html" :required ((("replace-regexp-list" replace-regexp-list))) :depends (replace-regexp-list)) (:name text-translator :description "Text Translator" :type emacsmirror :pkgname "text-translator" :required nil) (:name textexpander-sync :description "A utility to import textexpander entries into abbrev-mode" :type emacsmirror :pkgname "textexpander-sync" :required ((("osx-plist" osx-plist)))) (:name textile :description nil :type emacsmirror :pkgname "textile" :required nil) (:name textile-mode :description "Textile markup editing major mode" :type emacsmirror :pkgname "textile-mode" :required nil) (:name textlint :description "TextLint is a tool to check your scientific writing for common style errors from Emacs" :type emacsmirror :pkgname "textlint" :required nil) (:name textmate :description "TextMate minor mode for Emacs" :type emacsmirror :pkgname "textmate" :required ((("cl" cl) ("imenu" imenu)))) (:name textmate-to-yas :description "Import Textmate macros into yasnippet syntax" :type emacsmirror :pkgname "textmate-to-yas" :required ((("url" url)))) (:name textsnip :description "Posts text to textsnip for sharing" :type emacsmirror :pkgname "textsnip" :required ((("http-post-simple" http-post-simple))) :depends (http-post-simple)) (:name textstats :description "Show text statistics" :type emacsmirror :pkgname "textstats" :required ((("cl" cl) ("emacs-core" overlay) ("info" info) ("tellib" tellib) ("thingatpt" thingatpt) ("timer" timer))) :depends (tellib)) (:name theme-changer :description "Sunrise/Sunset Theme Changer for Emacs" :type emacsmirror :pkgname "theme-changer" :required ((("calendar" solar)))) (:name theme-roller :description "A collection of activly maintained emacs themes" :type emacsmirror :pkgname "theme-roller" :required ((("color-theme" color-theme))) :depends (zenburn-theme)) (:name thesaurus :description nil :type emacsmirror :pkgname "thesaurus" :required nil) (:name thing-at-point-utils :description "More th-at-point edit functions" :type emacsmirror :pkgname "thing-at-point-utils" :required ((("emacs-core" overlay) ("footnote" footnote) ("sh-script" sh-script) ("time-stamp" time-stamp)))) (:name thing-opt :description "Thing at Point optional utilities" :type emacsmirror :pkgname "thing-opt" :required ((("cl" cl) ("thingatpt" thingatpt)))) (:name thingopt :description "Thing at Point optional utilities" :type emacsmirror :pkgname "thingopt" :required ((("cl" cl) ("thingatpt" thingatpt)))) (:name thinks :description "Insert text in a think bubble" :type emacsmirror :pkgname "thinks" :required ((("cl" cl)))) (:name thrift-mode :description nil :type emacsmirror :pkgname "thrift-mode" :required ((("emacs-core" font-lock)))) (:name thumb-page :description "Create a muse file with thumbs" :type emacsmirror :pkgname "thumb-page" :required ((("cl" cl)))) (:name thumb-through :description "Plain text reader of HTML documents" :type emacsmirror :pkgname "thumb-through" :required ((("emacs-core" font-lock) ("thingatpt" thingatpt)))) (:name tidy :description "Interface to the HTML Tidy program" :type emacsmirror :pkgname "tidy" :required ((("compile" compile) ("easymenu" easymenu)))) (:name tie-mode :description "Tie code editing commands for GNU Emacs" :type emacsmirror :pkgname "tie-mode" :required ((("compile" compile) ("easymenu" easymenu)))) (:name tiling :description "Changing window layout" :type emacsmirror :pkgname "tiling" :required nil) (:name timan :description nil :type emacsmirror :pkgname "timan" :required nil) (:name time-ext :description "More function for time/date" :type emacsmirror :pkgname "time-ext" :required ((("cl" cl)))) (:name timecard :description "Keep track of time spent on tasks" :type emacsmirror :pkgname "timecard" :required ((("cl" cl)))) (:name timeclock-x :description "Extra features for John Wiegley's timeclock package" :type emacsmirror :pkgname "timeclock-x" :required ((("timeclock" timeclock)))) (:name timerfunctions :description nil :type emacsmirror :pkgname "timerfunctions" :required nil) (:name timestamp :description "Update/insert time stamp string at point" :type emacsmirror :pkgname "timestamp" :required nil) (:name timid :description "Timid completion" :type emacsmirror :pkgname "timid" :required ((("iswitchb" iswitchb)))) (:name tiny-tools :description "Tiny Tools configure center" :type emacsmirror :pkgname "tiny-tools" :required ((("advice" advice) ("ange-ftp" ange-ftp) ("assoc" assoc) ("cl" cl) ("compile" compile) ("custom" custom) ("dired" dired) ("easymenu" easymenu) ("efs" efs passwd) ("emacs-core" backquote font-lock jka-compr pp) ("emacs-obsolete" cl-compat) ("folding" folding) ("gnus" gnus message) ("igrep" igrep) ("info" info) ("itimer" itimer) ("lisp-mnt" lisp-mnt) ("lpr" lpr) ("mail-utils" mail-utils) ("man" man) ("outline" outline) ("rect" rect) ("reporter" reporter) ("rmail" rmail) ("sendmail" sendmail) ("thingatpt" thingatpt) ("timer" timer) ("timezone" timezone) ("view" view) ("widget" wid-edit))) :depends (itimer gnus efs)) (:name titanium :description nil :type emacsmirror :pkgname "titanium" :required ((("anything" anything) ("auto-complete" auto-complete) ("cl" cl) ("deferred" deferred) ("easy-mmode" easy-mmode) ("historyf" historyf)) (("anything" anything-show-completion) ("imenu" imenu))) :depends (historyf deferred auto-complete anything)) (:name title-time :description "Like display-time but in the title-bar" :type emacsmirror :pkgname "title-time" :required ((("time" time)))) (:name tld :description "TLD lookup tool" :type emacsmirror :pkgname "tld" :required ((("cl" cl)))) (:name tlh-util :description "A bunch of elisp utility fns and macros" :type emacsmirror :pkgname "tlh-util" :required ((("cl" cl)))) (:name tm-vcard :description "Allow TM (and hence Gnus, RMAIL, et al) to display a vcard MIME part" :type emacsmirror :pkgname "tm-vcard" :required ((("gnus" tm-view) ("vcard" vcard))) :depends (vcard gnus)) (:name tmenu :description "A text based interface to the menubar" :type emacsmirror :pkgname "tmenu" :required nil) (:name tmmofl :description "Calls functions dependant on font lock highlighting at point" :type emacsmirror :pkgname "tmmofl" :required ((("cl" cl) ("easy-mmode" easy-mmode) ("emacs-core" font-lock)))) (:name tmmofl-x :description nil :type emacsmirror :pkgname "tmmofl-x" :required nil) (:name tmt-mode :description "Major mode for editing Text::MicroTemplate syntax" :type emacsmirror :pkgname "tmt-mode" :required ((("tempo" tempo)))) (:name tnt :description nil :type emacsmirror :pkgname "tnt" :required ((("cl" cl) ("custom" custom)))) (:name todo :description nil :type emacsmirror :pkgname "todo" :required ((("browse-url" browse-url) (nil eval-reg fileinmail)))) (:name todo-list-mode :description "Major mode for highlighting a numbered todo list" :type emacsmirror :pkgname "todo-list-mode" :required nil) (:name todoo :description "Major mode for editing TODO files" :type emacsmirror :pkgname "todoo" :required ((("custom" custom) ("easymenu" easymenu) ("outline" outline)))) (:name todostack :description "Keep a to-do list as a simple stack" :type emacsmirror :pkgname "todostack" :required (nil (("lisp-mnt" lisp-mnt)))) (:name todotxt :description "A major mode for editing todo.txt files" :type emacsmirror :pkgname "todotxt" :required nil) (:name toggle :description "Quickly open corresponding file (eg test vs impl)" :type emacsmirror :pkgname "toggle" :required ((("cl" cl)))) (:name toggle-buffer :description "Flips back and forth between two buffers" :type emacsmirror :pkgname "toggle-buffer" :required nil) (:name toggle-case :description nil :type emacsmirror :pkgname "toggle-case" :required nil) (:name toggle-source :description "Toggle between source and implementation files" :type emacsmirror :pkgname "toggle-source" :required nil) (:name tooltip-help :description "Show help as tooltip" :type emacsmirror :pkgname "tooltip-help" :required ((("eldoc" eldoc) ("help" help)))) (:name top-mode :description "Run \"top\" from emacs" :type emacsmirror :pkgname "top-mode" :required nil) (:name topsongs :description "A song database for the lazy emacser" :type emacsmirror :pkgname "topsongs" :required nil) (:name total-numbers :description "Add up all the numbers found in matches for a given pattern" :type emacsmirror :pkgname "total-numbers" :required nil) (:name tpum :description "Popup menus in text mode" :type emacsmirror :pkgname "tpum" :required ((("cl" cl)))) (:name track-scroll :description "Enable direct scrolling with the mouse" :type emacsmirror :pkgname "track-scroll" :required ((("emacs-core" mouse)))) (:name tramp :description "Transparent Remote Access, Multiple Protocol" :type emacsmirror :pkgname "tramp" :required ((("advice" advice) ("ange-ftp" ange-ftp) ("cl" cl) ("custom" custom) ("dbus" dbus) ("dired" dired) ("efs" efs-cu) ("emacs-core" base64 bytecomp) ("gnus" format-spec) ("reporter" reporter) ("shell" shell) ("timer" timer) ("url" url-parse url-util) ("vc" vc vc-rcs) ("zeroconf" zeroconf) (nil timer-funcs tramp-loaddefs))) :depends (gnus efs)) (:name tramp-adb :description "Functions for calling Android Debug Bridge from Tramp" :type emacsmirror :pkgname "tramp-adb" :required ((("tramp" tramp))) :depends (tramp)) (:name trans-ej :description nil :type emacsmirror :pkgname "trans-ej" :required ((("button" button) ("url" url-util)))) (:name translate :description nil :type emacsmirror :pkgname "translate" :required ((("cl" cl)))) (:name translation :description nil :type emacsmirror :pkgname "translation" :required nil) (:name transpose-frame :description nil :type emacsmirror :pkgname "transpose-frame" :required nil) (:name traverselisp :description "Walk through directories and perform actions on files" :type emacsmirror :pkgname "traverselisp" :required ((("cl" cl) ("emacs-core" derived)))) (:name tree-mode :description "A mode to manage tree widgets" :type emacsmirror :pkgname "tree-mode" :required ((("cl" cl) ("tree-widget" tree-widget)))) (:name try-code :description "Try out a new idea by commenting out old code" :type emacsmirror :pkgname "try-code" :required nil) (:name tsv-mode :description "Major mode for edit table files" :type emacsmirror :pkgname "tsv-mode" :required ((("cl" cl)))) (:name tuareg :description "OCaml mode for Emacs" :type emacsmirror :pkgname "tuareg" :required ((("cl" cl) ("comint" comint) ("compile" compile) ("custom" custom) ("easymenu" easymenu) ("emacs-core" derived) ("shell" shell)) (("caml" caml-help caml-types) ("cedet" speedbar)))) (:name tumbl :description "Post to tumblr.com from emacs" :type emacsmirror :pkgname "tumbl" :required ((("http-post-simple" http-post-simple))) :depends (http-post-simple)) (:name tumblr :description nil :type emacsmirror :pkgname "tumblr" :required ((("http-post-simple" http-post-simple))) :depends (http-post-simple)) (:name tumblr-gist :description "Ties the Gist and Tumblr integration to allow syntax highlighted and revision controlled region pasting" :type emacsmirror :pkgname "tumblr-gist" :required ((("gist" gist) ("http-post-simple" http-post-simple) ("tumblr" tumblr))) :depends (tumblr http-post-simple gist)) (:name twiddle :description "Mode-line display hack" :type emacsmirror :pkgname "twiddle" :required ((("itimer" itimer) ("timer" timer))) :depends (itimer)) (:name twiki-outline :description "Major mode for editing twiki documents" :type emacsmirror :pkgname "twiki-outline" :required ((("outline" outline)))) (:name twit :description "Interface with twitter.com" :type emacsmirror :pkgname "twit" :required ((("cl" cl) ("url" url url-http) ("xml" xml)))) (:name twitel :description "Simple Emacs-based client for Twitter" :type emacsmirror :pkgname "twitel" :required ((("cl" cl) ("oauth" oauth) ("url" url url-http) ("xml" xml))) :depends (oauth)) (:name twittering-dframe :description "Dedicate frame for twittering-mode" :type emacsmirror :pkgname "twittering-dframe" :required ((("cedet" dframe) ("twittering-mode" twittering-mode))) :depends (twittering-mode cedet)) (:name twittering-mode :description nil :type emacsmirror :pkgname "twittering-mode" :required ((("cl" cl) ("emacs-core" jka-compr) ("gnus" parse-time sha1) ("skeleton" skeleton) ("url" url) ("xml" xml)) (("epg" epa epg) ("gnus" tls) ("revive" revive) ("url" url-methods) (nil alpaca))) :depends (gnus)) (:name two-mode-mode :description "Switches between tcl and sgml(html) modes" :type emacsmirror :pkgname "two-mode-mode" :required nil) (:name tx-mode :description "Major mode for editing Text::Xslate syntax" :type emacsmirror :pkgname "tx-mode" :required ((("tempo" tempo)))) (:name type-test :description "Typing test" :type emacsmirror :pkgname "type-test" :required ((("cl" cl)))) (:name typematic :description "Optimize 'universal-argument for typematic keyboards" :type emacsmirror :pkgname "typematic" :required nil) (:name typing :description "The Typing Of Emacs" :type emacsmirror :pkgname "typing" :required ((("cl" cl)))) (:name typopunct :description "Automatic typographical punctuation marks" :type emacsmirror :pkgname "typopunct" :required nil) (:name u-color-cycle :description "Eye-candy" :type emacsmirror :pkgname "u-color-cycle" :required ((("emacs-core" overlay)))) (:name u-mandelbrot :description "A simple fractal browser" :type emacsmirror :pkgname "u-mandelbrot" :required ((("emacs-core" overlay)))) (:name u8tex :description "Quail package to input in" :type emacsmirror :pkgname "u8tex" :required nil) (:name uboat :description "Generate u-boat-death messages, patterned after Iron Coffins" :type emacsmirror :pkgname "uboat" :required nil) (:name ul :description "Insert/remove underlining in Emacs" :type emacsmirror :pkgname "ul" :required nil) (:name ultra-tex :description "Ultra-TeX mode" :type emacsmirror :pkgname "ultra-tex" :required ((("auctex" bib-cite font-latex tex tex-buf) ("cl" cl) ("emacs-core" font-lock) ("imenu" imenu) ("light" light))) :depends (light auctex)) (:name umlaute :description "Support for german umlaute" :type emacsmirror :pkgname "umlaute" :required nil) (:name unbind :description "Commands for unbinding things" :type emacsmirror :pkgname "unbind" :required ((("cl" cl)))) (:name uncrustify :description "Apply uncrustify on buffer region" :type emacsmirror :pkgname "uncrustify" :required nil) (:name under :description nil :type emacsmirror :pkgname "under" :required nil) (:name undo-browse :description "Powerful Undo system. Browser/movie/redo/hilit" :type emacsmirror :pkgname "undo-browse" :required ((("cl" cl) ("hilit-chg" hilit-chg) ("mkback" mkback))) :depends (mkback)) (:name undo-group :description "Undo groups of changes" :type emacsmirror :pkgname "undo-group" :required nil) (:name undo-tree :description "Treat undo history as a tree" :type emacsmirror :pkgname "undo-tree" :required ((("cl" cl)))) (:name undohist :description "Persistent Undo History for GNU Emacs" :type emacsmirror :pkgname "undohist" :required ((("cl" cl)))) (:name unibasic :description "Copyright (C) 1998 Pat Thoyts <pat@zsplat.freeserve.co.uk>" :type emacsmirror :pkgname "unibasic" :required ((("regexp-opt" regexp-opt) ("reporter" reporter)))) (:name unicad :description "An elisp port of Mozilla Universal Charset Auto Detector" :type emacsmirror :pkgname "unicad" :required ((("cl" cl)))) (:name unicode-disp :description "Display-table fallbacks for some unicode chars" :type emacsmirror :pkgname "unicode-disp" :required ((("advice" advice) ("custom" cus-face) ("emacs-core" disp-table)))) (:name unicode-input :description "Inputting a Unicode subset in TeX transcription" :type emacsmirror :pkgname "unicode-input" :required nil) (:name uniesc :description "Processing Java-style Unicode character escapes" :type emacsmirror :pkgname "uniesc" :required (nil (("emacs-core" syntax)))) (:name unify-buffer :description "Concatenate multiple buffers" :type emacsmirror :pkgname "unify-buffer" :required ((("cl" cl)))) (:name unipoint :description nil :type emacsmirror :pkgname "unipoint" :required ((("thingatpt" thingatpt)))) (:name unique :description "Remove duplicate successive lines" :type emacsmirror :pkgname "unique" :required nil) (:name unique-window-buffers :description "Try to avoid showing same buffer in two windows on the same frame" :type emacsmirror :pkgname "unique-window-buffers" :required ((("cl" cl)))) (:name unit-test :description "Run unit tests from Emacs with visual feedback" :type emacsmirror :pkgname "unit-test" :required nil) (:name unity-mode :description "Minor mode for Unity, CMock, and Ceedling" :type emacsmirror :pkgname "unity-mode" :required nil) (:name unmunge-general :description "Change address/sig with context in gnus" :type emacsmirror :pkgname "unmunge-general" :required ((("cl" cl) ("custom" custom) ("gnus" gnus message))) :depends (gnus)) (:name update-autoloads :description "Update autoloads according to my conventions" :type emacsmirror :pkgname "update-autoloads" :required nil) (:name update-dns :description "Update serial number in DNS files" :type emacsmirror :pkgname "update-dns" :required nil) (:name upside-down :description "Make regions of text upside-down" :type emacsmirror :pkgname "upside-down" :required nil) (:name uptime :description nil :type emacsmirror :pkgname "uptime" :required nil) (:name uptimes :description "Track and display emacs session uptimes" :type emacsmirror :pkgname "uptimes" :required ((("cl" cl) ("emacs-core" pp) ("timer" timer)))) (:name usage-memo :description "Integration of Emacs help system and memo" :type emacsmirror :pkgname "usage-memo" :required ((("cl" cl) ("emacs-core" font-lock) ("view" view)))) (:name use-package :description "Arrange use of an elisp package" :type emacsmirror :pkgname "use-package" :required ((("info" info)))) (:name ushell :description "Universal shell" :type emacsmirror :pkgname "ushell" :required ((("eon" eon))) :depends (eon)) (:name utf-8m :description nil :type emacsmirror :pkgname "utf-8m" :required nil) (:name utf8islove :description "Quail package for TeX integration" :type emacsmirror :pkgname "utf8islove" :required nil) (:name uuid :description nil :type emacsmirror :pkgname "uuid" :required nil) (:name uuidgen :description "Generate uuid's using an external program" :type emacsmirror :pkgname "uuidgen" :required nil) (:name uuinsert :description nil :type emacsmirror :pkgname "uuinsert" :required nil) (:name variant :description "Convert between various English spellings" :type emacsmirror :pkgname "variant" :required ((("assoc" assoc) ("cedet" working) ("cl" cl) ("variant-abbc" variant-abbc))) :depends (variant-abbc cedet)) (:name variant-abbc :description "Support file for variant.el" :type emacsmirror :pkgname "variant-abbc" :required nil) (:name vc-jump :description "Jump to status buffer for the current VC" :type emacsmirror :pkgname "vc-jump" :required ((("cl" cl) ("vc" vc)))) (:name vc-partial-commit :description "Commit only some changes from a diff" :type emacsmirror :pkgname "vc-partial-commit" :required nil) (:name vcard :description "Vcard parsing and display routines" :type emacsmirror :pkgname "vcard" :required nil) (:name vel :description "Keyboard/mouse-based \"self-scroller\"" :type emacsmirror :pkgname "vel" :required ((("cl" cl)))) (:name verbiste :description "Emacs interface to verbiste" :type emacsmirror :pkgname "verbiste" :required nil) (:name versor :description "Versatile cursor" :type emacsmirror :pkgname "versor" :required ((("cl" cl) ("contexts" contexts) ("find-func" find-func) ("screen-setups" screen-setups) ("tempo" tempo) ("tmm" tmm) (nil handsfree-menu-additions handsfree-tools-menus languide-utils versor-joystick))) :depends (screen-setups contexts)) (:name vex :description "Interactive svg graphics in a buffer" :type emacsmirror :pkgname "vex" :required ((("cl" cl)))) (:name vh-scroll :description "Vert. and horiz. scrolling that preserves point visible" :type emacsmirror :pkgname "vh-scroll" :required nil) (:name vhdl-goto-def :description "Jumps to definition of signal, constant or function" :type emacsmirror :pkgname "vhdl-goto-def" :required nil) (:name vhdl-mode :description "Major mode for editing VHDL code" :type emacsmirror :pkgname "vhdl-mode" :required ((("assoc" assoc) ("cedet" speedbar) ("compile" compile) ("easymenu" easymenu) ("emacs-core" font-lock) ("hideshow" hideshow) ("hippie-exp" hippie-exp) ("ps-print" ps-print))) :depends (cedet)) (:name vhdl-process-wave :description "Processes waveform saved of modelsim" :type emacsmirror :pkgname "vhdl-process-wave" :required nil) (:name vi-dot :description "Implementation of vi's dot command for Emacs" :type emacsmirror :pkgname "vi-dot" :required ((("advice" advice) ("cl" cl)))) (:name viewer :description "View-mode extension" :type emacsmirror :pkgname "viewer" :required ((("cl" cl)))) (:name viewtex :description nil :type emacsmirror :pkgname "viewtex" :required ((("comint" comint)))) (:name vim-elscreen :description nil :type emacsmirror :pkgname "vim-elscreen" :required ((("cl" cl) ("elscreen" elscreen) ("vim-mode" vim))) :depends (vim-mode elscreen)) (:name vim-mode :description "A VIM-emulation for Emacs" :type emacsmirror :pkgname "vim-mode" :required ((("cl" cl) ("windmove" windmove)) (("redo" redo) ("redo+" redo+)))) (:name vimpulse :description nil :type emacsmirror :pkgname "vimpulse" :required ((("goto-chg" goto-chg) ("paren" paren) ("redo" redo) ("test-framework" test-framework) ("undo-tree" undo-tree) ("viper" viper))) :depends (undo-tree test-framework redo goto-chg)) (:name vimvars :description "Emacs support for VI modelines" :type emacsmirror :pkgname "vimvars" :required nil) (:name viper-in-more-modes :description "Vi-like keybindings for various Emacs modes" :type emacsmirror :pkgname "viper-in-more-modes" :required nil) (:name virtual-tags :description "\344\273\256\346\203\263\347\232\204\343\201\253tags\343\201\231\343\202\213\343\201\237\343\202\201\343\201\256\346\213\241\345\274\265" :type emacsmirror :pkgname "virtual-tags" :required ((("etags" etags) ("gtags" gtags) (nil anything-etags))) :depends (gtags)) (:name virtualenv :description "Virtualenv for Python" :type emacsmirror :pkgname "virtualenv" :required nil) (:name visible-lines :description "Move across visible lines instead of logic lines" :type emacsmirror :pkgname "visible-lines" :required nil) (:name visible-mark :description "Make marks visible" :type emacsmirror :pkgname "visible-mark" :required ((("cl" cl) ("easy-mmode" easy-mmode)))) (:name visual-basic-mode :description "A mode for editing Visual Basic programs" :type emacsmirror :pkgname "visual-basic-mode" :required ((("cl" cl)))) (:name vkill :description "View and kill Unix processes from within Emacs" :type emacsmirror :pkgname "vkill" :required nil) (:name vlog-mode :description "A new major mode for editing verilog files" :type emacsmirror :pkgname "vlog-mode" :required ((("align" align) ("cl" cl) ("emacs-core" font-lock) ("hideshow" hideshow)))) (:name vls :description nil :type emacsmirror :pkgname "vls" :required ((("comint" comint) ("lisp-mode" lisp-mode)))) (:name vm :description "Entry points for VM" :type emacsmirror :pkgname "vm" :required ((("advice" advice) ("bbdb" bbdb bbdb-com) ("cl" cl) ("cygwin-mount" cygwin-mount) ("dired" dired) ("easymenu" easymenu) ("emacs-core" bytecomp font-lock overlay) ("enriched" enriched) ("executable" executable) ("gnus" gnus-art gnus-cite message pgg time-date) ("info" info) ("itimer" itimer) ("longlines" longlines) ("mail-extr" mail-extr) ("mail-utils" mail-utils) ("ps-print" ps-print) ("regexp-opt" regexp-opt) ("reporter" reporter) ("sendmail" sendmail) ("timer" timer) ("vcard" vcard) ("vm" vm-autoloads) ("vm-thread" vm-thread) ("widget" wid-edit) (nil highlight-headers))) :depends (vm-thread vcard itimer gnus cygwin-mount bbdb)) (:name vm-addons :description "Extra stuff for VM" :type emacsmirror :pkgname "vm-addons" :required ((("buffer-fns" buffer-fns) ("fmailutils" fmailutils) ("list-fns" list-fns) ("string-fns" string-fns) ("vm" vm))) :depends (vm string-fns list-fns fmailutils buffer-fns)) (:name vm-advices :description "Misc patches to VM using defadvice" :type emacsmirror :pkgname "vm-advices" :required ((("advice" advice) ("vm-addons" vm-addons) ("win-disp-util" win-disp-util))) :depends (win-disp-util vm-addons)) (:name vm-multdom :description "Multiple-domain reply header manipulation for VM" :type emacsmirror :pkgname "vm-multdom" :required ((("fmailutils" fmailutils) ("vm" vm-message))) :depends (vm fmailutils)) (:name vm-thread :description "Functions for collapsing threads in a VM Summary buffer" :type emacsmirror :pkgname "vm-thread" :required nil) (:name vnesting :description "Show form nesting with vertical bars" :type emacsmirror :pkgname "vnesting" :required ((("cl" cl)))) (:name volatile-highlights :description "Minor mode for visual feedback on some operations" :type emacsmirror :pkgname "volatile-highlights" :required ((("advice" advice) ("cl" cl) ("easy-mmode" easy-mmode) ("etags" etags)) (("alien-search" alien-search) ("emacs-core" menu-bar)))) (:name volume :description "Tweak your sound card volume from Emacs" :type emacsmirror :pkgname "volume" :required ((("electric" electric)))) (:name vtags :description "Tags facility for Emacs" :type emacsmirror :pkgname "vtags" :required nil) (:name vtx :description "A package for reading videotext" :type emacsmirror :pkgname "vtx" :required ((("cl" cl) ("term" term)))) (:name vvb-mode :description "A minor mode to display a Visible Vertical Bar(s)" :type emacsmirror :pkgname "vvb-mode" :required ((("cl" cl)))) (:name vwindow :description "Overlay virtual windows onto part of a buffer" :type emacsmirror :pkgname "vwindow" :required ((("cell" grid))) :depends (cell)) (:name w3 :description "Main functions for emacs-w3 on all platforms/versions" :type emacsmirror :pkgname "w3" :required ((("advice" advice) ("ange-ftp" ange-ftp) ("cl" cl) ("custom" cus-edit) ("easymenu" easymenu) ("emacs-core" disp-table image pp) ("emacspeak" dtk-css-speech emacspeak emacspeak-fix-interactive emacspeak-sounds) ("gnus" mailcap mm-decode mm-view) ("imenu" imenu) ("info" info) ("ps-print" ps-print) ("reporter" reporter) ("twittering-mode" ssl) ("url" url url-handlers url-history url-parse url-util url-vars) ("widget" wid-edit widget) ("xml" xml) (nil dtk-voices emacspeak-speak w3-auto w3-site-init xbm-button xpm-button))) :depends (twittering-mode gnus emacspeak)) (:name w3-heat-link :description nil :type emacsmirror :pkgname "w3-heat-link" :required ((("replace-regexp-list" replace-regexp-list))) :depends (replace-regexp-list)) (:name w32-find-dired :description "Light w32 replacement for `find-dired'" :type emacsmirror :pkgname "w32-find-dired" :required ((("dired" dired)))) (:name w32-shell-execute :description "W32 specific.  execute any of the 'Explorer verbs' available for a file or directory" :type emacsmirror :pkgname "w32-shell-execute" :required nil) (:name w32-symlinks :description "MS Windows symbolic link (shortcut) support" :type emacsmirror :pkgname "w32-symlinks" :required ((("dired-aux" dired-aux)))) (:name w3m :description "An Emacs interface to w3m" :type emacsmirror :pkgname "w3m" :required ((("apel" mcharset path-util pccl pces pcustom poe poem static) ("bbdb" bbdb) ("browse-url" browse-url) ("cl" cl) ("easymenu" easymenu) ("emacs-core" bytecomp ccl) ("flim" eword-encode mime mime-parse std11) ("gnus" gnus-bcklg gnus-sum nnheader nnmail nnoo parse-time) ("lsdb" lsdb) ("mew" mew) ("rfc2368" rfc2368) ("riece" luna) ("sendmail" sendmail) ("timezone" timezone) ("w3" font) ("widget" wid-edit) ("xml" xml)) (("image-mode" image-mode))) :depends (w3 mew lsdb gnus flim bbdb apel)) (:name w3m-multibookmarks :description "Add lynx-style multi-bookmarks and functionality" :type emacsmirror :pkgname "w3m-multibookmarks" :required ((("cl" cl) ("w3m" w3m w3m-util))) :depends (w3m)) (:name w3m-type-ahead :description "Type ahead support for Emacs-w3m" :type emacsmirror :pkgname "w3m-type-ahead" :required ((("w3m" w3m))) :depends (w3m)) (:name w3xt :description "Extended MIME control in w3m" :type emacsmirror :pkgname "w3xt" :required ((("cl" cl) ("w3m" w3m))) :depends (w3m)) (:name wanderlust :description "Wanderlust bootstrap" :type emacsmirror :pkgname "wanderlust" :required ((("apel" emu mcharset path-util pces poe poem product static) ("bbdb" bbdb bbdb-com bbdb-hooks) ("browse-url" browse-url) ("cl" cl) ("crm" crm) ("custom" cus-edit custom) ("easymenu" easymenu) ("emacs-core" backquote bytecomp derived md5 pp) ("epg" epa epg epg-config) ("flim" eword-decode eword-encode mel mime mime-parse mmbuffer smtp std11) ("gnus" pgg sasl utf7) ("ldap" ldap) ("ps-print" ps-print) ("rfc2368" rfc2368) ("riece" luna) ("semi" mime-edit mime-pgp mime-play mime-setup mime-view) ("sendmail" sendmail) ("thingatpt" thingatpt) ("time-stamp" time-stamp) ("timer" timer) ("timezone" timezone) ("w3m" shimbun) (nil bitmap mmgeneric spamfilter))) :depends (w3m semi gnus flim epg bbdb apel)) (:name warlord :description "Annoy denizens of alt.fan.warlord" :type emacsmirror :pkgname "warlord" :required ((("flame" flame) ("yow" yow))) :depends (flame)) (:name warn-mail :description "Warn for mails incoming" :type emacsmirror :pkgname "warn-mail" :required nil) (:name watch-sexp :description "Continously watch s-expressions" :type emacsmirror :pkgname "watch-sexp" :required nil) (:name watson :description "Query web search engines and aggregate results" :type emacsmirror :pkgname "watson" :required ((("browse-url" browse-url) ("cl" cl) ("emacs-core" backquote) ("url" url) ("w3" w3-forms) ("widget" wid-browse widget))) :depends (w3)) (:name wave :description "Editing Sound Files" :type emacsmirror :pkgname "wave" :required ((("cl" cl) ("gnus" message))) :depends (gnus)) (:name wave-client :description "Methods to communicate with the Wave server" :type emacsmirror :pkgname "wave-client" :required ((("calc" calc) ("cl" cl) ("ewoc" ewoc) ("gnus" tls) ("json" json) ("url" url url-parse))) :depends (gnus)) (:name wb-line-number :description "Window-based line number displaying" :type emacsmirror :pkgname "wb-line-number" :required nil) (:name wc-mode :description nil :type emacsmirror :pkgname "wc-mode" :required nil) (:name wcheck-mode :description nil :type emacsmirror :pkgname "wcheck-mode" :required nil) (:name wclock :description "World clock" :type emacsmirror :pkgname "wclock" :required nil) (:name wcount :description "Keep a running count of words in a buffer" :type emacsmirror :pkgname "wcount" :required ((("assoc" assoc) ("timer" timer)))) (:name wcy-desktop :description "Faster than destop.el and less features" :type emacsmirror :pkgname "wcy-desktop" :required nil) (:name wcy-display-line-number :description "Line number mode for Emacs" :type emacsmirror :pkgname "wcy-display-line-number" :required nil) (:name wcy-swbuff :description "Switch buffer quickly" :type emacsmirror :pkgname "wcy-swbuff" :required nil) (:name web-mode :description nil :type emacsmirror :pkgname "web-mode" :required nil) (:name webgen-mode :description "Webgen mode" :type emacsmirror :pkgname "webgen-mode" :required ((("autoinsert" autoinsert)))) (:name webinfo :description nil :type emacsmirror :pkgname "webinfo" :required ((("cl" cl)))) (:name weblogger :description "Weblog maintenance via XML-RPC APIs" :type emacsmirror :pkgname "weblogger" :required ((("cl" cl) ("gnus" message) ("reporter" reporter) ("ring" ring) ("xml-rpc" xml-rpc))) :depends (xml-rpc gnus)) (:name webmaster-macros :description nil :type emacsmirror :pkgname "webmaster-macros" :required ((("cl" cl)))) (:name webmastering :description "Set up autoloads for webmastering software" :type emacsmirror :pkgname "webmastering" :required nil) (:name wgrep :description "Writable grep buffer and apply the changes to files" :type emacsmirror :pkgname "wgrep" :required ((("cl" cl) ("grep" grep)))) (:name what-domain :description "Top-level internet domain name information" :type emacsmirror :pkgname "what-domain" :required nil) (:name what-line :description nil :type emacsmirror :pkgname "what-line" :required nil) (:name whine :description nil :type emacsmirror :pkgname "whine" :required nil) (:name whitespace-mode :description "Major mode for editing Whitespace" :type emacsmirror :pkgname "whitespace-mode" :required nil) (:name whole-line-funcs :description "Triple-click like line marking functions" :type emacsmirror :pkgname "whole-line-funcs" :required ((("cl" cl)))) (:name whole-line-or-region :description "Operate on current line if region undefined" :type emacsmirror :pkgname "whole-line-or-region" :required nil) (:name wide-column :description "Calls functions dependant on column position" :type emacsmirror :pkgname "wide-column" :required ((("easy-mmode" easy-mmode)))) (:name wide-n :description "Cycle among buffer restrictions" :type emacsmirror :pkgname "wide-n" :required ((("repeat" repeat)))) (:name wikiarea :description "Interface to the Emacs Wiki's Elisp area" :type emacsmirror :pkgname "wikiarea" :required ((("emacs-core" overlay pp) ("http-emacs" http-get))) :depends (http-emacs)) (:name wikidot-mode :description "Major mode for editing documents from Wikidot (http://wikidot.com)" :type emacsmirror :pkgname "wikidot-mode" :required nil) (:name wikipediafs :description "Add support for WikipediaFS" :type emacsmirror :pkgname "wikipediafs" :required ((("wikipedia-mode" wikipedia-mode)))) (:name wikirel :description "Visit relevant pages on the Emacs Wiki" :type emacsmirror :pkgname "wikirel" :required ((("browse-url" browse-url) ("oddmuse" oddmuse))) :depends (oddmuse)) (:name wiktionary-swadesh :description "Parse a Swadesh list page from wiktionary, and convert it to Mulvo format" :type emacsmirror :pkgname "wiktionary-swadesh" :required ((("csv-writer" csv-writer) ("read-table-data" read-table-data))) :depends (read-table-data csv-writer)) (:name win-disp-util :description "Window display utilities and optimizations" :type emacsmirror :pkgname "win-disp-util" :required nil) (:name windata :description "Convert window configuration to list" :type emacsmirror :pkgname "windata" :required ((("cl" cl)))) (:name window-grid :description "Create grids of windows" :type emacsmirror :pkgname "window-grid" :required ((("cl" cl)))) (:name window-jump :description "Move left/right/up/down through your windows" :type emacsmirror :pkgname "window-jump" :required ((("cl" cl)))) (:name window-layout :description "Window layout manager" :type emacsmirror :pkgname "window-layout" :required ((("cl" cl)))) (:name window-number :description "Select windows by numbers" :type emacsmirror :pkgname "window-number" :required ((("cl" cl)))) (:name window-numbering :description "Numbered window shortcuts" :type emacsmirror :pkgname "window-numbering" :required ((("cl" cl)))) (:name windows :description nil :type emacsmirror :pkgname "windows" :required ((("revive" revive))) :depends (revive)) (:name windows-path :description "Teach cygwin EMACS about windows styles path" :type emacsmirror :pkgname "windows-path" :required ((("cygwin-mount" cygwin-mount))) :depends (cygwin-mount)) (:name winpath :description nil :type emacsmirror :pkgname "winpath" :required nil) (:name winring :description "Window configuration rings" :type emacsmirror :pkgname "winring" :required ((("reporter" reporter) ("ring" ring)))) (:name with-file :description "Perform an operation on a file, restoring other state afterwards" :type emacsmirror :pkgname "with-file" :required nil) (:name with-saved-messages :description "Run a command and save the messages it produces" :type emacsmirror :pkgname "with-saved-messages" :required nil) (:name wl-gravatar :description "Gravatar fetch/store functions" :type emacsmirror :pkgname "wl-gravatar" :required ((("gnus" gravatar))) :depends (gnus)) (:name wl-list :description "List all W3M buffers" :type emacsmirror :pkgname "wl-list" :required nil) (:name wmii :description nil :type emacsmirror :pkgname "wmii" :required nil) (:name woof :description "Emacs interface to exchange files on different computers via woof" :type emacsmirror :pkgname "woof" :required nil) (:name word-count :description nil :type emacsmirror :pkgname "word-count" :required nil) (:name wordnet :description "A simple wordnet mode" :type emacsmirror :pkgname "wordnet" :required ((("ispell" ispell) ("tellib" tellib) ("thingatpt" thingatpt))) :depends (tellib)) (:name wordnik :description "Client library for the Wordnik API" :type emacsmirror :pkgname "wordnik" :required ((("json" json) ("url" url)))) (:name words-in-elisp-symbols :description "Analyze the words used in elisp symbols" :type emacsmirror :pkgname "words-in-elisp-symbols" :required nil) (:name work-timer :description "A timer so you know when telax, and when to work" :type emacsmirror :pkgname "work-timer" :required nil) (:name workbone :description "Workbone interface for the Emacs editor" :type emacsmirror :pkgname "workbone" :required nil) (:name workgroups :description "Workgroups for windows (for Emacs)" :type emacsmirror :pkgname "workgroups" :required ((("cl" cl)))) (:name worklog :description nil :type emacsmirror :pkgname "worklog" :required ((("cl" cl) ("timezone" timezone)))) (:name worktracker :description nil :type emacsmirror :pkgname "worktracker" :required nil) (:name wpdl-mode :description "Major mode for editing WPDL files" :type emacsmirror :pkgname "wpdl-mode" :required nil) (:name wrap-mode :description nil :type emacsmirror :pkgname "wrap-mode" :required nil) (:name wrap-region :description "Wrap text with punctation or tag" :type emacsmirror :pkgname "wrap-region" :required nil) (:name write-subdirs-el :description "Create subdirs.el files" :type emacsmirror :pkgname "write-subdirs-el" :required nil) (:name write-table-data :description nil :type emacsmirror :pkgname "write-table-data" :required ((("cl" cl)))) (:name writegood-mode :description "Count number of words in a buffer" :type emacsmirror :pkgname "writegood-mode" :required ((("cl" cl) ("emacs-core" faces) ("regexp-opt" regexp-opt)))) (:name wsh-repl :description "Windows Scripting Host REPL (in javascript)" :type emacsmirror :pkgname "wsh-repl" :required ((("comint" comint)))) (:name wubi :description "Chinese-wubi input method in Emacs" :type emacsmirror :pkgname "wubi" :required ((("emacs-core" quail)))) (:name wysiwyg-tex :description "Support WYSIWYG edit for TEX on Emacs" :type emacsmirror :pkgname "wysiwyg-tex" :required ((("cl" cl) ("doc-view" doc-view) (nil doc-view-fit-page)))) (:name x-dict :description "Emacs interface for several online dictionaries" :type emacsmirror :pkgname "x-dict" :required nil) (:name x-face :description "X-Face encoder/decoder/viewer for Emacsen" :type emacsmirror :pkgname "x-face" :required ((("cl" cl) ("custom" custom) ("emacs-core" bytecomp) ("mew" mew-cache mew-syntax) ("semi" mime-image) ("vm" vm-macro vm-misc) (nil alist highlight-headers tl-list tm-image))) :depends (vm semi mew)) (:name x-face-magic :description "Various x-face utils" :type emacsmirror :pkgname "x-face-magic" :required nil) (:name x-face-mini :description "Create MINI X-Face image for XEmacs/Emacs21+" :type emacsmirror :pkgname "x-face-mini" :required ((("cl" cl) ("x-face" x-face))) :depends (x-face)) (:name x-migrant :description "Support for subprocesses handling remote X displays" :type emacsmirror :pkgname "x-migrant" :required ((("advice" advice)))) (:name x-symbol :description "Semi WYSIWYG for LaTeX, HTML, etc using additional fonts" :type emacsmirror :pkgname "x-symbol" :required ((("cl" cl) ("emacs-core" font-lock fontset warnings) ("emacs-obsolete" lucid) ("reporter" reporter)))) (:name xabcd :description "Convert raw bytes to the X'ABCD' notation and back" :type emacsmirror :pkgname "xabcd" :required nil) (:name xargs-grep :description "Grep large sets of files by using xargs" :type emacsmirror :pkgname "xargs-grep" :required ((("compile" compile) ("grep" grep)))) (:name xclip :description "Emacs Interface to XClip" :type emacsmirror :pkgname "xclip" :required nil) (:name xcode-document-viewer :description "Xcode document viewer" :type emacsmirror :pkgname "xcode-document-viewer" :required ((("anything" anything) ("thingatpt" thingatpt))) :depends (anything)) (:name xcscope :description nil :type emacsmirror :pkgname "xcscope" :required ((("easymenu" easymenu)))) (:name xff :description "Extended find-file" :type emacsmirror :pkgname "xff" :required ((("cl" cl) ("tellib" tellib))) :depends (tellib)) (:name xgtags :description "Gtags facility for Emacs" :type emacsmirror :pkgname "xgtags" :required nil) (:name xlicense :description "Insert a pre-defined license text" :type emacsmirror :pkgname "xlicense" :required ((("skeleton" skeleton)))) (:name xml-lite :description "An indentation-engine for XML" :type emacsmirror :pkgname "xml-lite" :required ((("cl" cl) ("custom" custom) ("sgml-mode" sgml-mode)))) (:name xml-rpc :description "An elisp implementation of clientside XML-RPC" :type emacsmirror :pkgname "xml-rpc" :required ((("cl" cl) ("reporter" reporter) ("timezone" timezone) ("url" url-http) ("xml" xml)))) (:name xml-weather :description "Get xml-weather infos in emacs. " :type emacsmirror :pkgname "xml-weather" :required ((("cl" cl) ("emacs-core" derived) ("url" url) ("xml" xml)))) (:name xmlgen :description "A DSL for generating XML" :type emacsmirror :pkgname "xmlgen" :required ((("cl" cl)))) (:name xplain-mode :description "Mode for editing Xplain data definition and" :type emacsmirror :pkgname "xplain-mode" :required nil) (:name xquery-mode :description "A simple mode for editing xquery programs" :type emacsmirror :pkgname "xquery-mode" :required ((("nxml-mode" nxml-mode)))) (:name xrdb-mode :description "Mode for editing X resource database files" :type emacsmirror :pkgname "xrdb-mode" :required ((("custom" custom) ("reporter" reporter)))) (:name xref :description "Maintain and use cross-references and hypertext links" :type emacsmirror :pkgname "xref" :required ((("reporter" reporter)))) (:name xrefresh :description nil :type emacsmirror :pkgname "xrefresh" :required ((("json" json)))) (:name xs-mode :description "A simple major mode for write perl XS code" :type emacsmirror :pkgname "xs-mode" :required ((("cc-mode" cc-mode) ("cl" cl))) :depends (cc-mode)) (:name xsl-mode :description nil :type emacsmirror :pkgname "xsl-mode" :required ((("advice" advice) ("emacs-core" font-lock) ("psgml" psgml))) :depends (psgml)) (:name xslide :description "XSL Integrated Development Environment" :type emacsmirror :pkgname "xslide" :required ((("cedet" speedbar) ("cl" cl) ("compile" compile) ("emacs-core" font-lock) ("etags" etags) ("imenu" imenu) ("reporter" reporter) ("sendmail" sendmail))) :depends (cedet)) (:name xslt-process :description "Invoke an XSLT processor on an Emacs buffer" :type emacsmirror :pkgname "xslt-process" :required ((("browse-url" browse-url) ("cedet" speedbar) ("cl" cl) ("custom" custom) ("easymenu" easymenu) ("elib" string) ("info" info) ("reporter" reporter) ("widget" wid-edit widget))) :depends (elib cedet)) (:name xsocks :description "Emacs sockets extender" :type emacsmirror :pkgname "xsocks" :required ((("socks" socks)))) (:name xte :description nil :type emacsmirror :pkgname "xte" :required nil) (:name xterm-frobs :description "Manipulate xterm when running emacs in tty mode" :type emacsmirror :pkgname "xterm-frobs" :required nil) (:name xterm-title :description "Update xterm titles" :type emacsmirror :pkgname "xterm-title" :required ((("xterm-frobs" xterm-frobs))) :depends (xterm-frobs)) (:name xwem :description "Main part of xwem" :type emacsmirror :pkgname "xwem" :required ((("cedet" working) ("cl" cl) ("comint" comint) ("custom" cus-face) ("edmacro" edmacro) ("itimer" itimer) ("strokes" strokes) ("time" time) (nil color-selector completer xpm-button xpm-mode))) :depends (itimer cedet)) (:name xxml :description "Supplementary tools for handling SGML and HTML" :type emacsmirror :pkgname "xxml" :required nil) (:name xyzzy :description "Can use the function with built-in xyzzy" :type emacsmirror :pkgname "xyzzy" :required nil) (:name ya-cppref :description "An interface using w3m with cppreference.com references on Emacs" :type emacsmirror :pkgname "ya-cppref" :required ((("cl" cl) ("w3m" w3m))) :depends (w3m)) (:name ya-grep-edit :description "Edit grepped lines and write them back to files" :type emacsmirror :pkgname "ya-grep-edit" :required ((("cl" cl) ("grep" grep)) (("hilit-chg" hilit-chg)))) (:name yafastnav :description "Yet another fastnav" :type emacsmirror :pkgname "yafastnav" :required nil) (:name yaham :description "Simple haskell mode specialized for ghc" :type emacsmirror :pkgname "yaham" :required ((("comint" comint) ("compile" compile) ("easymenu" easymenu) ("imenu" imenu) ("newcomment" newcomment) ("regexp-opt" regexp-opt) ("thingatpt" thingatpt)))) (:name yahoo-weather :description "Get the weather from yahoo" :type emacsmirror :pkgname "yahoo-weather" :required nil) (:name yalinum :description "Yet another display line numbers" :type emacsmirror :pkgname "yalinum" :required nil) (:name yammer :description "Simple tool for accessing yammer.com" :type emacsmirror :pkgname "yammer" :required ((("image-file" image-file) ("json" json) ("oauth" oauth))) :depends (oauth)) (:name yang-mode :description nil :type emacsmirror :pkgname "yang-mode" :required ((("cc-mode" cc-fonts cc-langs cc-mode))) :depends (cc-mode)) (:name yank-menu :description nil :type emacsmirror :pkgname "yank-menu" :required ((("cl" cl) ("electric" electric) (nil yank-menu-frame)))) (:name yank-whitespace :description "Advise kill-ring functions to tag items with what the surrounding whitespace was" :type emacsmirror :pkgname "yank-whitespace" :required nil) (:name yari :description "Yet Another RI interface for Emacs" :type emacsmirror :pkgname "yari" :required ((("ansi-color" ansi-color) ("cl" cl) ("thingatpt" thingatpt)))) (:name yarm :description nil :type emacsmirror :pkgname "yarm" :required ((("anything" anything) ("cl" cl) ("easy-mmode" easy-mmode) ("historyf" historyf) (nil inflections)) (("anything" anything-show-completion) ("imenu" imenu))) :depends (historyf anything)) (:name yas-jit :description "Loads Yasnippets on demand (makes start up faster)" :type emacsmirror :pkgname "yas-jit" :required ((("cl" cl)) (("yasnippet" yasnippet) (nil yasnippet-bundle)))) (:name yasnippet :description "Yet another snippet extension for Emacs" :type emacsmirror :pkgname "yasnippet" :required ((("assoc" assoc) ("cl" cl) ("easymenu" easymenu) ("help-mode" help-mode)) (("dropdown-list" dropdown-list)))) (:name yasnippets-rspec :description "Setup yasnippets for use with rspec" :type emacsmirror :pkgname "yasnippets-rspec" :required nil) (:name yatest :description "Simple test framework" :type emacsmirror :pkgname "yatest" :required nil) (:name yatex :description nil :type emacsmirror :pkgname "yatex" :required ((("comment" comment) ("emacs-core" font-lock) ("info" info))) :depends (comment)) (:name yatm :description "Yet Another Text Menu" :type emacsmirror :pkgname "yatm" :required ((("emacs-core" overlay) ("tmm" tmm)))) (:name yodel :description nil :type emacsmirror :pkgname "yodel" :required nil) (:name youwill :description "Generate meaningless marketing hype" :type emacsmirror :pkgname "youwill" :required nil) (:name yow-fns :description "Add-ons to zippy" :type emacsmirror :pkgname "yow-fns" :required ((("cookie1" cookie1) ("yow" yow)))) (:name ysq :description "Look up stock quotes using Yahoo" :type emacsmirror :pkgname "ysq" :required nil) (:name ysq-modeline :description "Put stock quotes in mode line" :type emacsmirror :pkgname "ysq-modeline" :required ((("itimer" itimer) ("timer" timer) ("ysq" ysq))) :depends (ysq itimer)) (:name zen-mode :description "Remove/restore Emacs frame distractions quickly" :type emacsmirror :pkgname "zen-mode" :required nil) (:name zenash :description "A low-saturation, light-background version of zenburn" :type emacsmirror :pkgname "zenash" :required ((("color-theme" color-theme))) :depends (zenburn-theme)) (:name zenburn :description "Just some alien fruit salad to keep you in the zone" :type emacsmirror :pkgname "zenburn" :required ((("color-theme" color-theme))) :depends (zenburn-theme)) (:name zenburn-theme :description "A low contrast color theme for Emacs" :type emacsmirror :pkgname "zenburn-theme" :required ((("cl" cl) ("custom" cus-face) ("easymenu" easymenu) ("reporter" reporter) ("widget" wid-edit)))) (:name zencoding :description "Unfold CSS-selector-like expressions to markup" :type emacsmirror :pkgname "zencoding" :required ((("cl" cl)))) (:name zendust-theme :description "Mid-tone, low-contrast custom theme for faces" :type emacsmirror :pkgname "zendust-theme" :required nil) (:name zenirc :description "Waste time on Internet Relay Chat (ZenIRC client)" :type emacsmirror :pkgname "zenirc" :required ((("emacs-core" backquote) ("sendmail" sendmail)))) (:name zlc :description "Provides zsh like completion for minibuffer" :type emacsmirror :pkgname "zlc" :required ((("cl" cl)))) (:name zwiebel :description "Work/break interval timer" :type emacsmirror :pkgname "zwiebel" :required nil)))
